<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://linbei.top/"/>
  <updated>2020-08-19T11:36:12.041Z</updated>
  <id>https://linbei.top/</id>
  
  <author>
    <name>Mr Han</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>值传递和引用传递</title>
    <link href="https://linbei.top/%E5%80%BC%E4%BC%A0%E9%80%92%E5%92%8C%E5%BC%95%E7%94%A8%E4%BC%A0%E9%80%92/"/>
    <id>https://linbei.top/%E5%80%BC%E4%BC%A0%E9%80%92%E5%92%8C%E5%BC%95%E7%94%A8%E4%BC%A0%E9%80%92/</id>
    <published>2020-08-19T13:51:57.000Z</published>
    <updated>2020-08-19T11:36:12.041Z</updated>
    
    <content type="html"><![CDATA[<p>本文来源于<a href="https://blog.csdn.net/javazejian/article/details/51192130" target="_blank" rel="noopener">此处</a><br>Java 的值传递和引用传递在面试中一般都会都被涉及到，今天我们就来聊聊这个问题，首先我们必须认识到这个问题一般是相对函数而言的，也就是 Java 中的方法参数，那么我们先来回顾一下在程序设计语言中有关参数传递给方法（或函数）的两个专业术语：<br><a id="more"></a></p><blockquote><p>按值调用（call by value）<br>按引用调用（call by reference</p></blockquote><p>所谓的按值调用表示方法接收的是调用着提供的值，而按引用调用则表示方法接收的是调用者提供的变量地址(如果是C语言的话来说就是指针啦，当然java并没有指针的概念)。这里我们需要注意的是一个方法可以修改传递引用所对应的变量值，而不能修改传递值调用所对应的变量值，这句话相当重要，这是按值调用与引用调用的根本区别，当然如果还不理解，没关系，下面就要图文并茂的彻底分析啦。</p><p>前面我们说过java中并不存在引用调用，这点是没错的，因为java程序设计语言确实是采用了按值调用，即call by value。也就是说方法得到的是所有参数值的一个拷贝，方法并不能修改传递给它的任何参数变量的内容。下面我们来看一个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zejian.test;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * java中的按值调用</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zejian</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CallByValue</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> x=<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">updateValue</span><span class="params">(<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">      value = <span class="number">3</span> * value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"调用前x的值："</span>+x);</span><br><span class="line">      updateValue(x);</span><br><span class="line">       System.out.println(<span class="string">"调用后x的值："</span>+x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行程序，结果如下：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">调用前x的值：10</span><br><span class="line">调用后x的值：10</span><br></pre></td></tr></table></figure><p>可以看到x的值并没有变化，接下来我们一起来看一下具体的执行过程：<br><img src="/%E5%80%BC%E4%BC%A0%E9%80%92%E5%92%8C%E5%BC%95%E7%94%A8%E4%BC%A0%E9%80%92/2020-08-19-19-29-03.png" class><br>分析：</p><ol><li>value被初始化为x值的一个拷贝（也就是10）</li><li>value被乘以3后等于30，但注意此时x的值仍为10！</li><li>这个方法结束后，参数变量value不再使用，被回收。</li></ol><p>结论：当传递方法参数类型为基本数据类型（数字以及布尔值）时，一个方法是不可能修改一个基本数据类型的参数。</p><p>当然java中除了基本数据类型还有引用数据类型，也就是对象引用，那么对于这种数据类型又是怎么样的情况呢？我们还是一样先来看一个例子：<br>声明一个User对象类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zejian.test;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name=name;</span><br><span class="line"><span class="keyword">this</span>.age=age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行类如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zejian.test;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * java中的按值调用</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zejian</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CallByValue</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> User user=<span class="keyword">null</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">updateUser</span><span class="params">(User student)</span></span>&#123;</span><br><span class="line">student.setName(<span class="string">"Lishen"</span>);</span><br><span class="line">student.setAge(<span class="number">18</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">user = <span class="keyword">new</span> User(<span class="string">"zhangsan"</span>,<span class="number">26</span>);</span><br><span class="line">System.out.println(<span class="string">"调用前user的值："</span>+user.toString());</span><br><span class="line">updateUser(user);</span><br><span class="line">System.out.println(<span class="string">"调用后user的值："</span>+user.toString());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">调用前user的值：User [name=zhangsan, age=26]</span><br><span class="line">调用后user的值：User [name=Lishen, age=18]</span><br></pre></td></tr></table></figure><p>很显然，User的值被改变了，也就是说方法参数类型如果是引用类型的话，引用类型对应的值将会被修改，下面我们来分析一下这个过程：<br><img src="/%E5%80%BC%E4%BC%A0%E9%80%92%E5%92%8C%E5%BC%95%E7%94%A8%E4%BC%A0%E9%80%92/2020-08-19-19-32-28.png" class></p><p>过程分析：<br>1）student变量被初始化为user值的拷贝，这里是一个对象的引用。<br>2）调用student变量的set方法作用在这个引用对象上，user和student同时引用的User对象内部值被修改。<br>3）方法结束后，student变量不再使用，被释放，而user还是没有变，依然指向User对象。</p><p>结论：当传递方法参数类型为引用数据类型时，一个方法将修改一个引用数据类型的参数所指向对象的值。</p><p>虽然到这里两个数据类型的传递都分析完了，也明白的基本数据类型的传递和引用数据类型的传递区别，前者将不会修改原数据的值，而后者将会修改引用所指向对象的值。可通过上面的实例我们可能就会觉得java同时拥有按值调用和按引用调用啊，可惜的是这样的理解是有误导性的，虽然上面引用传递表面上体现了按引用调用现象，但是java中确实只有按值调用而没有按引用调用。到这里估计不少人都蒙逼了，下面我们通过一个反例来说明（回忆一下开头我们所说明的按值调用与按引用调用的根本区别）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zejian.test;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * java中的按值调用</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zejian</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CallByValue</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> User user=<span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> User stu=<span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 交换两个对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> x</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> y</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(User x,User y)</span></span>&#123;</span><br><span class="line">User temp =x;</span><br><span class="line">x=y;</span><br><span class="line">y=temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">user = <span class="keyword">new</span> User(<span class="string">"user"</span>,<span class="number">26</span>);</span><br><span class="line">stu = <span class="keyword">new</span> User(<span class="string">"stu"</span>,<span class="number">18</span>);</span><br><span class="line">System.out.println(<span class="string">"调用前user的值："</span>+user.toString());</span><br><span class="line">System.out.println(<span class="string">"调用前stu的值："</span>+stu.toString());</span><br><span class="line">swap(user,stu);</span><br><span class="line">System.out.println(<span class="string">"调用后user的值："</span>+user.toString());</span><br><span class="line">System.out.println(<span class="string">"调用后stu的值："</span>+stu.toString());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们通过一个swap函数来交换两个变量user和stu的值，在前面我们说过，如果是按引用调用那么一个方法可以修改传递引用所对应的变量值，也就是说如果java是按引用调用的话，那么swap方法将能够实现数据的交换，而实际运行结果是：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">调用前user的值：User [name=user, age=26]</span><br><span class="line">调用前stu的值：User [name=stu, age=18]</span><br><span class="line">调用后user的值：User [name=user, age=26]</span><br><span class="line">调用后stu的值：User [name=stu, age=18]</span><br></pre></td></tr></table></figure><p>我们发现user和stu的值并没有发生变化，也就是方法并没有改变存储在变量user和stu中的对象引用。swap方法的参数x和y被初始化为两个对象引用的拷贝，这个方法交换的是这两个拷贝的值而已，最终，所做的事都是白费力气罢了。在方法结束后x，y将被丢弃，而原来的变量user和stu仍然引用这个方法调用之前所引用的对象。<br><img src="/%E5%80%BC%E4%BC%A0%E9%80%92%E5%92%8C%E5%BC%95%E7%94%A8%E4%BC%A0%E9%80%92/2020-08-19-19-34-34.png" class></p><p>这个过程也充分说明了java程序设计语言对对象采用的不是引用调用，实际上是对象引用进行的是值传递，当然在这里我们可以简单理解为这就是按值调用和引用调用的区别，而且必须明白即使java函数在传递引用数据类型时，也只是拷贝了引用的值罢了，之所以能修改引用数据是因为它们同时指向了一个对象，但这仍然是按值调用而不是引用调用。</p><p>总结：</p><ul><li>一个方法不能修改一个基本数据类型的参数（数值型和布尔型）。</li><li>一个方法可以修改一个引用所指向的对象状态，但这仍然是按值调用而非引用调用。</li><li>上面两种传递都进行了值拷贝的过程。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文来源于&lt;a href=&quot;https://blog.csdn.net/javazejian/article/details/51192130&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;此处&lt;/a&gt;&lt;br&gt;Java 的值传递和引用传递在面试中一般都会都被涉及到，今天我们就来聊聊这个问题，首先我们必须认识到这个问题一般是相对函数而言的，也就是 Java 中的方法参数，那么我们先来回顾一下在程序设计语言中有关参数传递给方法（或函数）的两个专业术语：&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="面试" scheme="https://linbei.top/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="Java" scheme="https://linbei.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>重载和重写</title>
    <link href="https://linbei.top/Java%E9%87%8D%E8%BD%BD%E5%92%8C%E9%87%8D%E5%86%99/"/>
    <id>https://linbei.top/Java%E9%87%8D%E8%BD%BD%E5%92%8C%E9%87%8D%E5%86%99/</id>
    <published>2020-08-17T03:11:57.000Z</published>
    <updated>2020-08-17T06:58:58.631Z</updated>
    
    <content type="html"><![CDATA[<p>Java的重载和重写<br><a id="more"></a><br>之前刷选择题刷了挺多，碰到过重载和重写区别的题挺多的，当时感觉记住了，可回过头来看结果又有些东西忘记了，所以还是写篇文章记录下吧。</p><h2 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h2><ol><li>重载是多态在编译器时期的表现形式</li><li>重载的判定只有两个条件，方法名一致、形参列表不同，返回值不同不能作为判断条件</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        Father s = <span class="keyword">new</span> Father();</span><br><span class="line">        s.sayHello();</span><br><span class="line">        s.sayHello(<span class="string">"wintershii"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello"</span> + <span class="string">" "</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h2><ol><li>重写是在方法运行时，通过调用者的实际类型来确定方法的调用版本</li><li>重写只发生在可见的实例方法中。静态方法不存在重写，形式上的重写只能说是隐藏。私有方法不存在重写，父类中private方法子类就算定义了，相当于一个新方法。静态方法和实例方法不存在相互重写。</li><li>重写满足一个原则：两同两小一大。两同是方法名和形参列表相同。两小指的是重写方法的返回值和抛出异常要和被重写方法的返回值和抛出的异常相同或者是其子类，注意，一旦返回值是基本数据类型，那么重写方法和被重写方法必须相同，且不存在自动拆装箱问题。一大指的是重写方法的访问修饰符要大于等于被重写方法的访问修饰符。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        Son s = <span class="keyword">new</span> Son();</span><br><span class="line">        s.sayHello();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        System.out.println(<span class="string">"hello by "</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="面试时，问：重载（Overload）和重写（Override）的区别"><a href="#面试时，问：重载（Overload）和重写（Override）的区别" class="headerlink" title="面试时，问：重载（Overload）和重写（Override）的区别"></a>面试时，问：重载（Overload）和重写（Override）的区别</h3><blockquote><p>答：方法的重载和重写都是实现多态的方式，区别在于前者实现的是编译时的多台性，后者实现的是运行时的多态性。重载发生在一个类中，同名的方法如果有不同的参数列表(参数类型不同，参数个数不同或者两者都不同)则被视为重载；重写发生在子类与父类之间，重写要求子类被重写方法与父类被重写方法有相同的参数列表，有兼容的返回类型，有比父类被重写方法更好访问，不能比父类被重写方法声明更多的异常(里氏替换原则)。重载对返回值类型没有特殊的要求，不能根据返回类型进行区分。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Java的重载和重写&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="面试" scheme="https://linbei.top/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="面经" scheme="https://linbei.top/tags/%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>CSharp调用Matlab</title>
    <link href="https://linbei.top/CSharp%E8%B0%83%E7%94%A8Matlab/"/>
    <id>https://linbei.top/CSharp%E8%B0%83%E7%94%A8Matlab/</id>
    <published>2020-07-06T03:11:57.000Z</published>
    <updated>2020-07-06T11:11:21.684Z</updated>
    
    <content type="html"><![CDATA[<p>在matlab里仿真实现了，如果不想重新在C#代码里写程序的话，就可以用matlab生成dll程序集直接调用。<br><a id="more"></a></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>拿Matlab自带函数Linqprog(线性规划的函数)举例，首先新建函数，输入如下函数，并保存。<br><img src="/CSharp%E8%B0%83%E7%94%A8Matlab/2020-07-06-18-58-24.png" class><br>其次在matlab命令行中输入deploytool，跳出如下页面<br><img src="/CSharp%E8%B0%83%E7%94%A8Matlab/2020-07-06-18-58-40.png" class><br>选择Library Compiler 进入如下页面<br><img src="/CSharp%E8%B0%83%E7%94%A8Matlab/2020-07-06-18-59-12.png" class></p><p>第一个箭头选择.net环境，第二个箭头添加你刚才保存的函数。后面其他的配置不需要更改，如果想要对生成的dll文件里面的类名以及命名空间进行修改可以在此图片最后一部分进行修改，此处就不修改。点击右上角Package，保存并等待。此处如果生成失败，说明matlab安装存在问题，自己在网上找资源，或者可以留言找我要资源（免费哟）。这里生成dll文件就已经完成了，就剩下最后一步编写C#程序了。</p><h2 id="编写C-文件"><a href="#编写C-文件" class="headerlink" title="编写C#文件"></a>编写C#文件</h2><p>首先创建项目，并导入两个依赖项，(1)刚才Package生成的dll文件(MyLinprog.dll)。(2)MWArray.dll文件，在Matlab安装目录下%matlabroot%\\toolbox\dotnetbuilder\bin\win64\v4.0\MWArray.dll。导入依赖项成功之后编写函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;导入两个命名空间</span><br><span class="line">&#x2F;&#x2F;using MathWorks.MATLAB.NET.Arrays;</span><br><span class="line">&#x2F;&#x2F;using MyLinprog;</span><br><span class="line">static void Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            &#x2F;&#x2F;输入参数</span><br><span class="line">            MWArray A &#x3D; (MWNumericArray)new double[,] &#123; &#123; 1, -1, 1 &#125;, &#123; 3, 2, 4 &#125;, &#123; 3, 2, 0 &#125; &#125;;</span><br><span class="line">            MWArray f &#x3D; (MWNumericArray)new double[] &#123; -5, -4, -6 &#125;;</span><br><span class="line">            MWArray b &#x3D; (MWNumericArray)new double[] &#123; 20, 42, 30 &#125;;</span><br><span class="line">            MWArray lb &#x3D; (MWNumericArray)new double[] &#123; 0, 0, 0 &#125;;</span><br><span class="line">            MWArray ub &#x3D; (MWNumericArray)new double[] &#123; &#125;;</span><br><span class="line">            MWArray Aeq &#x3D; (MWNumericArray)new int[3] &#123;0,0,0&#125;;</span><br><span class="line">            MWArray beq &#x3D; (MWNumericArray)new int[1] &#123;0&#125;;</span><br><span class="line">            MWArray x0 &#x3D; (MWNumericArray)new int[0] ;</span><br><span class="line"></span><br><span class="line">            MWArray[] agrsIn &#x3D; new MWArray[] &#123; (MWNumericArray)f, (MWNumericArray)A,     (MWNumericArray)b, (MWNumericArray)Aeq, (MWNumericArray)beq,(MWNumericArray)lb, (MWNumericArray)ub, (MWNumericArray)x0 &#125;;&#x2F;&#x2F;输入参数</span><br><span class="line"></span><br><span class="line">            MWArray[] agrsOut &#x3D; new MWArray[2]; &#x2F;&#x2F;输出存放的数组</span><br><span class="line"></span><br><span class="line">            MyLinprog.Class1 mu &#x3D; new MyLinprog.Class1(); &#x2F;&#x2F;实例化对象</span><br><span class="line">            mu.MyLinprog(2, ref agrsOut, agrsIn); &#x2F;&#x2F;计算</span><br><span class="line">            Console.WriteLine(&quot;x最优值为 : \t&quot;);</span><br><span class="line">            Console.WriteLine(agrsOut[0]);</span><br><span class="line">            Console.WriteLine(&quot;得到的y值为 : \t&quot; + agrsOut[1]);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>此时已经完成了所有工作，接下来总结在这个过程中常出现的问题<br>问题1:<br><img src="/CSharp%E8%B0%83%E7%94%A8Matlab/2020-07-06-19-01-47.png" class><br>在调用MWArray类时出现问题，此时应注意你所用的MWArray的环境需要和你的项目平台保持一致。即，引用的win64下的MWArray时，c#的项目平台应该是x64。</p><p>问题2:<br>在实例化对象处报错（因为我的环境配置好的，修改环境需要重启电脑，所以就没有去把错误调处来）。报错依然是类型初始化异常。<br>此时就应该查看MCR(Matlab Runtime)与项目平台以及MATLAB\R2017b\bin\win64三者是否保持一致。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在matlab里仿真实现了，如果不想重新在C#代码里写程序的话，就可以用matlab生成dll程序集直接调用。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="环境搭建" scheme="https://linbei.top/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="Matlab" scheme="https://linbei.top/tags/Matlab/"/>
    
      <category term="算法" scheme="https://linbei.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Docker搭建RabbitMq集群及HaProxy负载均衡</title>
    <link href="https://linbei.top/Docker%E6%90%AD%E5%BB%BARabbitMq%E9%9B%86%E7%BE%A4%E5%8F%8AHaProxy%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    <id>https://linbei.top/Docker%E6%90%AD%E5%BB%BARabbitMq%E9%9B%86%E7%BE%A4%E5%8F%8AHaProxy%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</id>
    <published>2020-06-30T03:11:57.000Z</published>
    <updated>2020-07-06T10:51:53.510Z</updated>
    
    <content type="html"><![CDATA[<p>使用同一台阿里云服务器搭建3个RabbitMq的集群和Haproxy负载均衡。<br><a id="more"></a></p><h2 id="创建rabbitmq容器"><a href="#创建rabbitmq容器" class="headerlink" title="创建rabbitmq容器"></a>创建rabbitmq容器</h2><p>使用docker pull  rabbitmq拉取最新rabbimq镜像，docker pull haproxy 拉取haproxy镜像<br><img src="/Docker%E6%90%AD%E5%BB%BARabbitMq%E9%9B%86%E7%BE%A4%E5%8F%8AHaProxy%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/2020-07-06-18-41-37.png" class><br>创建docker网络 rabbtimanet 用于haproxy和rabbimq通信</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network create rabbtimanet</span><br></pre></td></tr></table></figure><img src="/Docker%E6%90%AD%E5%BB%BARabbitMq%E9%9B%86%E7%BE%A4%E5%8F%8AHaProxy%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/2020-07-06-18-43-06.png" class><p>创建三节点rabbitmq容器<br>rabbitmq1：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name=rabbitmq1 -p 5672:5672 -p 15672:15672 -e RABBITMQ_NODENAME=rabbitmq1 -e RABBITMQ_ERLANG_COOKIE='YZSDHWMFSMKEMBDHSGGZ'  -h rabbitmq1 --net=rabbtimanet rabbitmq:management</span><br></pre></td></tr></table></figure><p>rabbitmq2：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name=rabbitmq1 -p 5673:5672 -p 15673:15672 -e RABBITMQ_NODENAME=rabbitmq2 -e RABBITMQ_ERLANG_COOKIE='YZSDHWMFSMKEMBDHSGGZ'  -h rabbitmq2 --net=rabbtimanet rabbitmq:management</span><br></pre></td></tr></table></figure><p>rabbitmq3：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name=rabbitmq1 -p 5674:5672 -p 15674:15672 -e RABBITMQ_NODENAME=rabbitmq3 -e RABBITMQ_ERLANG_COOKIE='YZSDHWMFSMKEMBDHSGGZ'  -h rabbitmq3 --net=rabbtimanet rabbitmq:management</span><br></pre></td></tr></table></figure><img src="/Docker%E6%90%AD%E5%BB%BARabbitMq%E9%9B%86%E7%BE%A4%E5%8F%8AHaProxy%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/2020-07-06-18-45-36.png" class><h2 id="rabbitmq集群"><a href="#rabbitmq集群" class="headerlink" title="rabbitmq集群"></a>rabbitmq集群</h2><p>分别进入rabbitmq2 和rabbitmq3容器(docker exec -it 容器id /bin/bash)，执行以下：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl stop_app</span><br><span class="line">rabbitmqctl reset</span><br><span class="line">rabbitmqctl join_cluster --ram rabbitmq1@rabbitmq1</span><br><span class="line">rabbitmqctl start_app</span><br></pre></td></tr></table></figure><img src="/Docker%E6%90%AD%E5%BB%BARabbitMq%E9%9B%86%E7%BE%A4%E5%8F%8AHaProxy%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/2020-07-06-18-46-24.png" class><h2 id="部署Haproxy"><a href="#部署Haproxy" class="headerlink" title="部署Haproxy"></a>部署Haproxy</h2><p>编辑haproxy配置文件如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">global</span><br><span class="line">  daemon</span><br><span class="line">  maxconn 256</span><br><span class="line"></span><br><span class="line">defaults</span><br><span class="line">  mode http</span><br><span class="line">  timeout connect 5000ms</span><br><span class="line">  timeout client 5000ms</span><br><span class="line">  timeout server 5000ms</span><br><span class="line"></span><br><span class="line">listen rabbitmq_cluster #监听5677端口转发到rabbitmq服务</span><br><span class="line">  bind 0.0.0.0:5677</span><br><span class="line">  option tcplog</span><br><span class="line">  mode tcp</span><br><span class="line">  balance leastconn</span><br><span class="line">  server rabbit1 rabbitmq1:5672 check inter 2s rise 2 fall 3</span><br><span class="line">  server rabbit2 rabbitmq2:5672 check inter 2s rise 2 fall 3</span><br><span class="line">  server rabbit3 rabbitmq3:5672 check inter 2s rise 2 fall 3</span><br><span class="line">listen http_front #haproxy的客户页面</span><br><span class="line">  bind 0.0.0.0:80</span><br><span class="line">  stats uri /haproxy?stats</span><br><span class="line"></span><br><span class="line">listen rabbitmq_admin #监听8011端口转发到rabbitmq的客户端</span><br><span class="line">  bind 0.0.0.0:8001</span><br><span class="line">  server rabbit1 rabbitmq1:15672 check inter 2s rise 2 fall 3</span><br><span class="line">  server rabbit2 rabbitmq2:15672 check inter 2s rise 2 fall 3</span><br><span class="line">  server rabbit2 rabbitmq3:15672 check inter 2s rise 2 fall 3</span><br></pre></td></tr></table></figure><p>创建haproxy容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name rabbitmq-haproxy  -p 8090:80 -p 5677:5677 -p 8001:8001  --net=rabbtimanet -v /home/haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro haproxy:latest</span><br></pre></td></tr></table></figure><p>通过外部8090访问haproxy容器的80端口，外部8001访问haproxy容器8001，外部5677访问haproxy 容器5677端口</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>连接rabbitmq 的5677端口，并发送数据，检查haproxy的web页面，对每次的请求转发至不同的rabbitmq<br><img src="/Docker%E6%90%AD%E5%BB%BARabbitMq%E9%9B%86%E7%BE%A4%E5%8F%8AHaProxy%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/2020-07-06-18-48-54.png" class><br>通过haproxy的8001端口访问rabbitmq的客户端：<br><img src="/Docker%E6%90%AD%E5%BB%BARabbitMq%E9%9B%86%E7%BE%A4%E5%8F%8AHaProxy%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/2020-07-06-18-49-08.png" class></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用同一台阿里云服务器搭建3个RabbitMq的集群和Haproxy负载均衡。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="环境搭建" scheme="https://linbei.top/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="Docker" scheme="https://linbei.top/tags/Docker/"/>
    
      <category term="Mq" scheme="https://linbei.top/tags/Mq/"/>
    
  </entry>
  
  <entry>
    <title>JAVA代理</title>
    <link href="https://linbei.top/Java%E4%BB%A3%E7%90%86/"/>
    <id>https://linbei.top/Java%E4%BB%A3%E7%90%86/</id>
    <published>2020-06-28T13:51:57.000Z</published>
    <updated>2020-06-28T12:40:54.699Z</updated>
    
    <content type="html"><![CDATA[<p>代理模式（Proxy）是通过代理对象访问目标对象，这样可以在目标对象基础上增强额外的功能，如添加权限，访问控制和审计等功能。<br><a id="more"></a><br><img src="/Java%E4%BB%A3%E7%90%86/2020-06-28-19-53-13.png" class><br><img src="/Java%E4%BB%A3%E7%90%86/2020-06-28-19-53-23.png" class></p><p>Java代理分为静态代理和动态代理和Cglib代理，下面进行逐个说明。</p><h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2><p>接口类AdminService.java接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lance.proxy.demo.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AdminService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">Object <span class="title">find</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现类AdminServiceImpl.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lance.proxy.demo.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdminServiceImpl</span> <span class="keyword">implements</span> <span class="title">AdminService</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"修改管理系统数据"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">find</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"查看管理系统数据"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Object();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代理类AdminServiceProxy.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lance.proxy.demo.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdminServiceProxy</span> <span class="keyword">implements</span> <span class="title">AdminService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AdminService adminService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AdminServiceProxy</span><span class="params">(AdminService adminService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.adminService = adminService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"判断用户是否有权限进行update操作"</span>);</span><br><span class="line">        adminService.update();</span><br><span class="line">        System.out.println(<span class="string">"记录用户执行update操作的用户信息、更改内容和时间等"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">find</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"判断用户是否有权限进行find操作"</span>);</span><br><span class="line">        System.out.println(<span class="string">"记录用户执行find操作的用户信息、查看内容和时间等"</span>);</span><br><span class="line">        <span class="keyword">return</span> adminService.find();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类StaticProxyTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lance.proxy.demo.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticProxyTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AdminService adminService = <span class="keyword">new</span> AdminServiceImpl();</span><br><span class="line">        AdminServiceProxy proxy = <span class="keyword">new</span> AdminServiceProxy(adminService);</span><br><span class="line">        proxy.update();</span><br><span class="line">        System.out.println(<span class="string">"============================="</span>);</span><br><span class="line">        proxy.find();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">判断用户是否有权限进行update操作</span><br><span class="line">修改管理系统数据</span><br><span class="line">记录用户执行update操作的用户信息、更改内容和时间等</span><br><span class="line">=============================</span><br><span class="line">判断用户是否有权限进行find操作</span><br><span class="line">记录用户执行find操作的用户信息、查看内容和时间等</span><br><span class="line">查看管理系统数据</span><br></pre></td></tr></table></figure><p>总结：<br>静态代理模式在不改变目标对象的前提下，实现了对目标对象的功能扩展。<br>不足：静态代理实现了目标对象的所有方法，一旦目标接口增加方法，代理对象和目标对象都要进行相应的修改，增加维护成本。</p><h2 id="JDK动态代理"><a href="#JDK动态代理" class="headerlink" title="JDK动态代理"></a>JDK动态代理</h2><p>为解决静态代理对象必须实现接口的所有方法的问题，Java给出了动态代理，动态代理具有如下特点：<br>1.Proxy对象不需要implements接口；<br>2.Proxy对象的生成利用JDK的Api，在JVM内存中动态的构建Proxy对象。需要使用java.lang.reflect.Proxy类的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns an instance of a proxy class for the specified interfaces</span></span><br><span class="line"><span class="comment">     * that dispatches method invocations to the specified invocation</span></span><br><span class="line"><span class="comment">     * handler.</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>   loader the class loader to define the proxy class</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>   interfaces the list of interfaces for the proxy class</span></span><br><span class="line"><span class="comment">     *          to implement</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>   h the invocation handler to dispatch method invocations to</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  a proxy instance with the specified invocation handler of a</span></span><br><span class="line"><span class="comment">     *          proxy class that is defined by the specified class loader</span></span><br><span class="line"><span class="comment">     *          and that implements the specified interfaces</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> Object <span class="title">newProxyInstance</span><span class="params">(ClassLoader loader, Class&lt;?&gt;[] interfaces,InvocationHandler invocationHandler )</span></span>;</span><br></pre></td></tr></table></figure><p>方法，方法参数说明：<br>a.ClassLoader loader：指定当前target对象使用类加载器，获取加载器的方法是固定的；<br>b.Class&lt;?&gt;[] interfaces：target对象实现的接口的类型，使用泛型方式确认类型<br>c.InvocationHandler invocationHandler:事件处理,执行target对象的方法时，会触发事件处理器的方法，会把当前执行target对象的方法作为参数传入。</p><h3 id="实战代码"><a href="#实战代码" class="headerlink" title="实战代码"></a>实战代码</h3><p>AdminServiceImpl.java和AdminService.java和原来一样，这里不再赘述。<br>AdminServiceInvocation.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lance.proxy.demo.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdminServiceInvocation</span>  <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AdminServiceInvocation</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"判断用户是否有权限进行操作"</span>);</span><br><span class="line">       Object obj = method.invoke(target);</span><br><span class="line">        System.out.println(<span class="string">"记录用户执行操作的用户信息、更改内容和时间等"</span>);</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AdminServiceDynamicProxy.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lance.proxy.demo.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdminServiceDynamicProxy</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line">    <span class="keyword">private</span> InvocationHandler invocationHandler;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AdminServiceDynamicProxy</span><span class="params">(Object target,InvocationHandler invocationHandler)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">        <span class="keyword">this</span>.invocationHandler = invocationHandler;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getPersonProxy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Object obj = Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), invocationHandler);</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DynamicProxyTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lance.proxy.demo.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicProxyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 方法一</span></span><br><span class="line">        System.out.println(<span class="string">"============ 方法一 =============="</span>);</span><br><span class="line">        AdminService adminService = <span class="keyword">new</span> AdminServiceImpl();</span><br><span class="line">        System.out.println(<span class="string">"代理的目标对象："</span> + adminService.getClass());</span><br><span class="line"></span><br><span class="line">        AdminServiceInvocation adminServiceInvocation = <span class="keyword">new</span> AdminServiceInvocation(adminService);</span><br><span class="line"></span><br><span class="line">        AdminService proxy = (AdminService) <span class="keyword">new</span> AdminServiceDynamicProxy(adminService, adminServiceInvocation).getPersonProxy();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"代理对象："</span> + proxy.getClass());</span><br><span class="line"></span><br><span class="line">        Object obj = proxy.find();</span><br><span class="line">        System.out.println(<span class="string">"find 返回对象："</span> + obj.getClass());</span><br><span class="line">        System.out.println(<span class="string">"----------------------------------"</span>);</span><br><span class="line">        proxy.update();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方法二</span></span><br><span class="line">        System.out.println(<span class="string">"============ 方法二 =============="</span>);</span><br><span class="line">        AdminService target = <span class="keyword">new</span> AdminServiceImpl();</span><br><span class="line">        AdminServiceInvocation invocation = <span class="keyword">new</span> AdminServiceInvocation(adminService);</span><br><span class="line">        AdminService proxy2 = (AdminService) Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), invocation);</span><br><span class="line"></span><br><span class="line">        Object obj2 = proxy2.find();</span><br><span class="line">        System.out.println(<span class="string">"find 返回对象："</span> + obj2.getClass());</span><br><span class="line">        System.out.println(<span class="string">"----------------------------------"</span>);</span><br><span class="line">        proxy2.update();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方法三</span></span><br><span class="line">        System.out.println(<span class="string">"============ 方法三 =============="</span>);</span><br><span class="line">        <span class="keyword">final</span> AdminService target3 = <span class="keyword">new</span> AdminServiceImpl();</span><br><span class="line">        AdminService proxy3 = (AdminService) Proxy.newProxyInstance(target3.getClass().getClassLoader(), target3.getClass().getInterfaces(), <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"判断用户是否有权限进行操作"</span>);</span><br><span class="line">                Object obj = method.invoke(target3, args);</span><br><span class="line">                System.out.println(<span class="string">"记录用户执行操作的用户信息、更改内容和时间等"</span>);</span><br><span class="line">                <span class="keyword">return</span> obj;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        Object obj3 = proxy3.find();</span><br><span class="line">        System.out.println(<span class="string">"find 返回对象："</span> + obj3.getClass());</span><br><span class="line">        System.out.println(<span class="string">"----------------------------------"</span>);</span><br><span class="line">        proxy3.update();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">============ 方法一 ==============</span><br><span class="line">代理的目标对象：<span class="class"><span class="keyword">class</span> <span class="title">com</span>.<span class="title">lance</span>.<span class="title">proxy</span>.<span class="title">demo</span>.<span class="title">service</span>.<span class="title">AdminServiceImpl</span></span></span><br><span class="line"><span class="class">代理对象：<span class="title">class</span> <span class="title">com</span>.<span class="title">sun</span>.<span class="title">proxy</span>.$<span class="title">Proxy0</span></span></span><br><span class="line"><span class="class">判断用户是否有权限进行操作</span></span><br><span class="line"><span class="class">查看管理系统数据</span></span><br><span class="line"><span class="class">记录用户执行操作的用户信息、更改内容和时间等</span></span><br><span class="line"><span class="class"><span class="title">find</span> 返回对象：<span class="title">class</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">Object</span></span></span><br><span class="line"><span class="class">----------------------------------</span></span><br><span class="line"><span class="class">判断用户是否有权限进行操作</span></span><br><span class="line"><span class="class">修改管理系统数据</span></span><br><span class="line"><span class="class">记录用户执行操作的用户信息、更改内容和时间等</span></span><br><span class="line"><span class="class"></span>============ 方法二 ==============</span><br><span class="line">判断用户是否有权限进行操作</span><br><span class="line">查看管理系统数据</span><br><span class="line">记录用户执行操作的用户信息、更改内容和时间等</span><br><span class="line">find 返回对象：<span class="class"><span class="keyword">class</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">Object</span></span></span><br><span class="line"><span class="class">----------------------------------</span></span><br><span class="line"><span class="class">判断用户是否有权限进行操作</span></span><br><span class="line"><span class="class">修改管理系统数据</span></span><br><span class="line"><span class="class">记录用户执行操作的用户信息、更改内容和时间等</span></span><br><span class="line"><span class="class"></span>============ 方法三 ==============</span><br><span class="line">判断用户是否有权限进行操作</span><br><span class="line">查看管理系统数据</span><br><span class="line">记录用户执行操作的用户信息、更改内容和时间等</span><br><span class="line">find 返回对象：<span class="class"><span class="keyword">class</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">Object</span></span></span><br><span class="line"><span class="class">----------------------------------</span></span><br><span class="line"><span class="class">判断用户是否有权限进行操作</span></span><br><span class="line"><span class="class">修改管理系统数据</span></span><br><span class="line"><span class="class">记录用户执行操作的用户信息、更改内容和时间等</span></span><br></pre></td></tr></table></figure><h2 id="Cglib代理"><a href="#Cglib代理" class="headerlink" title="Cglib代理"></a>Cglib代理</h2><p>DK动态代理要求target对象是一个接口的实现对象，假如target对象只是一个单独的对象，并没有实现任何接口，这时候就会用到Cglib代理(Code Generation Library)，即通过构建一个子类对象，从而实现对target对象的代理，因此目标对象不能是final类(报错)，且目标对象的方法不能是final或static（不执行代理功能）。<br>Cglib依赖的jar包</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&lt;dependency&gt;</span></span><br><span class="line">          <span class="string">&lt;groupId&gt;cglib&lt;/groupId&gt;</span></span><br><span class="line">          <span class="string">&lt;artifactId&gt;cglib&lt;/artifactId&gt;</span></span><br><span class="line">          <span class="string">&lt;version&gt;3.2.10&lt;/version&gt;</span></span><br><span class="line"><span class="string">&lt;/dependency&gt;</span></span><br></pre></td></tr></table></figure><h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p>目标对象类AdminCglibService.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lance.proxy.demo.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdminCglibService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"修改管理系统数据"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">find</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"查看管理系统数据"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Object();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代理类AdminServiceCglibProxy.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lance.proxy.demo.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.Enhancer;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodInterceptor;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodProxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdminServiceCglibProxy</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AdminServiceCglibProxy</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//给目标对象创建一个代理对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getProxyInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//工具类</span></span><br><span class="line">        Enhancer en = <span class="keyword">new</span> Enhancer();</span><br><span class="line">        <span class="comment">//设置父类</span></span><br><span class="line">        en.setSuperclass(target.getClass());</span><br><span class="line">        <span class="comment">//设置回调函数</span></span><br><span class="line">        en.setCallback(<span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">//创建子类代理对象</span></span><br><span class="line">        <span class="keyword">return</span> en.create();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object object, Method method, Object[] arg2, MethodProxy proxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"判断用户是否有权限进行操作"</span>);</span><br><span class="line">        Object obj = method.invoke(target);</span><br><span class="line">        System.out.println(<span class="string">"记录用户执行操作的用户信息、更改内容和时间等"</span>);</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Cglib代理测试类CglibProxyTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lance.proxy.demo.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CglibProxyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        AdminCglibService target = <span class="keyword">new</span> AdminCglibService();</span><br><span class="line">        AdminServiceCglibProxy proxyFactory = <span class="keyword">new</span> AdminServiceCglibProxy(target);</span><br><span class="line">        AdminCglibService proxy = (AdminCglibService)proxyFactory.getProxyInstance();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"代理对象："</span> + proxy.getClass());</span><br><span class="line"></span><br><span class="line">        Object obj = proxy.find();</span><br><span class="line">        System.out.println(<span class="string">"find 返回对象："</span> + obj.getClass());</span><br><span class="line">        System.out.println(<span class="string">"----------------------------------"</span>);</span><br><span class="line">        proxy.update();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">代理对象：<span class="class"><span class="keyword">class</span> <span class="title">com</span>.<span class="title">lance</span>.<span class="title">proxy</span>.<span class="title">demo</span>.<span class="title">service</span>.<span class="title">AdminCglibService</span>$$<span class="title">EnhancerByCGLIB</span>$$41<span class="title">b156f9</span></span></span><br><span class="line"><span class="class">判断用户是否有权限进行操作</span></span><br><span class="line"><span class="class">查看管理系统数据</span></span><br><span class="line"><span class="class">记录用户执行操作的用户信息、更改内容和时间等</span></span><br><span class="line"><span class="class"><span class="title">find</span> 返回对象：<span class="title">class</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">Object</span></span></span><br><span class="line"><span class="class">----------------------------------</span></span><br><span class="line"><span class="class">判断用户是否有权限进行操作</span></span><br><span class="line"><span class="class">修改管理系统数据</span></span><br><span class="line"><span class="class">记录用户执行操作的用户信息、更改内容和时间等</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>理解上述Java代理后，也就明白Spring AOP的代理实现模式，即加入Spring中的target是接口的实现时，就使用JDK动态代理，否是就使用Cglib代理。Spring也可以通过<aop:config proxy-target-class="true">强制使用Cglib代理，使用Java字节码编辑类库ASM操作字节码来实现，直接以二进制形式动态地生成 stub 类或其他代理类，性能比JDK更强。</aop:config></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;代理模式（Proxy）是通过代理对象访问目标对象，这样可以在目标对象基础上增强额外的功能，如添加权限，访问控制和审计等功能。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="面试" scheme="https://linbei.top/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="JAVA" scheme="https://linbei.top/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>招银网络一面面经</title>
    <link href="https://linbei.top/%E6%8B%9B%E9%93%B6%E7%BD%91%E7%BB%9C%E4%B8%80%E9%9D%A2%E9%9D%A2%E7%BB%8F/"/>
    <id>https://linbei.top/%E6%8B%9B%E9%93%B6%E7%BD%91%E7%BB%9C%E4%B8%80%E9%9D%A2%E9%9D%A2%E7%BB%8F/</id>
    <published>2020-06-28T03:11:57.000Z</published>
    <updated>2020-07-10T03:34:17.158Z</updated>
    
    <content type="html"><![CDATA[<p>第一次的电话面试，开始的时候还是有点忐忑的，有一丝紧张感的，在端午节放假前接到了一面的邀请，然后，整个端午节假期就都在准备这个电话面试了。<br><a id="more"></a></p><h2 id="笔试"><a href="#笔试" class="headerlink" title="笔试"></a>笔试</h2><p>先来说一说笔试吧，笔试时间是6.23号，时间是2.5小时，一开始的时候有些吃惊，一般的笔试不都是2个小时的吗，好吧，当我看到题目之后大概明白了，原来最后还有一个100道题的性格测试题。笔试分为俩个部分，一部分是必做题，针对软件开发的，所有选各种语言的开发者这部分题目是一样的，发现选择题是真的难，有设计到公务员的逻辑题，有操作系统的题，有设计模式的题，有计算机网络的题，还有数学题，杂七杂八的，跟java相关的好像就基本没有。<br>然后是java的必做题，相当于三道编程题。不过它的编程题和其他的不太一样，前面俩道是编程的填空题，依照给的思路去填空，第一道就是空格替换为%20，这在剑指offer里好像就有，如果要给个白板自己写，我觉得可能还更简单点。然后第二道是一个动态代理相关的，扩展一个权限，第三道给的是一个白板，实现洗牌，后来复盘查看了一下，这和网易的一道编程题很像，不过在这上面做了一些修改。</p><h2 id="一面"><a href="#一面" class="headerlink" title="一面"></a>一面</h2><p>一面的时间给的是28/29，也没有给具体的时间，有点痛苦，不知道什么时候会来电话。结果第一天早上就来电话了，早结束比较好，反正该来的总会来，可以让一个被吊着的心放下来。</p><h3 id="第一题-问的是代理相关的，然后创建代理的三种方式"><a href="#第一题-问的是代理相关的，然后创建代理的三种方式" class="headerlink" title="第一题 问的是代理相关的，然后创建代理的三种方式"></a>第一题 问的是代理相关的，然后创建代理的三种方式</h3><p>一上来有点懵，这题答得不怎么样，自己平时也没注意这方面的知识，答了JDK代理和CGlib代理相关的东西，感觉是答偏了。<br>Java的反射机制是指在运行状态中，对于任意一个类都能知道这个类所有的属性和方法，并且对于任意一个对象，都能调用它的任意一个方法。<br>获取Class对象的3种方法</p><ol><li>调用某个对象的getClass()方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Person p=<span class="keyword">new</span> Person();</span><br><span class="line">Class clazz=p.getClass();</span><br></pre></td></tr></table></figure><ol><li>调用某个类的class属性来获取该类对应的class对象</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class clazz=Person<span class="class">.<span class="keyword">class</span></span>;</span><br></pre></td></tr></table></figure><ol><li>使用Class类种的forName()静态方法（最安全/性能最好）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class clazz=Class.forName(<span class="string">"类的全路径"</span>)</span><br></pre></td></tr></table></figure><h3 id="JAVA的IO模型"><a href="#JAVA的IO模型" class="headerlink" title="JAVA的IO模型"></a>JAVA的IO模型</h3><p>BIO:一个连接一个线程，客户端有连接请求时服务器端就要启动一个线程进行处理，线程开销大。<br>NIO:一个请求一个线程，但客户端发送的连接请求都会注册到多路复用器上，多路复用器轮询到连接有I/O请求时才启动一个线程进行处理。<br>AIO:一个有效请求一个线程，客户端的I/O请求都是由OS先完成了再通知服务器应用去启动线程进行处理。<br>BIO是面向流的，NIO是面向缓冲区的；BIO的各种流是阻塞的，而NIO是非阻塞的；BIO的Stream是单向的，而NIO的channel是双向的。<br>NIO的特点：事件驱动模型、单线程处理多任务、非阻塞I/O，I/O读写不再阻塞，而是返回0、基于block的传输比基于流的传输更高效、更高级的IO函数zero-copy、IO多路复用大大提高了Java网络应用的可伸缩性和实用性。基于Reactor线程模型。<br>在Reactor模式中，事件分发器等待某个事件或者可应用或个操作的状态发生，事件分发器就把这个事件传给事先注册的事件处理函数或者回调函数，由后者来做实际的读写操作。如在Reactor中实现读：注册读就绪事件和相应的事件处理器、事件分发器等待事件、事件到来，激活分发器，分发器调用事件对应的处理器、事件处理器完成实际的读操作，处理读到的数据，注册新的事件，然后返还控制权。</p><h3 id="介绍一下JAVA的锁"><a href="#介绍一下JAVA的锁" class="headerlink" title="介绍一下JAVA的锁"></a>介绍一下JAVA的锁</h3><p>乐观锁：在更新的时候会判断一下在此期间别人有没有去更新这个数据，采取在写时先读出当前版本号，然后加锁操作java中的乐观锁基本都是通过CAS操作实现的，CAS是一种更新的原子操作，比较当前值跟传入值是否一样，一样则更新，否则失败。<br>悲观锁：Synchronized<br>自旋锁：如果持有锁的线程能在很短时间内释放锁资源，那么那些等待竞争锁的线程就不需要做内核态和用户态之间的切换进入阻塞挂起状态，它们只需要等一等（自旋），等持有锁的线程释放锁后即可立即获取锁，这样就避免用户线程和内核的切换的消耗</p><h3 id="双亲委派机制"><a href="#双亲委派机制" class="headerlink" title="双亲委派机制"></a>双亲委派机制</h3><img src="/%E6%8B%9B%E9%93%B6%E7%BD%91%E7%BB%9C%E4%B8%80%E9%9D%A2%E9%9D%A2%E7%BB%8F/2020-06-28-13-55-35.png" class><p>启动类加载器：负责加载 JAVA_HOME\lib 目录中的，或通过-Xbootclasspath参数指定路径中的，且被虚拟机认可（按文件名识别，如rt.jar）的类。<br>扩展类加载器：负责加载 JAVA_HOME\lib\ext 目录中的，或通过java.ext.dirs系统变量指定路径中的类库。<br>应用程序类加载器：负责加载用户路径（classpath）上的类库。 JVM通过双亲委派模型进行类的加载，当然我们也可以通过继承java.lang.ClassLoader实现自定义的类加载器。</p><p>双亲委派：当一个类收到了类加载请求，他首先不会尝试自己去加载这个类，而是把这个请求委派给父类去完成，每一个层次类加载器都是如此，因此所有的加载请求都应该传送到启动类加载其中，只有当父类加载器反馈自己无法完成这个请求的时候（在它的加载路径下没有找到所需加载的Class），子类加载器才会尝试自己去加载。 采用双亲委派的一个好处是比如加载位于rt.jar包中的类java.lang.Object，不管是哪个加载器加载这个类，最终都是委托给顶层的启动类加载器进行加载，这样就保证了使用不同的类加载器最终得到的都是同样一个Object对象。<br><img src="/%E6%8B%9B%E9%93%B6%E7%BD%91%E7%BB%9C%E4%B8%80%E9%9D%A2%E9%9D%A2%E7%BB%8F/2020-06-28-13-57-49.png" class></p><h3 id="rabbitMQ相关问题"><a href="#rabbitMQ相关问题" class="headerlink" title="rabbitMQ相关问题"></a>rabbitMQ相关问题</h3><p>最后根据简历问了一个rabbitMQ的问题，面试官基本就是把问题抛给你，然后就是你自己在那里回答，然后他也没有深入的去抓着一些点去问。问了一个rabbit集群相关的，我说项目里mq没有用集群，然后就不问了。</p><h2 id="二面"><a href="#二面" class="headerlink" title="二面"></a>二面</h2><p>二面的通知又是在周五收到的，不知道是不是他们工作机制的问题，好喜欢在周末前发送通知。是不想让你过周末，让你好好去复习。由于感觉自己没有准备的那么充分，原本打算最近开始写一下论文的，结果计划可能就要被搁置了。二面的时间是可以选择的，可以在周一到周五时间段内任意选择一个时间段的，每天也有三个时间段，但是先到先得，和火车票抢票一样，如果这个时间段被选满了，就不能选了。所以接到通知后要立即去选一个自己想要选择的一个时间段。我选择了最后一天的早上，只是因为自己没有准备好，要花时间准备。在准备过程中恶补知识，补的脑袋都要炸掉了，尤其看一些源码，那真的是太难了。由于面试的时间是有跨度的，所以有些面试完的人会在牛客网上发面经，所以一定要去多看看，没准问到的题目是比较像的。比如手撕代码题，我就碰到了手写一个单例和快排算法，这些其实都在面经里面看到过。还有一个碰到的面试官也很重要，有些面试官比较友好，可能问的比较浅，有些问的比较深，有时候真的得看运气。看过面经普遍发现深圳和成都得难度大很多，都感觉不是一个级别，也不清楚大家是统一面试得还是分区域得。感觉二面还是心里挺紧张得，一面得时候都没有这种感觉，可能是自己准备得没有那么充分的忐忑不安吧，面试的前一个晚上感觉就是辗转难眠。我是面试自己跑回寝室了，不过设备之前一定要调试好，发现寝室里的光线还是比较暗的，辛亏室友有一个大灯泡，于是乎跑到室友的位置上准备面试了。不过我感觉笔记本自带的麦克风好像不太好用，收音效果比较差，可能是离得比较远的原因，也有可能是自己笔记本电脑太破旧的原因，所以要说话很大声才能听的比较清楚，所以打算这之后入手一个外接麦克了。视频面试用的平台是牛客网，发现现在好多公司用的都是牛客的平台。而自己平时刷题都是在力扣的平台上，所以该多刷刷牛客的题了。其实上9点钟开始的面试，我提前进房间了，可能待的时间长了，当面试官上线的时候没有感知到我在线，所以就打了个电话过来，刷新一下之后就进去了。之后就是常规的自我介绍。然后开始问项目，发现这个面试官还是主要根据项目来问，根据项目的一些知识点发起提问。技术上的点就问了get和post的区别，然后前后端交互的方式用Json，然后http的状态码，问了数据库的主从，问了redis用来干什么的，这些其实都是简历里写的项目。项目的知识完了之后就开始问一些简单的java基础，主要是JVM的知识，还有JVM调优，然后问了数据库的索引失效问题和数据库优化方面的。接着就是手撕代码了，就是一个单例模式和快排。</p><p>单例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton singleton;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Sigleton <span class="title">getSingleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(singleton==<span class="keyword">null</span>)&#123;</span><br><span class="line">      <span class="keyword">synchronized</span>(Singleton<span class="class">.<span class="keyword">class</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(singleton==<span class="keyword">null</span>)&#123;</span><br><span class="line">          singleton=<span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> singleton;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>快排</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] nums=<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">9</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> n=nums.length;</span><br><span class="line">    quickSort(<span class="number">0</span>,n,nums);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span> low,<span class="keyword">int</span> high,<span class="keyword">int</span>[] nums)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i=low;</span><br><span class="line">  <span class="keyword">int</span> j=high;</span><br><span class="line">  <span class="keyword">int</span> temp=nums[low];</span><br><span class="line">  <span class="keyword">while</span>(i!=j)&#123;</span><br><span class="line">    <span class="keyword">while</span>(j&lt;i&amp;&amp;nums[j]&gt;temp)&#123;</span><br><span class="line">      j--;</span><br><span class="line">    &#125;s</span><br><span class="line">    <span class="keyword">while</span>(i&lt;j&amp;&amp;nums[i]&lt;=temp&gt;)&#123;</span><br><span class="line">      i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(i&lt;j)&#123;</span><br><span class="line">      <span class="keyword">int</span> t=nums[i];</span><br><span class="line">      nums[i]=nums[j];</span><br><span class="line">      nums[j]=t;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  nums[low]=nums[j];</span><br><span class="line">  nums[j]=temp;</span><br><span class="line"><span class="keyword">return</span> j;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span> low,<span class="keyword">int</span> high,<span class="keyword">int</span>[] nums)</span></span>&#123;</span><br><span class="line">     <span class="keyword">if</span>(low&lt;high)&#123;</span><br><span class="line">       <span class="keyword">int</span> index=partition(low,high,nums);</span><br><span class="line">       partition(low,index-<span class="number">1</span>;nums);</span><br><span class="line">       partition(index+<span class="number">1</span>,high,nums);</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第一次的电话面试，开始的时候还是有点忐忑的，有一丝紧张感的，在端午节放假前接到了一面的邀请，然后，整个端午节假期就都在准备这个电话面试了。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="面试" scheme="https://linbei.top/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="面经" scheme="https://linbei.top/tags/%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>TCP拥塞控制机制</title>
    <link href="https://linbei.top/TCP%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6%E6%9C%BA%E5%88%B6/"/>
    <id>https://linbei.top/TCP%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6%E6%9C%BA%E5%88%B6/</id>
    <published>2020-06-23T13:51:57.000Z</published>
    <updated>2020-06-23T12:06:39.066Z</updated>
    
    <content type="html"><![CDATA[<h2 id="产生的原因"><a href="#产生的原因" class="headerlink" title="产生的原因"></a>产生的原因</h2><p>∑对资源的需求&gt;可用资源<br><a id="more"></a></p><blockquote><p>注意<br>单纯的增加网络资源无法解决问题<br>例如：把结点的存储空间扩大，更换更高速率的链路，提高结点处理机的运算速度，不仅不能解决问题，而且可能使网络性能更坏。<br>原因：网络拥塞是许多因素引起的，单纯的解决一个可能会使上述情况得到一些缓解，但是会把拥塞转移到其他地方。<br>扩大结点存储空间——&gt;由于输出链路的容量和处理机的速度并未提高，增大排队等待时间，超时重传，浪费资源。<br>更换更高速率的链路——&gt;可能会缓解，，有可能造成各部分不匹配。</p></blockquote><h2 id="拥塞控制的作用"><a href="#拥塞控制的作用" class="headerlink" title="拥塞控制的作用"></a>拥塞控制的作用</h2><img src="/TCP%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6%E6%9C%BA%E5%88%B6/2020-06-23-19-29-01.png" class><blockquote><p>注意<br>拥塞控制与流量控制的区别<br>拥塞控制是防止过多的数据注入到网络中，可以使网络中的路由器或链路不致过载，是一个全局性的过程。<br>流量控制是点对点通信量的控制，是一个端到端的问题，主要就是抑制发送端发送数据的速率，以便接收端来得及接收.</p></blockquote><h2 id="拥塞的标志"><a href="#拥塞的标志" class="headerlink" title="拥塞的标志"></a>拥塞的标志</h2><ol><li>重传计时器超时</li><li>接收到三个重复确认</li></ol><h2 id="拥塞控制的机制"><a href="#拥塞控制的机制" class="headerlink" title="拥塞控制的机制"></a>拥塞控制的机制</h2><img src="/TCP%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6%E6%9C%BA%E5%88%B6/2020-06-23-19-30-53.png" class><img src="/TCP%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6%E6%9C%BA%E5%88%B6/2020-06-23-19-31-02.png" class><h2 id="慢开始与拥塞避免"><a href="#慢开始与拥塞避免" class="headerlink" title="慢开始与拥塞避免"></a>慢开始与拥塞避免</h2><h3 id="慢开始"><a href="#慢开始" class="headerlink" title="慢开始"></a>慢开始</h3><ol><li>慢开始不是指cwnd的增长速度慢（指数增长），而是指TCP开始发送设置cwnd=1。</li><li><p>思路：不要一开始就发送大量的数据，先探测一下网络的拥塞程度，也就是说由小到大逐渐增加拥塞窗口的大小。这里用报文段的个数的拥塞窗口大小举例说明慢开始算法，实时拥塞窗口大小是以字节为单位的。如下图：</p><img src="/TCP%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6%E6%9C%BA%E5%88%B6/2020-06-23-19-31-53.png" class></li><li><p>为了防止cwnd增长过大引起网络拥塞，设置一个慢开始门限（ssthresh状态变量）<br>当cnwd＜ssthresh，使用慢开始算法<br>当cnwd=ssthresh，既可使用慢开始算法，也可以使用拥塞避免算法<br>当cnwd＞ssthresh，使用拥塞避免算法</p></li></ol><h3 id="拥塞避免（按线性规律增长）"><a href="#拥塞避免（按线性规律增长）" class="headerlink" title="拥塞避免（按线性规律增长）"></a>拥塞避免（按线性规律增长）</h3><ol><li>拥塞避免并非完全能够避免拥塞，是说在拥塞避免阶段将拥塞窗口控制为按线性规律增长，使网络比较不容易出现拥塞。</li><li>思路：让拥塞窗口cwnd缓慢地增大，即每经过一个往返时间RTT就把发送方的拥塞控制窗口加一。</li></ol><p>无论是在慢开始阶段还是在拥塞避免阶段，只要发送方判断网络出现拥塞（其根据就是没有收到确认，虽然没有收到确认可能是其他原因的分组丢失，但是因为无法判定，所以都当做拥塞来处理），就把慢开始门限设置为出现拥塞时的发送窗口大小的一半。然后把拥塞窗口设置为1，执行慢开始算法。<br><img src="/TCP%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6%E6%9C%BA%E5%88%B6/2020-06-23-19-32-53.png" class></p><blockquote><p>加法增大与乘法减小<br>乘法减小：无论是慢开始阶段还是拥塞避免，只要出现了网络拥塞（超时），就把慢开始门限值ssthresh减半<br>加法增大：执行拥塞避免算法后，拥塞窗口线性缓慢增大，防止网络过早出现拥塞</p></blockquote><h3 id="快重传与快恢复"><a href="#快重传与快恢复" class="headerlink" title="快重传与快恢复"></a>快重传与快恢复</h3><img src="/TCP%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6%E6%9C%BA%E5%88%B6/2020-06-23-19-34-09.png" class><h3 id="快重传"><a href="#快重传" class="headerlink" title="快重传"></a>快重传</h3><ol><li>快重传要求接收方在收到一个失序的报文段后就立即发出重复确认（为的是使发送方及早知道有报文段没有到达对方）而不要等到自己发送数据时捎带确认。快重传算法规定，发送方只要一连收到三个重复确认就应当立即重传对方尚未收到的报文段，而不必继续等待设置的重传计时器时间到期。<img src="/TCP%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6%E6%9C%BA%E5%88%B6/2020-06-23-19-34-48.png" class></li><li>由于不需要等待设置的重传计时器到期，能尽早重传未被确认的报文段，能提高整个网络的吞吐量。</li></ol><h3 id="快恢复（与快重传配合使用）"><a href="#快恢复（与快重传配合使用）" class="headerlink" title="快恢复（与快重传配合使用）"></a>快恢复（与快重传配合使用）</h3><ol><li>采用快恢复算法时，慢开始只在TCP连接建立时和网络出现超时时才使用。</li><li>当发送方连续收到三个重复确认时，就执行“乘法减小”算法，把ssthresh门限减半。但是接下去并不执行慢开始算法。</li><li>考虑到如果网络出现拥塞的话就不会收到好几个重复的确认，所以发送方现在认为网络可能没有出现拥塞。所以此时不执行慢开始算法，而是将cwnd设置为ssthresh的大小，然后执行拥塞避免算法。</li></ol><blockquote><p>注意<br>发送方窗口的上限值=Min（接受窗口rwnd，拥塞窗口cwnd）<br>rwnd＞cwnd 接收方的接收能力限制发送方窗口的最大值<br>rwnd＜cwnd 网络的拥塞限制发送方窗口的最大值</p></blockquote><h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><p>腾讯面试题<br>TCP的拥塞控制机制是什么？请简单说说。<br>答：我们知道TCP通过一个定时器（timer）采样了RTT并计算RTO，但是，如果网络上的延时突然增加，那么，TCP对这个事做出的应对只有重传数据，然而重传会导致网络的负担更重，于是会导致更大的延迟以及更多的丢包，这就导致了恶性循环，最终形成“网络风暴” —— TCP的拥塞控制机制就是用于应对这种情况。<br>首先需要了解一个概念，为了在发送端调节所要发送的数据量，定义了一个“拥塞窗口”（Congestion Window），在发送数据时，将拥塞窗口的大小与接收端ack的窗口大小做比较，取较小者作为发送数据量的上限。<br>拥塞控制主要是四个算法：</p><ol><li>慢启动：意思是刚刚加入网络的连接，一点一点地提速，不要一上来就把路占满。<br>连接建好的开始先初始化cwnd = 1，表明可以传一个MSS大小的数据。<br>每当收到一个ACK，cwnd++; 呈线性上升<br>每当过了一个RTT，cwnd = cwnd*2; 呈指数让升<br>阈值ssthresh（slow start threshold），是一个上限，当cwnd &gt;= ssthresh时，就会进入“拥塞避免算法”</li><li>拥塞避免：当拥塞窗口 cwnd 达到一个阈值时，窗口大小不再呈指数上升，而是以线性上升，避免增长过快导致网络拥塞。<br>每当收到一个ACK，cwnd = cwnd + 1/cwnd<br>每当过了一个RTT，cwnd = cwnd + 1<br>拥塞发生：当发生丢包进行数据包重传时，表示网络已经拥塞。分两种情况进行处理：<br>等到RTO超时，重传数据包<br>sshthresh = cwnd /2<br>cwnd 重置为 1</li><li>进入慢启动过程<br>在收到3个duplicate ACK时就开启重传，而不用等到RTO超时<br>sshthresh = cwnd = cwnd /2<br>进入快速恢复算法——Fast Recovery</li><li>快速恢复：至少收到了3个Duplicated Acks，说明网络也不那么糟糕，可以快速恢复。<br>cwnd = sshthresh + 3 * MSS （3的意思是确认有3个数据包被收到了）<br>重传Duplicated ACKs指定的数据包<br>如果再收到 duplicated Acks，那么cwnd = cwnd +1<br>如果收到了新的Ack，那么，cwnd = sshthresh ，然后就进入了拥塞避免的算法了。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;产生的原因&quot;&gt;&lt;a href=&quot;#产生的原因&quot; class=&quot;headerlink&quot; title=&quot;产生的原因&quot;&gt;&lt;/a&gt;产生的原因&lt;/h2&gt;&lt;p&gt;∑对资源的需求&amp;gt;可用资源&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="面试" scheme="https://linbei.top/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="计算机网络" scheme="https://linbei.top/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>JestClient操作ES</title>
    <link href="https://linbei.top/JestClient%E6%93%8D%E4%BD%9CElasticSearch/"/>
    <id>https://linbei.top/JestClient%E6%93%8D%E4%BD%9CElasticSearch/</id>
    <published>2020-05-31T13:51:57.000Z</published>
    <updated>2020-05-31T13:03:36.715Z</updated>
    
    <content type="html"><![CDATA[<p>使用JestClient操作ElasticSearch，具体代码如下<br><a id="more"></a><br>InitElasticSearchConfig.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mdl.monitor.init;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.gson.GsonBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.searchbox.client.JestClient;</span><br><span class="line"><span class="keyword">import</span> io.searchbox.client.JestClientFactory;</span><br><span class="line"><span class="keyword">import</span> io.searchbox.client.config.HttpClientConfig;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 初始化es</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InitElasticSearchConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> JestClient client ;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JestClient <span class="title">getClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> client;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InitElasticSearchConfig</span><span class="params">(String esUrl)</span></span>&#123;</span><br><span class="line">        client = getClientConfig(esUrl) ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JestClient <span class="title">getClientConfig</span><span class="params">(String esUrl)</span></span>&#123;</span><br><span class="line">        JestClientFactory factory = <span class="keyword">new</span> JestClientFactory();</span><br><span class="line">        factory.setHttpClientConfig(<span class="keyword">new</span> HttpClientConfig</span><br><span class="line">                .Builder(esUrl)</span><br><span class="line">                .gson(<span class="keyword">new</span> GsonBuilder().setDateFormat(<span class="string">"yyyy-MM-dd'T'HH:mm:ss"</span>).create())</span><br><span class="line">                .multiThreaded(<span class="keyword">true</span>)</span><br><span class="line">                .readTimeout(<span class="number">10000</span>)</span><br><span class="line">                .build());</span><br><span class="line">        JestClient client = factory.getObject();</span><br><span class="line">        <span class="keyword">return</span> client ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ElasticSearchDao.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mdl.monitor.repositorys.elasticsearch;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.gson.JsonObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.searchbox.client.JestResult;</span><br><span class="line"><span class="keyword">import</span> io.searchbox.core.SearchResult.Hit;</span><br><span class="line"><span class="keyword">import</span> io.searchbox.core.SuggestResult;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ES操作 抽象方法 基本包含所有基本操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ElasticSearchDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type ：当前删除document名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JestResult <span class="title">deleteIndex</span><span class="params">(String type)</span> </span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//清除缓存</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JestResult <span class="title">clearCache</span><span class="params">()</span> </span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关闭索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type ：文档表示的对象类别</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JestResult <span class="title">closeIndex</span><span class="params">(String type)</span> </span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//优化索引</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JestResult <span class="title">optimizeIndex</span><span class="params">()</span> </span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//刷新索引</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JestResult <span class="title">flushIndex</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断索引是否存在</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JestResult <span class="title">indicesExists</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查看节点信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JestResult <span class="title">nodesInfo</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查看集群健康信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JestResult <span class="title">health</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//节点状态</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JestResult <span class="title">nodesStats</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新Document</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index ：文档在哪存放</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type ： 文档表示的对象类别</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id ：文档唯一标识</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JestResult <span class="title">updateDocument</span><span class="params">(String script , String index,String type,String id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除Document</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index ：文档在哪存放</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type ： 文档表示的对象类别</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id ：文档唯一标识</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JestResult <span class="title">deleteDocument</span><span class="params">(String index,String type,String id)</span> </span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据条件删除</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> params</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JestResult <span class="title">deleteDocumentByQuery</span><span class="params">(String index, String type, String params)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取Document</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> o ：返回对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index ：文档在哪存放</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type ： 文档表示的对象类别</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id ：文档唯一标识</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">JestResult <span class="title">getDocument</span><span class="params">(T o , String index , String type , String id)</span> </span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Suggestion</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;SuggestResult.Suggestion&gt; suggest() ;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询全部</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index ：文档在哪存放</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; List&lt;Hit&lt;T,Void&gt;&gt; searchAll(String index , T o);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 搜索</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> keyWord ：搜索关键字</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; List&lt;Hit&lt;T,Void&gt;&gt; createSearch(String keyWord , String type , T o , String... fields) ;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//bulkIndex操作</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">bulkIndex</span><span class="params">(String index , String type , T o)</span> </span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> o ：返回对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index ：文档在哪存放</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type ： 文档表示的对象类别</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">JestResult <span class="title">createIndex</span><span class="params">(T o , String index , String type)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 搜索事件流图表数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> param</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JsonObject <span class="title">searchEvent</span><span class="params">(String param)</span></span>; </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ElasticSearchDaoImpl.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mdl.monitor.repositorys.elasticsearch.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.logging.Log;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.logging.LogFactory;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.index.query.QueryBuilders;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.builder.SearchSourceBuilder;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.fetch.subphase.highlight.HighlightBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mdl.monitor.init.InitElasticSearchConfig;</span><br><span class="line"><span class="keyword">import</span> com.mdl.monitor.repositorys.elasticsearch.ElasticSearchDao;</span><br><span class="line"><span class="keyword">import</span> com.google.gson.JsonObject;</span><br><span class="line"><span class="keyword">import</span> com.google.gson.JsonParser;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.searchbox.client.JestResult;</span><br><span class="line"><span class="keyword">import</span> io.searchbox.cluster.Health;</span><br><span class="line"><span class="keyword">import</span> io.searchbox.cluster.NodesInfo;</span><br><span class="line"><span class="keyword">import</span> io.searchbox.cluster.NodesStats;</span><br><span class="line"><span class="keyword">import</span> io.searchbox.core.Bulk;</span><br><span class="line"><span class="keyword">import</span> io.searchbox.core.Delete;</span><br><span class="line"><span class="keyword">import</span> io.searchbox.core.Get;</span><br><span class="line"><span class="keyword">import</span> io.searchbox.core.Index;</span><br><span class="line"><span class="keyword">import</span> io.searchbox.core.Search;</span><br><span class="line"><span class="keyword">import</span> io.searchbox.core.SearchResult;</span><br><span class="line"><span class="keyword">import</span> io.searchbox.core.SearchResult.Hit;</span><br><span class="line"><span class="keyword">import</span> io.searchbox.core.Suggest;</span><br><span class="line"><span class="keyword">import</span> io.searchbox.core.SuggestResult;</span><br><span class="line"><span class="keyword">import</span> io.searchbox.core.SuggestResult.Suggestion;</span><br><span class="line"><span class="keyword">import</span> io.searchbox.core.Update;</span><br><span class="line"><span class="keyword">import</span> io.searchbox.indices.ClearCache;</span><br><span class="line"><span class="keyword">import</span> io.searchbox.indices.CloseIndex;</span><br><span class="line"><span class="keyword">import</span> io.searchbox.indices.DeleteIndex;</span><br><span class="line"><span class="keyword">import</span> io.searchbox.indices.Flush;</span><br><span class="line"><span class="keyword">import</span> io.searchbox.indices.IndicesExists;</span><br><span class="line"><span class="keyword">import</span> io.searchbox.indices.Optimize;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * es操作实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ElasticSearchDaoImpl</span> <span class="keyword">implements</span> <span class="title">ElasticSearchDao</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">protected</span> <span class="keyword">final</span> Log log = LogFactory.getLog(ElasticSearchDaoImpl<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>())</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> InitElasticSearchConfig esConfig ;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JestResult <span class="title">deleteIndex</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">        DeleteIndex deleteIndex = <span class="keyword">new</span> DeleteIndex.Builder(type).build();</span><br><span class="line">        JestResult result = <span class="keyword">null</span> ;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result = esConfig.getClient().execute(deleteIndex);</span><br><span class="line">            log.info(<span class="string">"deleteIndex == "</span> + result.getJsonString());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JestResult <span class="title">clearCache</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ClearCache closeIndex = <span class="keyword">new</span> ClearCache.Builder().build();</span><br><span class="line">        JestResult result = <span class="keyword">null</span> ;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result = esConfig.getClient().execute(closeIndex);</span><br><span class="line">            log.info(<span class="string">"clearCache == "</span> + result.getJsonString());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JestResult <span class="title">closeIndex</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">        CloseIndex closeIndex = <span class="keyword">new</span> CloseIndex.Builder(type).build(); </span><br><span class="line">        JestResult result = <span class="keyword">null</span> ;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result = esConfig.getClient().execute(closeIndex);</span><br><span class="line">            log.info(<span class="string">"closeIndex == "</span> + result.getJsonString());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JestResult <span class="title">optimizeIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Optimize optimize = <span class="keyword">new</span> Optimize.Builder().build(); </span><br><span class="line">        JestResult result = <span class="keyword">null</span> ;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result = esConfig.getClient().execute(optimize);</span><br><span class="line">            log.info(<span class="string">"optimizeIndex == "</span> + result.getJsonString());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JestResult <span class="title">flushIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Flush flush = <span class="keyword">new</span> Flush.Builder().build(); </span><br><span class="line">        JestResult result = <span class="keyword">null</span> ;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result = esConfig.getClient().execute(flush);</span><br><span class="line">            log.info(<span class="string">"flushIndex == "</span> + result.getJsonString());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JestResult <span class="title">indicesExists</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        IndicesExists indicesExists = <span class="keyword">new</span> IndicesExists.Builder(<span class="string">"article"</span>).build();</span><br><span class="line">        JestResult result = <span class="keyword">null</span> ;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result = esConfig.getClient().execute(indicesExists);</span><br><span class="line">            log.info(<span class="string">"indicesExists == "</span> + result.getJsonString());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JestResult <span class="title">nodesInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        NodesInfo nodesInfo = <span class="keyword">new</span> NodesInfo.Builder().build();</span><br><span class="line">        JestResult result = <span class="keyword">null</span> ;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result = esConfig.getClient().execute(nodesInfo);</span><br><span class="line">            log.info(<span class="string">"nodesInfo == "</span> + result.getJsonString());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JestResult <span class="title">health</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Health health = <span class="keyword">new</span> Health.Builder().build();</span><br><span class="line">        JestResult result = <span class="keyword">null</span> ;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result = esConfig.getClient().execute(health);</span><br><span class="line">            log.info(<span class="string">"health == "</span> + result.getJsonString());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JestResult <span class="title">nodesStats</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        NodesStats nodesStats = <span class="keyword">new</span> NodesStats.Builder().build();</span><br><span class="line">        JestResult result = <span class="keyword">null</span> ;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result = esConfig.getClient().execute(nodesStats);</span><br><span class="line">            log.info(<span class="string">"nodesStats == "</span> + result.getJsonString());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JestResult <span class="title">updateDocument</span><span class="params">(String script , String index, String type, String id)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*String script = "&#123;" +</span></span><br><span class="line"><span class="comment">                "    \"doc\" : &#123;" +</span></span><br><span class="line"><span class="comment">                "        \"title\" : \""+article.getTitle()+"\"," +</span></span><br><span class="line"><span class="comment">                "        \"content\" : \""+article.getContent()+"\"," +</span></span><br><span class="line"><span class="comment">                "        \"author\" : \""+article.getAuthor()+"\"," +</span></span><br><span class="line"><span class="comment">                "        \"source\" : \""+article.getSource()+"\"," +</span></span><br><span class="line"><span class="comment">                "        \"url\" : \""+article.getUrl()+"\"," +</span></span><br><span class="line"><span class="comment">                "        \"pubdate\" : \""+new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(article.getPubdate())+"\"" +</span></span><br><span class="line"><span class="comment">                "    &#125;" +</span></span><br><span class="line"><span class="comment">                "&#125;";*/</span></span><br><span class="line">        Update update = <span class="keyword">new</span> Update.Builder(script).index(index).type(type).id(id).build();</span><br><span class="line">        JestResult result = <span class="keyword">null</span> ;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result = esConfig.getClient().execute(update);</span><br><span class="line">            log.info(<span class="string">"updateDocument == "</span> + result.getJsonString());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JestResult <span class="title">deleteDocument</span><span class="params">(String index, String type, String id)</span> </span>&#123;</span><br><span class="line">        Delete delete = <span class="keyword">new</span> Delete.Builder(id).index(index).type(type).build();</span><br><span class="line">        JestResult result = <span class="keyword">null</span> ;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result = esConfig.getClient().execute(delete);</span><br><span class="line">            log.info(<span class="string">"deleteDocument == "</span> + result.getJsonString());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JestResult <span class="title">deleteDocumentByQuery</span><span class="params">(String index, String type, String params)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        DeleteByQuery db = <span class="keyword">new</span> DeleteByQuery.Builder(params)</span><br><span class="line">                .addIndex(index)</span><br><span class="line">                .addType(type)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        JestResult result = <span class="keyword">null</span> ;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result = esConfig.getClient().execute(db);</span><br><span class="line">            log.info(<span class="string">"deleteDocument == "</span> + result.getJsonString());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">JestResult <span class="title">getDocument</span><span class="params">(T object , String index, String type, String id)</span> </span>&#123;</span><br><span class="line">        Get get = <span class="keyword">new</span> Get.Builder(index, id).type(type).build();</span><br><span class="line">        JestResult result = <span class="keyword">null</span> ;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result = esConfig.getClient().execute(get);     </span><br><span class="line">            T o = (T) result.getSourceAsObject(object.getClass());</span><br><span class="line">            <span class="keyword">for</span> (Method method : o.getClass().getMethods()) &#123;</span><br><span class="line">                log.info(<span class="string">"getDocument == "</span> + method.getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Suggestion&gt; <span class="title">suggest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String suggestionName = <span class="string">"my-suggestion"</span>;</span><br><span class="line">        Suggest suggest = <span class="keyword">new</span> Suggest.Builder(<span class="string">"&#123;"</span> +</span><br><span class="line">                <span class="string">"  \""</span> + suggestionName + <span class="string">"\" : &#123;"</span> +</span><br><span class="line">                <span class="string">"    \"text\" : \"the amsterdma meetpu\","</span> +</span><br><span class="line">                <span class="string">"    \"term\" : &#123;"</span> +</span><br><span class="line">                <span class="string">"      \"field\" : \"body\""</span> +</span><br><span class="line">                <span class="string">"    &#125;"</span> +</span><br><span class="line">                <span class="string">"  &#125;"</span> +</span><br><span class="line">                <span class="string">"&#125;"</span>).build();</span><br><span class="line">        SuggestResult suggestResult = <span class="keyword">null</span> ;</span><br><span class="line">        List&lt;SuggestResult.Suggestion&gt; suggestionList = <span class="keyword">null</span> ;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            suggestResult = esConfig.getClient().execute(suggest);</span><br><span class="line">            log.info(<span class="string">"suggestResult.isSucceeded() == "</span> + suggestResult.isSucceeded());</span><br><span class="line">            suggestionList = suggestResult.getSuggestions(suggestionName);</span><br><span class="line">            log.info(<span class="string">"suggestionList.size() == "</span> + suggestionList.size());</span><br><span class="line">            <span class="keyword">for</span>(SuggestResult.Suggestion suggestion:suggestionList)&#123;</span><br><span class="line">                System.out.println(suggestion.text);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> suggestionList ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; List&lt;Hit&lt;T, Void&gt;&gt; searchAll(String index , T o) &#123;</span><br><span class="line">        SearchSourceBuilder searchSourceBuilder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">        searchSourceBuilder.query(QueryBuilders.matchAllQuery());</span><br><span class="line">        Search search = <span class="keyword">new</span> Search.Builder(searchSourceBuilder.toString())</span><br><span class="line">                .addIndex(index)</span><br><span class="line">                .build();</span><br><span class="line">        SearchResult result = <span class="keyword">null</span> ;</span><br><span class="line">        List&lt;?&gt; hits = <span class="keyword">null</span> ;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result = esConfig.getClient().execute(search);</span><br><span class="line">            System.out.println(<span class="string">"本次查询共查到："</span>+result.getTotal()+<span class="string">"个关键字！"</span>);</span><br><span class="line">            log.info(<span class="string">"本次查询共查到："</span>+result.getTotal()+<span class="string">"个关键字！"</span>);</span><br><span class="line">            hits = result.getHits(o.getClass());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (List&lt;Hit&lt;T, Void&gt;&gt;) hits ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; List&lt;Hit&lt;T, Void&gt;&gt; createSearch(String keyWord , String type , T o , String... fields) &#123;</span><br><span class="line">        SearchSourceBuilder searchSourceBuilder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">        searchSourceBuilder.query(QueryBuilders.queryStringQuery(keyWord));</span><br><span class="line">        HighlightBuilder highlightBuilder = <span class="keyword">new</span> HighlightBuilder();</span><br><span class="line">        <span class="keyword">for</span>(String field : fields)&#123;</span><br><span class="line">            highlightBuilder.field(field);<span class="comment">//高亮field</span></span><br><span class="line">        &#125;</span><br><span class="line">        highlightBuilder.preTags(<span class="string">"&lt;em&gt;"</span>).postTags(<span class="string">"&lt;/em&gt;"</span>);<span class="comment">//高亮标签</span></span><br><span class="line">        highlightBuilder.fragmentSize(<span class="number">200</span>);<span class="comment">//高亮内容长度</span></span><br><span class="line">        searchSourceBuilder.highlighter(highlightBuilder);</span><br><span class="line">        Search search = <span class="keyword">new</span> Search.Builder(searchSourceBuilder.toString()).addIndex(type).build();</span><br><span class="line">        SearchResult result = <span class="keyword">null</span> ;</span><br><span class="line">        List&lt;?&gt; hits = <span class="keyword">null</span> ;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result = esConfig.getClient().execute(search);</span><br><span class="line">            System.out.println(<span class="string">"本次查询共查到："</span>+result.getTotal()+<span class="string">"个结果！"</span>);</span><br><span class="line"></span><br><span class="line">            hits = result.getHits(o.getClass());</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (List&lt;Hit&lt;T, Void&gt;&gt;) hits ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">bulkIndex</span><span class="params">(String index, String type , T o)</span> </span>&#123;</span><br><span class="line">        Bulk bulk = <span class="keyword">new</span> Bulk.Builder()</span><br><span class="line">                .defaultIndex(index)</span><br><span class="line">                .defaultType(type)</span><br><span class="line">                .addAction(Arrays.asList(</span><br><span class="line">                        <span class="keyword">new</span> Index.Builder(o).build()</span><br><span class="line">                )).build(); </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            esConfig.getClient().execute(bulk);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">JestResult <span class="title">createIndex</span><span class="params">(T o, String index, String type)</span> </span>&#123;</span><br><span class="line">        Index index1 = <span class="keyword">new</span> Index.Builder(o).index(index).type(type).build();</span><br><span class="line">        JestResult jestResult = <span class="keyword">null</span> ;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            jestResult = esConfig.getClient().execute(index1);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> jestResult;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JsonObject <span class="title">searchEvent</span><span class="params">(String param)</span> </span>&#123;</span><br><span class="line">        JsonObject returnData = <span class="keyword">new</span> JsonParser().parse(param).getAsJsonObject();</span><br><span class="line">        Search search = <span class="keyword">new</span> Search.Builder(returnData.toString()).addType(<span class="string">"event"</span>).addIndex(<span class="string">"pi"</span>).build();</span><br><span class="line"></span><br><span class="line"><span class="comment">//      Gson gs = new Gson();</span></span><br><span class="line"><span class="comment">//      System.out.println("输入参数为：" + "\n" + gs.toJson(search));</span></span><br><span class="line"></span><br><span class="line">        SearchResult result = <span class="keyword">null</span> ;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result = esConfig.getClient().execute(search);</span><br><span class="line"><span class="comment">//          System.out.println("\n" + gs.toJson(result.getJsonObject()) + "\n" );</span></span><br><span class="line"><span class="comment">//          System.out.println("本次查询共查到：" + "\n" +result.getTotal()+"个结果！");</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result.getJsonObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>project_servlet.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- es连接配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"esConfig"</span> <span class="attr">class</span>=<span class="string">"com.mdl.monitor.init.InitElasticSearchConfig"</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span>  <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">value</span>=<span class="string">"$&#123;elasticUrl&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>scroll分页</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JsonObject <span class="title">searchEventHistogramByScroll</span><span class="params">(String scrollId)</span> </span>&#123;</span><br><span class="line">        SearchScroll scroll = <span class="keyword">new</span> SearchScroll.Builder(scrollId, <span class="string">"1m"</span>).build();</span><br><span class="line">        JestResult result = <span class="keyword">null</span> ;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result = esConfig.getClient().execute(scroll);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result.getJsonObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JsonObject <span class="title">searchInitEventHistogram</span><span class="params">(String param)</span> </span>&#123;</span><br><span class="line">        JsonObject returnData = <span class="keyword">new</span> JsonParser().parse(param).getAsJsonObject();</span><br><span class="line">        Search search = <span class="keyword">new</span> Search.Builder(returnData.toString())</span><br><span class="line">                    .addIndex(<span class="string">"pi"</span>)</span><br><span class="line">                    .addType(<span class="string">"event"</span>)</span><br><span class="line">                    .setParameter(Parameters.SCROLL, <span class="string">"1m"</span>)</span><br><span class="line">                    .build();</span><br><span class="line"></span><br><span class="line">        JestResult result = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result = esConfig.getClient().execute(search);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result.getJsonObject();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用JestClient操作ElasticSearch，具体代码如下&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://linbei.top/categories/Java/"/>
    
    
      <category term="Java" scheme="https://linbei.top/tags/Java/"/>
    
      <category term="ElasticSearch" scheme="https://linbei.top/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>Hexo添加公式</title>
    <link href="https://linbei.top/Hexoyilia%E4%B8%BB%E9%A2%98%E4%B8%8B%E6%B7%BB%E5%8A%A0%E5%85%AC%E5%BC%8F/"/>
    <id>https://linbei.top/Hexoyilia%E4%B8%BB%E9%A2%98%E4%B8%8B%E6%B7%BB%E5%8A%A0%E5%85%AC%E5%BC%8F/</id>
    <published>2020-05-29T13:51:57.000Z</published>
    <updated>2020-05-29T12:44:25.376Z</updated>
    
    <content type="html"><![CDATA[<p>使用LaTex添加公式到Hexo博客里</p><a id="more"></a><h2 id="安装Kramed"><a href="#安装Kramed" class="headerlink" title="安装Kramed"></a>安装Kramed</h2><p>hexo 默认的渲染引擎是 marked，但是 marked 不支持 mathjax。，所以需要更换Hexo的markdown渲染引擎为hexo-renderer-kramed引擎，后者支持mathjax公式输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall hexo-renderer-marked --save</span><br><span class="line">npm install hexo-renderer-kramed --save</span><br></pre></td></tr></table></figure><img src="/Hexoyilia%E4%B8%BB%E9%A2%98%E4%B8%8B%E6%B7%BB%E5%8A%A0%E5%85%AC%E5%BC%8F/2020-05-29-20-23-55.png" class><h2 id="第二步：更改文件配置"><a href="#第二步：更改文件配置" class="headerlink" title="第二步：更改文件配置"></a>第二步：更改文件配置</h2><p>打开/node_modules/hexo-renderer-kramed/lib/renderer.js，更改：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Change inline math rule</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">formatText</span>(<span class="params">text</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Fit kramed's rule: $$ + \1 + $$</span></span><br><span class="line">    <span class="keyword">return</span> text.replace(<span class="regexp">/`\$(.*?)\$`/g</span>, <span class="string">'$$$$$1$$$$'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">为，直接返回text</span><br><span class="line"></span><br><span class="line"><span class="comment">// Change inline math rule</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">formatText</span>(<span class="params">text</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> text;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/Hexoyilia%E4%B8%BB%E9%A2%98%E4%B8%8B%E6%B7%BB%E5%8A%A0%E5%85%AC%E5%BC%8F/2020-05-29-20-26-59.png" class><h2 id="第三步-停止使用-hexo-math，并安装mathjax包"><a href="#第三步-停止使用-hexo-math，并安装mathjax包" class="headerlink" title="第三步: 停止使用 hexo-math，并安装mathjax包"></a>第三步: 停止使用 hexo-math，并安装mathjax包</h2><p>卸载hexo-math</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall hexo-math --save</span><br></pre></td></tr></table></figure><p>安装 hexo-renderer-mathjax 包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-mathjax --save</span><br></pre></td></tr></table></figure><img src="/Hexoyilia%E4%B8%BB%E9%A2%98%E4%B8%8B%E6%B7%BB%E5%8A%A0%E5%85%AC%E5%BC%8F/2020-05-29-20-27-57.png" class><img src="/Hexoyilia%E4%B8%BB%E9%A2%98%E4%B8%8B%E6%B7%BB%E5%8A%A0%E5%85%AC%E5%BC%8F/2020-05-29-20-28-03.png" class><h2 id="第四步-更新-Mathjax-的-配置文件"><a href="#第四步-更新-Mathjax-的-配置文件" class="headerlink" title="第四步: 更新 Mathjax 的 配置文件"></a>第四步: 更新 Mathjax 的 配置文件</h2><p>打开/node_modules/hexo-renderer-mathjax/mathjax.html<br>注释掉script代码，并把以下代码复制到对应位置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-MML-AM_CHTML"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><img src="/Hexoyilia%E4%B8%BB%E9%A2%98%E4%B8%8B%E6%B7%BB%E5%8A%A0%E5%85%AC%E5%BC%8F/2020-05-29-20-31-08.png" class><h2 id="第五步-更改默认转义规则"><a href="#第五步-更改默认转义规则" class="headerlink" title="第五步: 更改默认转义规则"></a>第五步: 更改默认转义规则</h2><p>因为LaTeX与markdown语法有语义冲突，所以 hexo 默认的转义规则会将一些字符进行转义，所以我们需要对默认的规则进行修改.<br>打开/node_modules\kramed\lib\rules\inline.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">escape</span>: <span class="regexp">/^\\([\\`*&#123;&#125;\[\]()#$+\-.!_&gt;])/</span>,</span><br></pre></td></tr></table></figure><p>更改为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">escape</span>: <span class="regexp">/^\\([`*\[\]()# +\-.!_&gt;])/</span>,</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">em: <span class="regexp">/^\b_((?:__|[\s\S])+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/</span>,</span><br></pre></td></tr></table></figure><p>更改为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">em: <span class="regexp">/^\*((?:\*\*|[\s\S])+?)\*(?!\*)/</span>,</span><br></pre></td></tr></table></figure><img src="/Hexoyilia%E4%B8%BB%E9%A2%98%E4%B8%8B%E6%B7%BB%E5%8A%A0%E5%85%AC%E5%BC%8F/2020-05-29-20-32-27.png" class><h2 id="第六步-开启mathjax"><a href="#第六步-开启mathjax" class="headerlink" title="第六步: 开启mathjax"></a>第六步: 开启mathjax</h2><p>打开/themes/yilia主题目录下的config.yml文件<br>因为我用的yilia主题，所以路径是/themes/yilia</p><p>我们需要在config.yml文件 中开启 Mathjax， 找到 mathjax 字段添加如下代码：(不同的主题配置方法略微有区别)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mathjax: true</span><br></pre></td></tr></table></figure><img src="/Hexoyilia%E4%B8%BB%E9%A2%98%E4%B8%8B%E6%B7%BB%E5%8A%A0%E5%85%AC%E5%BC%8F/2020-05-29-20-33-09.png" class><p>需要注意的是：，无论是配置文件还是博客文件，配置项跟配置参数均有有一个空格，否则会配置失败</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mathjax: true（mathjax:空格true）</span><br><span class="line">而不是</span><br><span class="line">mathjax:true（mathjax:true）</span><br></pre></td></tr></table></figure><p>写博客文件时，要开启 Mathjax选项，， 添加以下内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mathjax: true</span><br></pre></td></tr></table></figure><p>例如</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">title: Cplex求解器</span><br><span class="line">categories:</span><br><span class="line">  - 算法</span><br><span class="line">tags:</span><br><span class="line">  - Matlab</span><br><span class="line">  - 算法</span><br><span class="line">date: 2020-05-28 21:51:57</span><br><span class="line">mathjax: true</span><br></pre></td></tr></table></figure><p>如下图所示</p><img src="/Hexoyilia%E4%B8%BB%E9%A2%98%E4%B8%8B%E6%B7%BB%E5%8A%A0%E5%85%AC%E5%BC%8F/2020-05-29-20-35-37.png" class><p>通过以上步骤，我们就可以在 hexo 中使用 Mathjax 来书写数学公式</p><p>效果展示：<br><img src="/Hexoyilia%E4%B8%BB%E9%A2%98%E4%B8%8B%E6%B7%BB%E5%8A%A0%E5%85%AC%E5%BC%8F/2020-05-29-20-36-30.png" class></p><img src="/Hexoyilia%E4%B8%BB%E9%A2%98%E4%B8%8B%E6%B7%BB%E5%8A%A0%E5%85%AC%E5%BC%8F/2020-05-29-20-37-00.png" class>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用LaTex添加公式到Hexo博客里&lt;/p&gt;
    
    </summary>
    
    
      <category term="环境搭建" scheme="https://linbei.top/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="Hexo" scheme="https://linbei.top/tags/Hexo/"/>
    
      <category term="公式" scheme="https://linbei.top/tags/%E5%85%AC%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Cplex求解器</title>
    <link href="https://linbei.top/Cplex%E6%B1%82%E8%A7%A3%E5%99%A8/"/>
    <id>https://linbei.top/Cplex%E6%B1%82%E8%A7%A3%E5%99%A8/</id>
    <published>2020-05-28T13:51:57.000Z</published>
    <updated>2020-05-29T12:44:46.702Z</updated>
    
    <content type="html"><![CDATA[<p>在求解整数线性规划问题是，Matlab下yalmip+cplex的组合会让如虎添翼。本人是在研究早晚班排班过程中才发现的这一工具。其能够求解各种整数规划模型。在matlab中使用cplex求解时，还可以使用yalmip工具进行建模，比直接使用cplex建模方便很多。<br><a id="more"></a><br>在正式开始使用前需要先安装好环境。第一步是下载相关的工具包。<a href="https://pan.baidu.com/s/1L8Px1repdeWbs_Sx-WhXMw" target="_blank" rel="noopener">百度网盘链接</a> 提取码：garx<br><img src="/Cplex%E6%B1%82%E8%A7%A3%E5%99%A8/2020-05-28-22-01-12.png" class></p><h2 id="yalmip安装"><a href="#yalmip安装" class="headerlink" title="yalmip安装"></a>yalmip安装</h2><p>yalmip工具箱的安装比较简单，从链接下载后，将YALMIP-master文件夹拷贝到matlab&gt;toolbox,如下图<br><img src="/Cplex%E6%B1%82%E8%A7%A3%E5%99%A8/2020-05-28-22-02-06.png" class><br>是放在matlab安装目录的\toolbox文件夹下。</p><p>然后打开matlab，点击设置路径<br><img src="/Cplex%E6%B1%82%E8%A7%A3%E5%99%A8/2020-05-28-22-03-18.png" class><br>点击添加并包含子文件夹，添加之后点击保存、关闭<br><img src="/Cplex%E6%B1%82%E8%A7%A3%E5%99%A8/2020-05-28-22-05-15.png" class><br>这样下来，路径就设置好了，yalmip作为工具箱已经被添加到matlab中去了，接下来在命令行窗口输入中检查一下，输出yalmiptest,然后回车！你会发现你的yalmip已经可以作为matlab的工具箱而使用了，但是cplex没有被yalmip识别到，如下图所示，所以需要求解器cplex的安装<br><img src="/Cplex%E6%B1%82%E8%A7%A3%E5%99%A8/2020-05-28-22-05-35.png" class></p><h2 id="Cplex安装"><a href="#Cplex安装" class="headerlink" title="Cplex安装"></a>Cplex安装</h2><p>Cplex的安装较yalmip复杂一些，不过复杂之处主要在版本对不对，能不能正常安装，是不是能够和yalmip匹配的上，以及最后求解的时候受不受到变量、约束个数的限制。</p><p>Cplex官网可以申请试用版，如果是在校学生或者老师，可以使用学校的教育邮箱去申请，理论上应该可以申请到。博主使用学校邮箱账号申请，奈何学校邮箱的问题迟迟收不到验证邮件消息，到第二天才收到了消息，所以并没有采用此种方法。而实直接在网上找了一个下载。原本想直接用一个简化版的Cplex的文件，但是添加到matlab路径后发现运行代码时找不到，照着网上的一些文章说是版本的问题，yalmip没有把对应的cplex版本包含进来，但是我查看了一下其实yalmip已经包含了很多版本的cplex。无奈之下我只好去下载CplexStudio.<br>按照博主链接，便可以下载到12.8版本的Cplex，解压后运行，一直点击下一步，改变安装路径和生成文件的路径，期间需要安装VS studio的环境，由于电脑早已有VS环境，可以忽略一些内容安装，总之，一般情况下，点击安装程序，一路点击下一步即可安装成功！<br><img src="/Cplex%E6%B1%82%E8%A7%A3%E5%99%A8/2020-05-28-22-11-47.png" class></p><p>安装成功后，需要再次打开matlab，继续设置添加路径，这里需要注意的是，你需要将cpclex文件下matlab的文件夹添加进去。<br>接着进行测试，在命令行窗口输入yalmiptest，检查Cplex的安装情况，你会发现，yalmip检测到了求解器Cplex<br><img src="/Cplex%E6%B1%82%E8%A7%A3%E5%99%A8/2020-05-28-22-12-34.png" class><br><img src="/Cplex%E6%B1%82%E8%A7%A3%E5%99%A8/2020-05-28-22-12-50.png" class></p><p>到这里安装部分就都成功了，可以开始漫长的科研道路了。</p><h2 id="一些示例"><a href="#一些示例" class="headerlink" title="一些示例"></a>一些示例</h2><h3 id="yalmip基本格式"><a href="#yalmip基本格式" class="headerlink" title="yalmip基本格式"></a>yalmip基本格式</h3><p>1.创建决策变量<br>2.目标函数Z<br>3.约束条件设置C<br>4.参数设置</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ops = sdpsetting(<span class="string">'solver'</span>,<span class="string">'Cplex'</span>,<span class="string">'verbose'</span>,<span class="number">0</span>); verbose:显示冗余度 <span class="number">0</span>为只显示结果</span><br></pre></td></tr></table></figure><p>5.求解</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result = solvesdp(C,z,ops)</span><br></pre></td></tr></table></figure><h3 id="示例一"><a href="#示例一" class="headerlink" title="示例一"></a>示例一</h3><p>一个可视化公式编辑器的神器，它可以让我们<a href="http://www.wiris.com/editor/demo/en/developers#mathml-latex" target="_blank" rel="noopener">可视化地编辑公式</a>，然后自动得到它的LaTeX文本：</p><script type="math/tex; mode=display">min\;Z=12x_1+5x_2+8x_3\\s.t.\left\{\begin{array}{l}2x_1+3x_2+x_3\geq30\\4x_1+x_2+x_3\geq15\\x_1,x_2,x_3\geq0\end{array}\right.</script><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">clear;clc;close all;</span><br><span class="line"></span><br><span class="line">c = [<span class="number">12</span> <span class="number">5</span> <span class="number">8</span>];</span><br><span class="line">A = [<span class="number">2</span> <span class="number">3</span> <span class="number">1</span>; <span class="number">4</span> <span class="number">1</span> <span class="number">5</span>];</span><br><span class="line">b = [<span class="number">30</span>; <span class="number">15</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">%决策变量</span></span><br><span class="line">x = sdpvar(<span class="number">3</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">%目标函数</span></span><br><span class="line">z = c*x;</span><br><span class="line"></span><br><span class="line"><span class="comment">%添加约束</span></span><br><span class="line"><span class="comment">%C = [];</span></span><br><span class="line"><span class="comment">%C = [C; A*x &gt;= b];</span></span><br><span class="line"><span class="comment">%C = [C;x&gt;=0];</span></span><br><span class="line">C=[A*x &gt;= b,x&gt;=<span class="number">0</span>];</span><br><span class="line">ops=sdpsettings(<span class="string">'verbose'</span>,<span class="number">0</span>);</span><br><span class="line"><span class="comment">%求解</span></span><br><span class="line">result = optimize(C,z,ops);</span><br><span class="line"><span class="keyword">if</span> result.problem == <span class="number">0</span>    <span class="comment">%求解成功</span></span><br><span class="line">    x_star=double(x)</span><br><span class="line">    z_star=double(z)</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">disp</span>(<span class="string">'求解过程中出错'</span>);</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">警告: 文件: C:\Program Files\IBM\ILOG\CPLEX_Studio_Community128\cplex\matlab\x64_win64\@Cplex\Cplex.p 行: <span class="number">965</span> 列: <span class="number">0</span></span><br><span class="line">在嵌套函数中定义 <span class="string">"changedParam"</span> 会将其与父函数共享。在以后的版本中，要在父函数和嵌套函数之间共享 <span class="string">"changedParam"</span>，请在父函数中显式定义它。</span><br><span class="line">&gt; In cplexoptimset</span><br><span class="line">  In sdpsettings&gt;setup_cplex_options (line <span class="number">617</span>)</span><br><span class="line">  In sdpsettings (line <span class="number">145</span>)</span><br><span class="line"></span><br><span class="line">x_star =</span><br><span class="line"></span><br><span class="line">         <span class="number">0</span></span><br><span class="line">    <span class="number">9.6429</span></span><br><span class="line">    <span class="number">1.0714</span></span><br><span class="line"></span><br><span class="line">z_star =</span><br><span class="line"></span><br><span class="line">   <span class="number">56.7857</span></span><br></pre></td></tr></table></figure><h3 id="示例二-运输问题"><a href="#示例二-运输问题" class="headerlink" title="示例二 运输问题"></a>示例二 运输问题</h3><script type="math/tex; mode=display">min\;Z=\sum_{i=1}^m\sum_{j=1}^nc_{ij}x_{ij}\\s.t.\left\{\begin{array}{l}\sum_{j=1}^nx_{ij}\leq a_i\;\;\;\;i=1,2,\cdots,m\\\sum_{i=1}^mx_{ij}\geq b_j\;\;\;j=1,2,\cdots,n\\x_{ij}\geq0\;\;\;\;\;\;\;\;\;\;i=1,2,\cdots,m;\;j=1,2,\cdots,n\end{array}\right.</script><img src="/Cplex%E6%B1%82%E8%A7%A3%E5%99%A8/2020-05-29-17-15-04.png" class><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">clear;clc;close all;</span><br><span class="line"></span><br><span class="line">c = [<span class="number">1</span> <span class="number">3</span> <span class="number">5</span> <span class="number">7</span> <span class="number">13</span>; <span class="number">6</span> <span class="number">4</span> <span class="number">3</span> <span class="number">14</span> <span class="number">8</span>; <span class="number">13</span> <span class="number">3</span> <span class="number">1</span> <span class="number">7</span> <span class="number">4</span>;</span><br><span class="line">    <span class="number">1</span> <span class="number">10</span> <span class="number">12</span> <span class="number">7</span> <span class="number">11</span>];</span><br><span class="line">a = [<span class="number">40</span> <span class="number">50</span> <span class="number">30</span> <span class="number">80</span>];</span><br><span class="line">b = [<span class="number">10</span> <span class="number">20</span> <span class="number">15</span> <span class="number">18</span> <span class="number">25</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">%决策变量</span></span><br><span class="line">x = intvar(<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">%目标函数</span></span><br><span class="line">z = sum(sum(c.*x));</span><br><span class="line"></span><br><span class="line"><span class="comment">%添加约束</span></span><br><span class="line">C = [];</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:<span class="number">4</span></span><br><span class="line">    C = [C; sum(x(<span class="built_in">i</span>,:))&lt;=a(<span class="built_in">i</span>)];</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">j</span>=<span class="number">1</span>:<span class="number">5</span></span><br><span class="line">    C = [C;sum(x(:,<span class="built_in">j</span>))&gt;=b(<span class="built_in">j</span>)];</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">C = [C;x&gt;=<span class="number">0</span>];</span><br><span class="line">ops=sdpsettings(<span class="string">'verbose'</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">result = optimize(C,z,ops);</span><br><span class="line"><span class="keyword">if</span> result.problem == <span class="number">0</span>    <span class="comment">%求解成功</span></span><br><span class="line">    x_star = double(x)</span><br><span class="line">    z_star = double(z)</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">disp</span>(<span class="string">'求解过程中出错'</span>);</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">x_star =</span><br><span class="line"></span><br><span class="line">     <span class="number">2</span>    <span class="number">20</span>     <span class="number">0</span>    <span class="number">18</span>     <span class="number">0</span></span><br><span class="line">     <span class="number">0</span>     <span class="number">0</span>    <span class="number">10</span>     <span class="number">0</span>     <span class="number">0</span></span><br><span class="line">     <span class="number">0</span>     <span class="number">0</span>     <span class="number">5</span>     <span class="number">0</span>    <span class="number">25</span></span><br><span class="line">     <span class="number">8</span>     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span></span><br><span class="line"></span><br><span class="line">z_star =</span><br><span class="line"></span><br><span class="line">   <span class="number">331</span></span><br></pre></td></tr></table></figure><h3 id="示例三-背包问题"><a href="#示例三-背包问题" class="headerlink" title="示例三 背包问题"></a>示例三 背包问题</h3><script type="math/tex; mode=display">min\;Z=\sum_{i=1}^nc_ix_i\\s.t.\left\{\begin{array}{l}{\textstyle\sum_{i=1}^n}x_iw_i\leq W\\\textstyle\sum_{i=1}^nx_iv_i\leq V\\0\leq x_i\leq n_i\;\;\;\;\;\;\;\;\mathrm{且为整数}\end{array}\right.</script><img src="/Cplex%E6%B1%82%E8%A7%A3%E5%99%A8/2020-05-29-17-19-30.png" class><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">clear;clc;close all;</span><br><span class="line"></span><br><span class="line">c = [<span class="number">8</span> <span class="number">1</span> <span class="number">11</span> <span class="number">12</span> <span class="number">9</span> <span class="number">10</span> <span class="number">9</span> <span class="number">5</span> <span class="number">8</span> <span class="number">3</span>]; <span class="comment">%效用</span></span><br><span class="line">w = [<span class="number">17</span> <span class="number">19</span> <span class="number">3</span> <span class="number">19</span> <span class="number">13</span> <span class="number">2</span> <span class="number">6</span> <span class="number">11</span> <span class="number">20</span> <span class="number">20</span>]; <span class="comment">%重量</span></span><br><span class="line">v = [<span class="number">2</span> <span class="number">10</span> <span class="number">10</span> <span class="number">5</span> <span class="number">9</span> <span class="number">2</span> <span class="number">5</span> <span class="number">10</span> <span class="number">8</span> <span class="number">10</span>];  <span class="comment">%体积</span></span><br><span class="line">n = [<span class="number">5</span> <span class="number">2</span> <span class="number">4</span> <span class="number">3</span> <span class="number">5</span> <span class="number">4</span> <span class="number">3</span> <span class="number">1</span> <span class="number">5</span> <span class="number">3</span>];   <span class="comment">%数量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%决策变量</span></span><br><span class="line">x = intvar(<span class="number">10</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">%目标函数</span></span><br><span class="line">z = -(c*x);</span><br><span class="line"></span><br><span class="line"><span class="comment">%添加约束</span></span><br><span class="line">C = [];</span><br><span class="line">C = [C,w*x&lt;=<span class="number">80</span>];</span><br><span class="line">C = [C,v*x&lt;=<span class="number">60</span>];</span><br><span class="line">C = [C,<span class="number">0</span>&lt;=x&lt;=n];</span><br><span class="line"></span><br><span class="line">ops=sdpsettings(<span class="string">'verbose'</span>,<span class="number">0</span>);</span><br><span class="line"><span class="comment">%求解</span></span><br><span class="line">result = optimize(C,z,ops);</span><br><span class="line"><span class="keyword">if</span> result.problem == <span class="number">0</span>    <span class="comment">%求解成功</span></span><br><span class="line">    x_star = double(x)</span><br><span class="line">    z_star = double(-z)</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">disp</span>(<span class="string">'求解过程中出错'</span>);</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">x_star =</span><br><span class="line"></span><br><span class="line">     <span class="number">1</span></span><br><span class="line">     <span class="number">0</span></span><br><span class="line">     <span class="number">3</span></span><br><span class="line">     <span class="number">1</span></span><br><span class="line">     <span class="number">0</span></span><br><span class="line">     <span class="number">4</span></span><br><span class="line">     <span class="number">3</span></span><br><span class="line">     <span class="number">0</span></span><br><span class="line">     <span class="number">0</span></span><br><span class="line">     <span class="number">0</span></span><br><span class="line"></span><br><span class="line">z_star =</span><br><span class="line"></span><br><span class="line">   <span class="number">120</span></span><br></pre></td></tr></table></figure><h3 id="示例四-最短路径问题"><a href="#示例四-最短路径问题" class="headerlink" title="示例四 最短路径问题"></a>示例四 最短路径问题</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">% 利用yamlip求解最短路问题</span></span><br><span class="line">clear;clc;close all;</span><br><span class="line">D = load(<span class="string">'1.txt'</span>);</span><br><span class="line">n = <span class="built_in">size</span>(D,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">% 决策变量</span></span><br><span class="line">x = binvar(n,n,<span class="string">'full'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">% 目标</span></span><br><span class="line">z=sum(sum(D.*x));</span><br><span class="line"><span class="comment">% 约束添加</span></span><br><span class="line">C=[];</span><br><span class="line">C = [C,(sum(x(<span class="number">1</span>,:))-sum(x(:,<span class="number">1</span>))==<span class="number">1</span>)];</span><br><span class="line">C = [C,(sum(x(n,:))-sum(x(:,n))==<span class="number">-1</span>)];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">2</span>:(n<span class="number">-1</span>)</span><br><span class="line">    C = [C,(sum(x(<span class="built_in">i</span>,:))-sum(x(:,<span class="built_in">i</span>))==<span class="number">0</span>)];</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">ops=sdpsettings(<span class="string">'verbose'</span>,<span class="number">0</span>);</span><br><span class="line"><span class="comment">% 求解</span></span><br><span class="line">result=solvesdp(C,z,ops);</span><br><span class="line"><span class="keyword">if</span> result.problem == <span class="number">0</span></span><br><span class="line">    x_star = value(x)</span><br><span class="line">    z_star = value(z)</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">disp</span>(<span class="string">'求解过程中出错'</span>);</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">x_star =</span><br><span class="line"></span><br><span class="line">   NaN     <span class="number">1</span>     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span></span><br><span class="line">     <span class="number">0</span>   NaN     <span class="number">0</span>     <span class="number">0</span>     <span class="number">1</span>     <span class="number">0</span>     <span class="number">0</span></span><br><span class="line">     <span class="number">0</span>     <span class="number">0</span>   NaN     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span></span><br><span class="line">     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span>   NaN     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span></span><br><span class="line">     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span>   NaN     <span class="number">0</span>     <span class="number">1</span></span><br><span class="line">     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span>   NaN     <span class="number">0</span></span><br><span class="line">     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span>   NaN</span><br><span class="line"></span><br><span class="line">z_star =</span><br><span class="line"></span><br><span class="line">     <span class="number">5</span></span><br></pre></td></tr></table></figure><h3 id="示例五-指派问题"><a href="#示例五-指派问题" class="headerlink" title="示例五 指派问题"></a>示例五 指派问题</h3><script type="math/tex; mode=display">min\;Z=\sum_{i=1}^m\sum_{j=1}^nc_{ij}x_{ij}\\s.t.\left\{\begin{array}{l}{\textstyle\sum_{i=1}^n}x_{ij}=1\;\;\;i=1,2,\cdots,n\\\textstyle\sum_{j=1}^nx_{ij}=1\;\;\;i=1,2,\cdots,n\\x_{ij}\left\{0,1\right\}\;\;\;\;\;\;\;\;\;\;i=1,2,\cdots,n\end{array}\right.</script><img src="/Cplex%E6%B1%82%E8%A7%A3%E5%99%A8/2020-05-29-19-28-02.png" class><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">clear;clc;close all;</span><br><span class="line">c =load(<span class="string">'zhipai.txt'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">%决策变量</span></span><br><span class="line">x = binvar(<span class="number">5</span>,<span class="number">5</span>,<span class="string">'full'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">%目标函数</span></span><br><span class="line">z = sum(sum(c.*x));</span><br><span class="line"></span><br><span class="line"><span class="comment">%添加约束</span></span><br><span class="line">C = [];</span><br><span class="line"></span><br><span class="line">C = [C;sum(x,<span class="number">1</span>)==<span class="number">1</span>];   <span class="comment">%  1 横向相加</span></span><br><span class="line">C = [C;sum(x,<span class="number">2</span>)==<span class="number">1</span>];   <span class="comment">%  2 纵向相加</span></span><br><span class="line"></span><br><span class="line">ops=sdpsettings(<span class="string">'verbose'</span>,<span class="number">0</span>);</span><br><span class="line"><span class="comment">%求解</span></span><br><span class="line">result = optimize(C,z,ops);</span><br><span class="line"><span class="keyword">if</span> result.problem == <span class="number">0</span>    <span class="comment">%求解成功</span></span><br><span class="line">    x_star = double(x)</span><br><span class="line">    z_star = double(z)</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">disp</span>(<span class="string">'求解过程中出错'</span>);</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">c =</span><br><span class="line"></span><br><span class="line">    <span class="number">12</span>     <span class="number">7</span>     <span class="number">9</span>     <span class="number">7</span>     <span class="number">9</span></span><br><span class="line">     <span class="number">8</span>     <span class="number">9</span>     <span class="number">6</span>     <span class="number">6</span>     <span class="number">6</span></span><br><span class="line">     <span class="number">7</span>    <span class="number">17</span>    <span class="number">12</span>    <span class="number">14</span>     <span class="number">9</span></span><br><span class="line">    <span class="number">15</span>    <span class="number">14</span>     <span class="number">6</span>     <span class="number">6</span>    <span class="number">10</span></span><br><span class="line">     <span class="number">4</span>    <span class="number">10</span>     <span class="number">7</span>    <span class="number">10</span>     <span class="number">9</span></span><br><span class="line">x_star =</span><br><span class="line">  </span><br><span class="line">     <span class="number">0</span>     <span class="number">1</span>     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span></span><br><span class="line">     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span>     <span class="number">1</span>     <span class="number">0</span></span><br><span class="line">     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span>     <span class="number">1</span></span><br><span class="line">     <span class="number">0</span>     <span class="number">0</span>     <span class="number">1</span>     <span class="number">0</span>     <span class="number">0</span></span><br><span class="line">     <span class="number">1</span>     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    z_star =</span><br><span class="line"></span><br><span class="line">    <span class="number">32</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在求解整数线性规划问题是，Matlab下yalmip+cplex的组合会让如虎添翼。本人是在研究早晚班排班过程中才发现的这一工具。其能够求解各种整数规划模型。在matlab中使用cplex求解时，还可以使用yalmip工具进行建模，比直接使用cplex建模方便很多。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://linbei.top/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="Matlab" scheme="https://linbei.top/tags/Matlab/"/>
    
      <category term="算法" scheme="https://linbei.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>80端口解决方法</title>
    <link href="https://linbei.top/%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>https://linbei.top/%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</id>
    <published>2020-05-20T04:12:57.000Z</published>
    <updated>2020-05-23T01:20:25.689Z</updated>
    
    <content type="html"><![CDATA[<p>遇到端口被占用问题是有一次服务器重启了，然后nginx没有设为开机自动启动，导致有些在线程序崩掉后才发现的。当尝试再次启动nginx时，发现nginx死活启动不起来。所以就怀疑是有其他进程占用了80端口。所以带着问题尝试去解决。本次实验是在win系统下进行的。<br>首先使用netstat -ano 命令查看是哪个进程正在占用80端口<br><a id="more"></a><br><img src="/%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/2020-05-20-20-45-01.png" class><br>PID为4的进程正在占用80端口。尝试用taskkill指令杀死此进程，确发现此为system进程，无法直接结束进程。<br>使用netsh命令查看http端口使用状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsh http show servicetstate</span><br></pre></td></tr></table></figure><img src="/%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/2020-05-20-20-47-30.png" class><img src="/%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/2020-05-20-20-48-48.png" class><p>然后在任务管理器中查找该线程id,并将其关闭</p><p>然后就可以重新启动nginx了 启动命令为</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx start</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;遇到端口被占用问题是有一次服务器重启了，然后nginx没有设为开机自动启动，导致有些在线程序崩掉后才发现的。当尝试再次启动nginx时，发现nginx死活启动不起来。所以就怀疑是有其他进程占用了80端口。所以带着问题尝试去解决。本次实验是在win系统下进行的。&lt;br&gt;首先使用netstat -ano 命令查看是哪个进程正在占用80端口&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="运维" scheme="https://linbei.top/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="部署" scheme="https://linbei.top/tags/%E9%83%A8%E7%BD%B2/"/>
    
      <category term="win" scheme="https://linbei.top/tags/win/"/>
    
  </entry>
  
  <entry>
    <title>Redis一主二从三哨兵</title>
    <link href="https://linbei.top/Redis%E4%B8%80%E4%B8%BB%E4%BA%8C%E4%BB%8E%E4%B8%89%E5%93%A8%E5%85%B5/"/>
    <id>https://linbei.top/Redis%E4%B8%80%E4%B8%BB%E4%BA%8C%E4%BB%8E%E4%B8%89%E5%93%A8%E5%85%B5/</id>
    <published>2020-05-16T10:12:57.000Z</published>
    <updated>2020-05-23T01:20:25.595Z</updated>
    
    <content type="html"><![CDATA[<p>本文简单讲述主从建立和哨兵的配置。本机测试redis为Redis-x64-3.2.100<a href="https://github.com/MicrosoftArchive/redis/releases" target="_blank" rel="noopener">Windows下载地址</a>，使用二台服务器作为测试。</p><a id="more"></a><h2 id="下载解压"><a href="#下载解压" class="headerlink" title="下载解压"></a>下载解压</h2><p>下载完成后进行解压，然后复制两份作为从成员，构成一主二从。在主服务器上使用一份，从服务器上使用二份。<br><img src="/Redis%E4%B8%80%E4%B8%BB%E4%BA%8C%E4%BB%8E%E4%B8%89%E5%93%A8%E5%85%B5/2020-05-16-16-21-15.png" class><br><img src="/Redis%E4%B8%80%E4%B8%BB%E4%BA%8C%E4%BB%8E%E4%B8%89%E5%93%A8%E5%85%B5/2020-05-16-15-44-27.png" class></p><h2 id="主从配置"><a href="#主从配置" class="headerlink" title="主从配置"></a>主从配置</h2><h3 id="主redis配置"><a href="#主redis配置" class="headerlink" title="主redis配置"></a>主redis配置</h3><p>编辑文件夹下redis.windows.conf文件，设置bind和port，因为要用到远程连接，所以绑定的ip 127.0.0.1要注释掉，否则远程是无法访问的。端口就使用默认的6379，注意要把阿里云后台的端口限制防火墙打开。<br><img src="/Redis%E4%B8%80%E4%B8%BB%E4%BA%8C%E4%BB%8E%E4%B8%89%E5%93%A8%E5%85%B5/2020-05-16-15-48-27.png" class></p><h3 id="从redis配置"><a href="#从redis配置" class="headerlink" title="从redis配置"></a>从redis配置</h3><p>从redis配置：同样编辑文件夹下redis.windows.conf文件，设置bind和port。bind127.0.0.1同样注释掉，port分别是6380和6381。做完以上操作，如何标志这两redis是从关系呢？所以，还需要在配置文件中加上一行配置。注意：两个从redis都是相同的配置语句，因为都从属于同一个主redis。<br><img src="/Redis%E4%B8%80%E4%B8%BB%E4%BA%8C%E4%BB%8E%E4%B8%89%E5%93%A8%E5%85%B5/2020-05-16-15-51-05.png" class><br>由于我开启了密码登录验证，所以masterauth要添加上。</p><h2 id="主从启动"><a href="#主从启动" class="headerlink" title="主从启动"></a>主从启动</h2><p>在文件加中使用cmd进入命令窗口，输入redis-server redis.windows.conf即可启动（redis-server.exe和redis.windows.conf文件在相同文件夹下），依次启动主和从redis。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-server redis.windows.conf</span><br></pre></td></tr></table></figure><img src="/Redis%E4%B8%80%E4%B8%BB%E4%BA%8C%E4%BB%8E%E4%B8%89%E5%93%A8%E5%85%B5/2020-05-16-15-53-11.png" class><img src="/Redis%E4%B8%80%E4%B8%BB%E4%BA%8C%E4%BB%8E%E4%B8%89%E5%93%A8%E5%85%B5/2020-05-16-15-56-08.png" class><p>通过命令查看各个redis的状态<br><img src="/Redis%E4%B8%80%E4%B8%BB%E4%BA%8C%E4%BB%8E%E4%B8%89%E5%93%A8%E5%85%B5/2020-05-16-16-00-18.png" class><br>slave 6380<br><img src="/Redis%E4%B8%80%E4%B8%BB%E4%BA%8C%E4%BB%8E%E4%B8%89%E5%93%A8%E5%85%B5/2020-05-16-16-01-09.png" class><br>slave 6381<br><img src="/Redis%E4%B8%80%E4%B8%BB%E4%BA%8C%E4%BB%8E%E4%B8%89%E5%93%A8%E5%85%B5/2020-05-16-16-01-39.png" class><br>当搭建好后主服务器是可读可写的，而从服务器是只读的。当主服务器宕机后，整个系统就瘫痪了，不能往从服务器写入数据，不能自动的把从服务器上升为主服务器。此时可通过哨兵模式来实现当主服务器宕机后，从服务器自动上升为主服务器。</p><h2 id="哨兵模式配置"><a href="#哨兵模式配置" class="headerlink" title="哨兵模式配置"></a>哨兵模式配置</h2><p>新建哨兵配置文件，分别命名为</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sentinel.conf</span><br><span class="line">sentinel2.conf</span><br><span class="line">sentinel3.conf</span><br></pre></td></tr></table></figure><p>哨兵配置文件内容<br>sentinel.conf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">port 27000</span><br><span class="line"><span class="meta">#</span><span class="bash">master</span></span><br><span class="line">sentinel monitor master 39.100.107.169 6379 1</span><br><span class="line">sentinel down-after-milliseconds master 5000</span><br><span class="line">sentinel auth-pass master 123</span><br><span class="line">sentinel config-epoch master 1</span><br><span class="line">sentinel leader-epoch master 1</span><br></pre></td></tr></table></figure><p>sentinel2.conf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">port 27002</span><br><span class="line"><span class="meta">#</span><span class="bash">slave 1</span></span><br><span class="line">sentinel monitor master 39.100.107.169 6379 1</span><br><span class="line">sentinel down-after-milliseconds master 5000</span><br><span class="line">sentinel auth-pass master 123</span><br><span class="line">sentinel config-epoch master 1</span><br><span class="line">sentinel leader-epoch master 1</span><br></pre></td></tr></table></figure><p>sentinel3.conf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">port 27001</span><br><span class="line"><span class="meta">#</span><span class="bash">slave 2</span></span><br><span class="line">sentinel monitor master 39.100.107.169 6379 1</span><br><span class="line">sentinel down-after-milliseconds master 5000</span><br><span class="line">sentinel auth-pass master 123</span><br><span class="line">sentinel config-epoch master 1</span><br><span class="line">sentinel leader-epoch master 1</span><br></pre></td></tr></table></figure><p>这里需要注意的是如果redis配置种添加了密码验证，一定要在sentinel文件里添加auth-pass这个参数，不然在从机上升为主机后，其他服务器连接不了。</p><p>哨兵配置文件说明</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. port :当前Sentinel服务运行的端口  </span><br><span class="line">2.sentinel monitor mymaster 39.100.107.169 6379 1:Sentinel去监视一个名为mymaster的主redis实例，这个主实例的IP地址为本机地址39.100.107.169，端口号为6379，而将这个主实例判断为失效至少需要1个 Sentinel进程的同意，只要同意Sentinel的数量不达标，自动failover就不会执行  </span><br><span class="line">3.sentinel down-after-milliseconds mymaster 5000:指定了Sentinel认为Redis实例已经失效所需的毫秒数。当 实例超过该时间没有返回PING，或者直接返回错误，那么Sentinel将这个实例标记为主观下线。只有一个 Sentinel进程将实例标记为主观下线并不一定会引起实例的自动故障迁移：只有在足够数量的Sentinel都将一个实例标记为主观下线之后，实例才会被标记为客观下线，这时自动故障迁移才会执行  </span><br><span class="line">4.sentinel parallel-syncs mymaster 1：指定了在执行故障转移时，最多可以有多少个从Redis实例在同步新的主实例，在从Redis实例较多的情况下这个数字越小，同步的时间越长，完成故障转移所需的时间就越长  </span><br><span class="line">5.sentinel failover-timeout mymaster 15000：如果在该时间（ms）内未能完成failover操作，则认为该failover失败</span><br></pre></td></tr></table></figure><h3 id="哨兵测试"><a href="#哨兵测试" class="headerlink" title="哨兵测试"></a>哨兵测试</h3><p>启动3个哨兵</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">redis-server.exe sentinel.conf --sentinel</span><br><span class="line">redis-server.exe sentinel2.conf --sentinel</span><br><span class="line">redis-server.exe sentinel3.conf --sentinel</span><br></pre></td></tr></table></figure><img src="/Redis%E4%B8%80%E4%B8%BB%E4%BA%8C%E4%BB%8E%E4%B8%89%E5%93%A8%E5%85%B5/2020-05-16-16-25-19.png" class><h3 id="测试主从切换"><a href="#测试主从切换" class="headerlink" title="测试主从切换"></a>测试主从切换</h3><p>主机挂了后，从机是否能成功上位变为主机</p><p>先看下当前的redis状态</p><p>分别在客户端输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">info replication</span><br></pre></td></tr></table></figure><img src="/Redis%E4%B8%80%E4%B8%BB%E4%BA%8C%E4%BB%8E%E4%B8%89%E5%93%A8%E5%85%B5/2020-05-16-16-14-53.png" class><p>当主机挂掉后，6381这个端口成了主机，这是通过哨兵的一个投票选择选出一个从机上升为主机。如果主机下次重新连接进来，那么它也不会立即成为主机，而是变为了从机。</p><h2 id="NET-Core中使用Redis集群"><a href="#NET-Core中使用Redis集群" class="headerlink" title=".NET Core中使用Redis集群"></a>.NET Core中使用Redis集群</h2><p>我们使用CSRedisCore来访问Redis，CSRedisCore是国内大牛开发的一个.net core redis 组件，源码可读性很强非常干净，几乎无任何依赖。性能相比ServiceStack.Redis和StackExchange.Redis会快10%左右，支持Redis的高级特性：订阅/发布，Pipeline，MGet/MSet，集群，分区。<br>创建一个.net core 控制台程序，然后添加nuget包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nuget Install-Package CSRedisCore</span><br></pre></td></tr></table></figure><p>Program.cs代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Threading;</span><br><span class="line"></span><br><span class="line">namespace ConsoleApp1</span><br><span class="line">&#123;</span><br><span class="line">    class Program</span><br><span class="line">    &#123;</span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            &#x2F;&#x2F;连接哨兵</span><br><span class="line">            var csredis &#x3D; new CSRedis.CSRedisClient(&quot;redis-master&quot;, new[] &#123;&quot;127.0.0.1:27000&quot; &#125;);</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F;初始化 RedisHelper</span><br><span class="line">            RedisHelper.Initialization(csredis);</span><br><span class="line"></span><br><span class="line">            while (true)</span><br><span class="line">            &#123;</span><br><span class="line">                try</span><br><span class="line">                &#123;</span><br><span class="line">                    Test();</span><br><span class="line">                &#125;</span><br><span class="line">                catch(Exception ex)</span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(ex.ToString());</span><br><span class="line">                &#125;</span><br><span class="line">                Console.ReadLine();</span><br><span class="line">            &#125;</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        static void Test()</span><br><span class="line">        &#123;</span><br><span class="line">            RedisHelper.Set(&quot;name&quot;, &quot;祝雷&quot;);&#x2F;&#x2F;设置值。默认永不过期</span><br><span class="line">            Console.WriteLine(RedisHelper.Get&lt;String&gt;(&quot;name&quot;));</span><br><span class="line"></span><br><span class="line">            RedisHelper.Set(&quot;time&quot;, DateTime.Now, 1);</span><br><span class="line">            Console.WriteLine(RedisHelper.Get&lt;DateTime&gt;(&quot;time&quot;));</span><br><span class="line">            Console.WriteLine(RedisHelper.Get&lt;DateTime&gt;(&quot;time&quot;));</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 列表</span><br><span class="line">            RedisHelper.RPush(&quot;list&quot;, &quot;第一个元素&quot;);</span><br><span class="line">            RedisHelper.RPush(&quot;list&quot;, &quot;第二个元素&quot;);</span><br><span class="line">            RedisHelper.LInsertBefore(&quot;list&quot;, &quot;第二个元素&quot;, &quot;我是新插入的第二个元素！&quot;);</span><br><span class="line">            Console.WriteLine($&quot;list的长度为&#123;RedisHelper.LLen(&quot;list&quot;)&#125;&quot;);</span><br><span class="line">            Console.WriteLine($&quot;list的第二个元素为&#123;RedisHelper.LIndex(&quot;list&quot;, 1)&#125;&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>模拟故障进行测试，启动程序后，杀死主Redis进程，.net core程序再次访问Redis会出现一次异常检查，然后能正常切换到新的master上。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文简单讲述主从建立和哨兵的配置。本机测试redis为Redis-x64-3.2.100&lt;a href=&quot;https://github.com/MicrosoftArchive/redis/releases&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Windows下载地址&lt;/a&gt;，使用二台服务器作为测试。&lt;/p&gt;
    
    </summary>
    
    
      <category term="环境搭建" scheme="https://linbei.top/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="阿里云" scheme="https://linbei.top/tags/%E9%98%BF%E9%87%8C%E4%BA%91/"/>
    
      <category term="缓存" scheme="https://linbei.top/tags/%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>Mobirise搭建网页</title>
    <link href="https://linbei.top/Mobirise%E6%90%AD%E5%BB%BA%E7%BD%91%E9%A1%B5/"/>
    <id>https://linbei.top/Mobirise%E6%90%AD%E5%BB%BA%E7%BD%91%E9%A1%B5/</id>
    <published>2020-05-12T10:12:57.000Z</published>
    <updated>2020-05-23T01:20:25.517Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http:linbei.top">本人用Mobirise制作的网站请点击这里查看</a><br><a id="more"></a><br><img src="/Mobirise%E6%90%AD%E5%BB%BA%E7%BD%91%E9%A1%B5/2020-05-12-19-22-57.png" class></p><h2 id="Mobirise"><a href="#Mobirise" class="headerlink" title="Mobirise"></a>Mobirise</h2><p>哪里有手机网站建设软件？Mobirise是一个用户界面非常友好的程序，使您可以构建桌面和移动网站，准备在Javas cript中。可以在视觉上进行创建网站的过程中，通过拖放内容块中的工作区。此外，你可以将结果轻松地部署到桌面，将其上传到FTP位置或谷歌驱动器。<br><img src="/Mobirise%E6%90%AD%E5%BB%BA%E7%BD%91%E9%A1%B5/2020-05-12-18-58-17.png" class></p><p>Mobirise软件介绍</p><p>Mobirise是一个简单易用的免费网站构建器 - 只需将网站元素拖放到您的页面，添加内容并将其样式设置为您喜欢的样式，操作简单！Mobirise还为用户提供了大量1500多个网站块，模板和主题，包含数千个灵活选项。结合不同主题的积木，创造出独特的混合，帮助你迅速进入网站建设环境！<br>Mobirise不是一个基于Web的系统，它需要<a href="https://mobirise.ws/" target="_blank" rel="noopener">下载</a>软件并通过安装来使用。</p><h2 id="Mobirise软件特色"><a href="#Mobirise软件特色" class="headerlink" title="Mobirise软件特色"></a>Mobirise软件特色</h2><h3 id="不必编码"><a href="#不必编码" class="headerlink" title="不必编码"></a>不必编码</h3><p>Mobirise是一个简单易用的免费网站构建器 - 只需将网站元素拖放到您的页面，添加内容并将其样式设置为您喜欢的样式<br><img src="/Mobirise%E6%90%AD%E5%BB%BA%E7%BD%91%E9%A1%B5/2020-05-12-19-11-21.png" class></p><h3 id="与众不同"><a href="#与众不同" class="headerlink" title="与众不同"></a>与众不同</h3><p>Mobirise Website Builder提供了大量1500多个网站块，模板和主题，包含数千个灵活选项。结合不同主题的积木，创造出独特的混合，<br><img src="/Mobirise%E6%90%AD%E5%BB%BA%E7%BD%91%E9%A1%B5/2020-05-12-19-11-54.png" class></p><h3 id="自动移动"><a href="#自动移动" class="headerlink" title="自动移动"></a>自动移动</h3><p>移动网络流量在2016年超过桌面流量，并且只会在2019年增长，这就是为什么创建在所有设备上看起来都很好的网站的重要性。无需特殊操作，您使用Mobirise制作的所有网站都适合移动设备。您不必创建网站的特殊移动版本，它将自动适应。<br><img src="/Mobirise%E6%90%AD%E5%BB%BA%E7%BD%91%E9%A1%B5/2020-05-12-19-12-21.png" class></p><h3 id="简单易用"><a href="#简单易用" class="headerlink" title="简单易用"></a>简单易用</h3><p>使用拖放式网站构建器缩短开发时间。将块放入页面，内联编辑内容并发布 - 无需技术技能。观看下面的视频，了解Mobirise的实际应用。</p><h3 id="超过1500个惊人的块"><a href="#超过1500个惊人的块" class="headerlink" title="超过1500个惊人的块"></a>超过1500个惊人的块</h3><p>Mobirise Mac提供50多个主题和150多个演示页面，包括滑块， 带灯箱的图库， 文章， 计数器， 倒计时， 全屏介绍， 图像和视频， 功能， 数据表和定价表， 进度条和周期， 时间表， 选项卡和手风琴， 号召性用语， 表格， 谷歌地图， 社交块， 推荐， 页脚等。块的设计考虑了最新的网页设计趋势，它们非常灵活，并且充满了自定义选项。</p><h2 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h2><h3 id="图像-内容滑块"><a href="#图像-内容滑块" class="headerlink" title="图像/内容滑块"></a>图像/内容滑块</h3><p>使用Mobirise 引导滑块创建响应式触摸滑动幻灯片。将图像，文本，按钮添加到幻灯片，设置自动播放，全屏，全宽或盒装布局。<br><img src="/Mobirise%E6%90%AD%E5%BB%BA%E7%BD%91%E9%A1%B5/2020-05-12-19-13-54.png" class></p><h3 id="、联系表格"><a href="#、联系表格" class="headerlink" title="、联系表格"></a>、联系表格</h3><p>无需任何服务器端集成即可轻松添加订阅和联系表单。只需将您的电子邮件链接到表单并立即获取提交。<br><img src="/Mobirise%E6%90%AD%E5%BB%BA%E7%BD%91%E9%A1%B5/2020-05-12-19-14-17.png" class></p><h3 id="图像画廊"><a href="#图像画廊" class="headerlink" title="图像画廊"></a>图像画廊</h3><p>使用移动优化的响应网格在砌体图库中展示您的图片。集成灯箱可将缩略图扩展为完整浏览器图像滑块。<br><img src="/Mobirise%E6%90%AD%E5%BB%BA%E7%BD%91%E9%A1%B5/2020-05-12-19-14-46.png" class></p><h3 id="手机菜单"><a href="#手机菜单" class="headerlink" title="手机菜单"></a>手机菜单</h3><p>Mobirise水平导航菜单在设备上折叠为单个图标移动菜单，也称为“ 汉堡菜单 ”，为所有访客提供完美的移动体验。<br><img src="/Mobirise%E6%90%AD%E5%BB%BA%E7%BD%91%E9%A1%B5/2020-05-12-19-15-11.png" class></p><h3 id="谷歌地图"><a href="#谷歌地图" class="headerlink" title="谷歌地图"></a>谷歌地图</h3><p>帮助客户找到通往公司所在地的路径 - 只需删除Google地图块并输入您的地址即可。<br><img src="/Mobirise%E6%90%AD%E5%BB%BA%E7%BD%91%E9%A1%B5/2020-05-12-19-15-38.png" class></p><h3 id="社交按钮"><a href="#社交按钮" class="headerlink" title="社交按钮"></a>社交按钮</h3><p>通过“分享此页面”和“关注我们”块来扩大您的受众群体并改善社交媒体参与度。社交分享计数器自动显示，无需任何调整。<br><img src="/Mobirise%E6%90%AD%E5%BB%BA%E7%BD%91%E9%A1%B5/2020-05-12-19-15-59.png" class></p><h3 id="字母和图标"><a href="#字母和图标" class="headerlink" title="字母和图标"></a>字母和图标</h3><p>从800多个Google字体和视网膜即用免费图标列表中进行选择，以设计独特的外观和感觉，并具有一些排版风格。<br><img src="/Mobirise%E6%90%AD%E5%BB%BA%E7%BD%91%E9%A1%B5/2020-05-12-19-16-22.png" class></p><h3 id="视频背景"><a href="#视频背景" class="headerlink" title="视频背景"></a>视频背景</h3><p>视频可以是网站的一个很好的补充。使您的网站栩栩如生，并与环境背景视频建立即时连接。<br><img src="/Mobirise%E6%90%AD%E5%BB%BA%E7%BD%91%E9%A1%B5/2020-05-12-19-16-46.png" class></p><h2 id="Mobirise-主要特点"><a href="#Mobirise-主要特点" class="headerlink" title="Mobirise 主要特点"></a>Mobirise 主要特点</h2><h3 id="只需几分钟就可以拖放块并构建网站"><a href="#只需几分钟就可以拖放块并构建网站" class="headerlink" title="只需几分钟就可以拖放块并构建网站"></a>只需几分钟就可以拖放块并构建网站</h3><p>Mobirise被设计为尽可能简单和无畏的事实，一旦您第一次启动应用程序，您将受到顶级工具栏和网站构建器面板的简约界面的欢迎，这一事实变得明显。使用Mobirise比看起来更简单，因为您只需单击右下角的大加号按钮并将块拖放到页面中。您将获得一系列有趣的块，例如jumbotrons，视频背景，汉堡菜单，粘贴标题，视差滚动和英雄图像。</p><h3 id="轻松创建响应式和移动优化的网站"><a href="#轻松创建响应式和移动优化的网站" class="headerlink" title="轻松创建响应式和移动优化的网站"></a>轻松创建响应式和移动优化的网站</h3><p>选择任何块后，其右上方会出现一个小菜单。借助这个小菜单，您可以以非常自然和直观的方式轻松地排列，移动，编辑或删除元素。因为如今，移动电话是我们生活中很重要的部分，网站必须具有适应性强且响应能力强的接口。考虑到这一点，Mobirise使您能够预览您的网站，并了解它们在智能手机，横向智能手机，桌子和计算机上的外观。</p><h3 id="不是最强大的网站建设软件解决方案，但绝对是最简单的"><a href="#不是最强大的网站建设软件解决方案，但绝对是最简单的" class="headerlink" title="不是最强大的网站建设软件解决方案，但绝对是最简单的"></a>不是最强大的网站建设软件解决方案，但绝对是最简单的</h3><p>更重要的是，Mobirise使您可以将您的网站发布到本地驱动器或在GitHub，Amazon S3和Google Drive上托管它。总而言之，Mobirise是一款高效的小型macOS应用程序，旨在尽可能简单和用户友好，这对于几乎没有网站建设经验的用户来说非常理想。</p><h2 id="Mobirise-使用方法"><a href="#Mobirise-使用方法" class="headerlink" title="Mobirise 使用方法"></a>Mobirise 使用方法</h2><h3 id="将块拖到页面"><a href="#将块拖到页面" class="headerlink" title="将块拖到页面"></a>将块拖到页面</h3><p>首先创建一个新网站并获取主题。然后使用右下角的大红色“加号”按钮展开块面板，然后开始拖动您喜欢的块。<br><img src="/Mobirise%E6%90%AD%E5%BB%BA%E7%BD%91%E9%A1%B5/2020-05-12-19-18-33.png" class></p><h3 id="编辑和样式内联"><a href="#编辑和样式内联" class="headerlink" title="编辑和样式内联"></a>编辑和样式内联</h3><p>像在常规文本编辑器中一样编辑每个块的内容，单击媒体元素以插入您自己的图像，视频或图标。<br><img src="/Mobirise%E6%90%AD%E5%BB%BA%E7%BD%91%E9%A1%B5/2020-05-12-19-18-50.png" class></p><h3 id="设置块参数"><a href="#设置块参数" class="headerlink" title="设置块参数"></a>设置块参数</h3><p>通过蓝色“齿轮”按钮引出的参数面板设置适当的选项。<br><img src="/Mobirise%E6%90%AD%E5%BB%BA%E7%BD%91%E9%A1%B5/2020-05-12-19-19-14.png" class></p><h3 id="预览和发布"><a href="#预览和发布" class="headerlink" title="预览和发布"></a>预览和发布</h3><p>单击网站构建器中的“移动视图”以检查您的网站在不同设备上的显示方式，并发布到本地驱动器，FTP或免费的Github页面。<br><img src="/Mobirise%E6%90%AD%E5%BB%BA%E7%BD%91%E9%A1%B5/2020-05-12-19-19-41.png" class></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http:linbei.top&quot;&gt;本人用Mobirise制作的网站请点击这里查看&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="环境搭建" scheme="https://linbei.top/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="随笔" scheme="https://linbei.top/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="Hexo" scheme="https://linbei.top/tags/Hexo/"/>
    
      <category term="前端" scheme="https://linbei.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Hexo全局添加APlayer音乐播放器</title>
    <link href="https://linbei.top/Hexo%E5%85%A8%E5%B1%80%E6%B7%BB%E5%8A%A0APlayer%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8/"/>
    <id>https://linbei.top/Hexo%E5%85%A8%E5%B1%80%E6%B7%BB%E5%8A%A0APlayer%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8/</id>
    <published>2019-03-18T08:12:57.000Z</published>
    <updated>2020-05-23T01:20:25.408Z</updated>
    
    <content type="html"><![CDATA[<h2 id="相关站点"><a href="#相关站点" class="headerlink" title="相关站点"></a>相关站点</h2><ul><li><a href="https://aplayer.js.org/#/" target="_blank" rel="noopener">APlayer</a></li><li><a href="https://github.com/MoePlayer/APlayer" target="_blank" rel="noopener">APlayer Github</a></li><li><a href="https://github.com/MoePlayer/hexo-tag-aplayer" target="_blank" rel="noopener">Hexo-Tag-Aplayer</a></li><li><a href="https://music.liuzhijin.cn/" target="_blank" rel="noopener">音乐直链搜索工具</a><a id="more"></a><h2 id="基于-Yilia-主题全局添加-APlayer-音乐播放器"><a href="#基于-Yilia-主题全局添加-APlayer-音乐播放器" class="headerlink" title="基于 Yilia 主题全局添加 APlayer 音乐播放器"></a>基于 Yilia 主题全局添加 APlayer 音乐播放器</h2></li></ul><p>编辑文件 hexo-theme-yilia/layout/_partial/left-col.ejs ，在文件的末尾追加以下代码；其中歌曲的歌词文件、封面图片、URL都可以从通过<a href="https://music.liuzhijin.cn/" target="_blank" rel="noopener">音乐直链搜索工具</a>获取，有些音乐由于版权得问题，个人建议还是通过下载到本地比较好。当然如果你的网站是部署再github上就不建议使用本地音乐，会存在卡顿的情况。如果是放在云服务器上，直接下载到本地。提示，如果下面的代码不能将APlayer播放器固定到理想的页面位置，可自行修改 div 标签的样式和 APlayer 的 fixed 参数值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&lt;% <span class="keyword">if</span>(theme.aplayer.enable) &#123; %&gt;</span><br><span class="line">&lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.css"</span>&gt;</span><br><span class="line"><span class="comment">// 这里div的样式是笔者自己修改过的，你可以直接使用APlayer官方的原配置：&lt;div id="aplayer"&gt;&lt;/div&gt;</span></span><br><span class="line">&lt;div id=<span class="string">"aplayer"</span> style=<span class="string">"position:absolute;left;0;bottom:0;"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;script src="https:/</span><span class="regexp">/cdn.jsdelivr.net/</span>npm/aplayer@<span class="number">1.10</span><span class="number">.1</span>/dist/APlayer.min.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;script src="</span>https:<span class="comment">//cdn.jsdelivr.net/npm/color-thief-don@2.0.2/src/color-thief.js"&gt;&lt;/script&gt;</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">const</span> ap = <span class="keyword">new</span> APlayer(&#123;</span><br><span class="line">    container: <span class="built_in">document</span>.getElementById(<span class="string">'aplayer'</span>),</span><br><span class="line">    autoplay: <span class="literal">false</span>, <span class="comment">//自动播放</span></span><br><span class="line">    listFolded: <span class="literal">true</span>, <span class="comment">//播放列表默认折叠</span></span><br><span class="line">    listMaxHeight: <span class="number">90</span>, <span class="comment">//播放列表最大高度</span></span><br><span class="line">    order: <span class="string">'list'</span>, <span class="comment">//音频循环顺序, 可选值: 'list', 'random'</span></span><br><span class="line">    loop: <span class="string">'all'</span>, <span class="comment">//音频循环播放, 可选值: 'all', 'one', 'none'</span></span><br><span class="line">    theme: <span class="string">'#e9e9e9'</span>, <span class="comment">//切换音频时的主题色，优先级低于audio.theme</span></span><br><span class="line">    preload: <span class="string">'none'</span>, <span class="comment">//音频预加载，可选值: 'none', 'metadata', 'auto'</span></span><br><span class="line">    mutex: <span class="literal">true</span>, <span class="comment">//互斥，阻止多个播放器同时播放，当前播放器播放时暂停其他播放器</span></span><br><span class="line">    lrcType: <span class="number">3</span>, <span class="comment">//歌词格式，可选值：3（LRC文件歌词格式），1（JS字符串歌词格式）</span></span><br><span class="line">    volume: <span class="number">0.7</span>, <span class="comment">//默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效</span></span><br><span class="line">    fixed: <span class="literal">false</span>, <span class="comment">//吸底模式（fixed:true），迷你模式（mini:true），普通模式（注释此行或者设置fixed:false）</span></span><br><span class="line">    audio: [&#123;</span><br><span class="line">        name: <span class="string">'平凡之路'</span>,</span><br><span class="line">        artist: <span class="string">'朴树'</span>,</span><br><span class="line">        lrc: <span class="string">'/downloads/lrc/平凡之路-朴树.lrc'</span>,</span><br><span class="line">        cover: <span class="string">'http://p2.music.126.net/W_5XiCv3rGS1-J7EXpHSCQ==/18885211718782327.jpg?param=300x300'</span>,</span><br><span class="line">        url: <span class="string">'http://fs.open.kugou.com/cd5cbe8edb012e4f77b0857cefc0956e/5c66accf/G097/M08/0A/1F/AYcBAFkQGpOAMUpuAEm-3SlWMyk951.mp3'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        name: <span class="string">'后会无期'</span>,</span><br><span class="line">        artist: <span class="string">'G.E.M.邓紫棋'</span>,</span><br><span class="line">        lrc: <span class="string">'/downloads/lrc/后会无期-G.E.M.邓紫棋.lrc'</span>,</span><br><span class="line">        cover: <span class="string">'http://p1.music.126.net/vpvPajo3kn88nHc7jUjeWQ==/5974746185758035.jpg?param=300x300'</span>,</span><br><span class="line">        url: <span class="string">'http://m10.music.126.net/20190215193113/e5afc8b5376136029366f2053cf30f85/ymusic/2c87/6ec3/582e/0d572dcc04f8de34133c0f364b74c30c.mp3'</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//实现切换音频时，根据音频的封面图片自适应主题色</span></span><br><span class="line">  <span class="keyword">const</span> colorThief = <span class="keyword">new</span> ColorThief();</span><br><span class="line">  <span class="keyword">const</span> setTheme = <span class="function">(<span class="params">index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!ap.list.audios[index].theme) &#123;</span><br><span class="line">      colorThief.getColorAsync(ap.list.audios[index].cover, <span class="function"><span class="keyword">function</span>(<span class="params">color</span>) </span>&#123;</span><br><span class="line">        ap.theme(<span class="string">`rgb(<span class="subst">$&#123;color[<span class="number">0</span>]&#125;</span>, <span class="subst">$&#123;color[<span class="number">1</span>]&#125;</span>, <span class="subst">$&#123;color[<span class="number">2</span>]&#125;</span>)`</span>, index);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  setTheme(ap.list.index);</span><br><span class="line">  ap.on(<span class="string">'listswitch'</span>, (data) =&gt; &#123;</span><br><span class="line">    setTheme(data.index);</span><br><span class="line">  &#125;);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;% &#125; %&gt;</span></span><br></pre></td></tr></table></figure><h2 id="配置-Yilia-主题"><a href="#配置-Yilia-主题" class="headerlink" title="配置 Yilia 主题"></a>配置 Yilia 主题</h2><p>编辑 Yilia 主题的配置文件 hexo-theme-yilia/_config.yml，在文件末尾追加以下内容。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">aplayer:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>如果你使用了yilia主题的相册功能，加了播放器后会出现原有相册显示不了的问题。当把hexo-tag-aplayer 配置好并且用几个页面测试后，发现相册功能失效了，查找问题后发现在ins.js中自动加了下面这些代码导致的失效。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"https://cdn.jsdelivr.net/npm/aplayer@1.10/dist/APlayer.min.css"</span>&gt;</span><br><span class="line">&lt;script src=<span class="string">"https://cdn.jsdelivr.net/npm/aplayer@1.10/dist/APlayer.min.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;script src="https:/</span><span class="regexp">/cdn.jsdelivr.net/</span>npm/meting@<span class="number">1.2</span>/dist/Meting.min.js<span class="string">"&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><p>经过一番在网上寻找后无果后，于是决定仔细研读官方文档，查看官方的中文文档后发现，可能是插件的自动脚本插入功能导致的，使得ins.js中自动插入了代码，于是关闭该功能试试：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">aplayer:</span></span><br><span class="line">  <span class="attr">asset_inject:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>这段配置要加载博客根目录的配置文件中，而不是主题的配置文件。</p><h2 id="重新编译-Hexo"><a href="#重新编译-Hexo" class="headerlink" title="重新编译 Hexo"></a>重新编译 Hexo</h2><p>提示，若音频文件使用的是本地资源文件，同时通过“hexo server”提供Web服务，那么则将无法通过APlayer的进度条调节播放进度，此时需要使用Nginx、Apache等Web服务器。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进入博客的根目录</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">cd</span> /blogroot</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 通过Hexo清理Public目录</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> hexo clean</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 通过Hexo构建静态文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> hexo generate</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 通过Hexo启动服务</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> hexo server</span></span><br></pre></td></tr></table></figure><h2 id="最终效果图"><a href="#最终效果图" class="headerlink" title="最终效果图"></a>最终效果图</h2><img src="/Hexo%E5%85%A8%E5%B1%80%E6%B7%BB%E5%8A%A0APlayer%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8/2020-03-18-16-17-08.png" class>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;相关站点&quot;&gt;&lt;a href=&quot;#相关站点&quot; class=&quot;headerlink&quot; title=&quot;相关站点&quot;&gt;&lt;/a&gt;相关站点&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://aplayer.js.org/#/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;APlayer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/MoePlayer/APlayer&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;APlayer Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/MoePlayer/hexo-tag-aplayer&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo-Tag-Aplayer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://music.liuzhijin.cn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;音乐直链搜索工具&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="环境搭建" scheme="https://linbei.top/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="Hexo" scheme="https://linbei.top/tags/Hexo/"/>
    
      <category term="阿里云" scheme="https://linbei.top/tags/%E9%98%BF%E9%87%8C%E4%BA%91/"/>
    
  </entry>
  
  <entry>
    <title>SQL Server 2017搭建主从备份</title>
    <link href="https://linbei.top/SQL%20Server%202017%E6%90%AD%E5%BB%BA%E4%B8%BB%E4%BB%8E%E5%A4%87%E4%BB%BD/"/>
    <id>https://linbei.top/SQL%20Server%202017%E6%90%AD%E5%BB%BA%E4%B8%BB%E4%BB%8E%E5%A4%87%E4%BB%BD/</id>
    <published>2019-03-15T02:32:57.000Z</published>
    <updated>2020-05-23T01:20:25.611Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于日志传输"><a href="#关于日志传输" class="headerlink" title="关于日志传输"></a>关于日志传输</h2><p>和Oracle DG，Mysql主从一样，SQL Server也支持主从的高可用。进一步提高数据的安全性和业务的高可用。通过将主库上的日志传输到备用实例上，从而达到主备库数据的一致性。<br>优点：<br><a id="more"></a></p><ul><li>可以为一个主库添加多个备库，从而提高数据灾难性恢复的解决方法。</li><li>和其他数据库主从一样，从库可以提高只读访问(在还原数据期间)。</li><li>可以自定义数据延迟应用时间。这样好处就是如果主库错误修改了数据，而从库还没有应用修改的数据，那么就可以通过从库来把错误环境的数据还原回来。<br>日志传输过程</li><li>在主服务器实例中备份事务日志。</li><li>将事务日志文件复制到辅助服务器实例。</li><li>在辅助服务器实例中还原日志备份。<br>日志可传送到多个辅助服务器实例。 在这些情况下，将针对每个辅助服务器实例重复执行操作 2 和操作 3。 日志传送配置不会自动从主库故障转移到辅助服务器。 如果主数据库变为不可用，可手动切换到任意一个从库。 下图是由一个主库，三个从库组成的主从环境。<img src="/SQL%20Server%202017%E6%90%AD%E5%BB%BA%E4%B8%BB%E4%BB%8E%E5%A4%87%E4%BB%BD/2020-03-15-11-02-29.png" class></li></ul><h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><p>主数据库必须处于Full恢复模式或大容量日志恢复模式。 在配置日志传送之前，必须创建共享备份目录，以便备库可以访问事务日志备份。 这是对生成事务日志备份的目录的共享。 例如，如果将事务日志备份到目录 E:\log_backup，则可以对该目录创建共享。</p><h2 id="搭建主从"><a href="#搭建主从" class="headerlink" title="搭建主从"></a>搭建主从</h2><h3 id="创建管理员【可选】"><a href="#创建管理员【可选】" class="headerlink" title="创建管理员【可选】"></a>创建管理员【可选】</h3><p>下面步骤是可选的，使用administrator管理员账户也是可以的。如果是使用administrator用户，则下文中关于sqladmin用户权限相关的，替换为administrator。</p><ul><li>主从两台分别创建sqladmin用户加入administrators组删除默认的users组，并且设置”密码永不过期”和”用户不能更改密码” 为sqladmin创建一个密码 win+R，输入lusrmgr.msc</li><li>设置用户权限 右击用户，点击“属性”，将默认的USERS组删除，新增Administrators组。<img src="/SQL%20Server%202017%E6%90%AD%E5%BB%BA%E4%B8%BB%E4%BB%8E%E5%A4%87%E4%BB%BD/2020-03-15-11-15-38.png" class></li><li>设置共享目录 在主或者从服务器上创建日志存放目录E:\log_backup<img src="/SQL%20Server%202017%E6%90%AD%E5%BB%BA%E4%B8%BB%E4%BB%8E%E5%A4%87%E4%BB%BD/2020-03-15-11-16-14.png" class>在“高级共享”窗口中，勾选“共享此文件夹”选项，然后单机“权限”按钮对该共享文件夹的权限进行设置。需要让sqladmin用户具有完全控制该文件夹的权限，先将默认的“erverone”用户删除，然后添加sqladmin,administaor用户，并在“sqladmin,administaor”的权限中勾选“完全控制”，“更改”和“读取”项，然后单击两次“确定”按钮保存共享设置。<img src="/SQL%20Server%202017%E6%90%AD%E5%BB%BA%E4%B8%BB%E4%BB%8E%E5%A4%87%E4%BB%BD/2020-03-15-11-16-30.png" class>在NTFS文件系统中，还需要设置用户对该目录的安全权限，如果安全权限不够，系统在写入备份文件的时候会报没有权限的错误。 可以在“安全”选项卡，单机“编辑”按钮，在“log_backup的权限”界面，单击“按钮”，添加sqladmin用户，然后在“sqladmin的权限”中选择“完全控制”权限，单机“确定”按钮保存权限信息。</li><li>配置SQL Server启动模式<img src="/SQL%20Server%202017%E6%90%AD%E5%BB%BA%E4%B8%BB%E4%BB%8E%E5%A4%87%E4%BB%BD/2020-03-15-11-16-59.png" class></li><li>配置日志传输 右击数据库服务器实例，选择“属性”选项，在弹出的“服务器属性”界面中，单机左侧的“安全性”，然后在右侧窗口中的“服务器身份验证”中选择“SQLServer和Windows身份验证模式”，并勾选“服务器代理账户”中的“启用服务器代理账户”选项。输入正确的“代理账号”和“密码”，单击“确定”按钮保存配置信息。<img src="/SQL%20Server%202017%E6%90%AD%E5%BB%BA%E4%B8%BB%E4%BB%8E%E5%A4%87%E4%BB%BD/2020-03-15-11-17-14.png" class></li><li>在主数据库服务器中配置要同步的数据库AppsHK属性<img src="/SQL%20Server%202017%E6%90%AD%E5%BB%BA%E4%B8%BB%E4%BB%8E%E5%A4%87%E4%BB%BD/2020-03-15-11-17-37.png" class></li><li>设置完之后选择“事务日志传送”，勾选“将此数据库启用未日志传送配置中的主数据库”选项，单击“事务日志备份”中的“备份设置按钮”，打开“事务日志备份设置”界面<img src="/SQL%20Server%202017%E6%90%AD%E5%BB%BA%E4%B8%BB%E4%BB%8E%E5%A4%87%E4%BB%BD/2020-03-15-11-18-03.png" class><img src="/SQL%20Server%202017%E6%90%AD%E5%BB%BA%E4%B8%BB%E4%BB%8E%E5%A4%87%E4%BB%BD/2020-03-15-11-18-12.png" class></li><li>主库上备份文件夹的网路路径可以在备库上进行测试，看备库能否访问 备库上进行操作：<img src="/SQL%20Server%202017%E6%90%AD%E5%BB%BA%E4%B8%BB%E4%BB%8E%E5%A4%87%E4%BB%BD/2020-03-15-11-18-29.png" class></li><li>点击计划,在“作业计划属性”界面，确认“计划类型”为重复执行，为测试效果明显，设置为15秒执行一次作业计划。最后确认“持续时间”，根据自己需要设置，如果一直备份的话，可以设置为“无结束日期”。<img src="/SQL%20Server%202017%E6%90%AD%E5%BB%BA%E4%B8%BB%E4%BB%8E%E5%A4%87%E4%BB%BD/2020-03-15-11-18-49.png" class></li><li>设置完成，确认之后再次打开“事务日志备份设置”界面，则备份作业的作业名称后面变成“编辑作业”按钮，单击进去，将“所有者”修改为sqladmin。<br>如果没有sqladmin先添加<img src="/SQL%20Server%202017%E6%90%AD%E5%BB%BA%E4%B8%BB%E4%BB%8E%E5%A4%87%E4%BB%BD/2020-03-15-11-19-05.png" class><img src="/SQL%20Server%202017%E6%90%AD%E5%BB%BA%E4%B8%BB%E4%BB%8E%E5%A4%87%E4%BB%BD/2020-03-15-11-19-13.png" class><img src="/SQL%20Server%202017%E6%90%AD%E5%BB%BA%E4%B8%BB%E4%BB%8E%E5%A4%87%E4%BB%BD/2020-03-15-11-19-22.png" class></li><li>单击数据库属性界面的“辅助数据库”中的“添加”按钮，打开“辅助数据库设置”窗口。<img src="/SQL%20Server%202017%E6%90%AD%E5%BB%BA%E4%B8%BB%E4%BB%8E%E5%A4%87%E4%BB%BD/2020-03-15-11-19-38.png" class><img src="/SQL%20Server%202017%E6%90%AD%E5%BB%BA%E4%B8%BB%E4%BB%8E%E5%A4%87%E4%BB%BD/2020-03-15-11-19-44.png" class><img src="/SQL%20Server%202017%E6%90%AD%E5%BB%BA%E4%B8%BB%E4%BB%8E%E5%A4%87%E4%BB%BD/2020-03-15-11-19-51.png" class></li><li>设置完之后点击确定按钮，在数据库属性配置界面将配置好的脚本保存到本地，最后点击确定<img src="/SQL%20Server%202017%E6%90%AD%E5%BB%BA%E4%B8%BB%E4%BB%8E%E5%A4%87%E4%BB%BD/2020-03-15-11-20-13.png" class>到此数据库主从配置完成，可以在主库进行操作，在从库上查看对应的数据是否同步，如果没有同步成功，可以在从库上查看同步任务状态，查看失败原因。<img src="/SQL%20Server%202017%E6%90%AD%E5%BB%BA%E4%B8%BB%E4%BB%8E%E5%A4%87%E4%BB%BD/2020-03-15-11-20-38.png" class></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;关于日志传输&quot;&gt;&lt;a href=&quot;#关于日志传输&quot; class=&quot;headerlink&quot; title=&quot;关于日志传输&quot;&gt;&lt;/a&gt;关于日志传输&lt;/h2&gt;&lt;p&gt;和Oracle DG，Mysql主从一样，SQL Server也支持主从的高可用。进一步提高数据的安全性和业务的高可用。通过将主库上的日志传输到备用实例上，从而达到主备库数据的一致性。&lt;br&gt;优点：&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据库" scheme="https://linbei.top/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="随笔" scheme="https://linbei.top/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="SqlServer" scheme="https://linbei.top/tags/SqlServer/"/>
    
  </entry>
  
  <entry>
    <title>SQL死锁产生原因和解决方法</title>
    <link href="https://linbei.top/SQL%E6%AD%BB%E9%94%81%E4%BA%A7%E7%94%9F%E5%8E%9F%E5%9B%A0%E5%92%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>https://linbei.top/SQL%E6%AD%BB%E9%94%81%E4%BA%A7%E7%94%9F%E5%8E%9F%E5%9B%A0%E5%92%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</id>
    <published>2019-03-13T12:32:57.000Z</published>
    <updated>2020-05-23T01:20:25.658Z</updated>
    
    <content type="html"><![CDATA[<h2 id="死锁现象"><a href="#死锁现象" class="headerlink" title="死锁现象"></a>死锁现象</h2><p><strong>表现一</strong>：一个用户A 访问表A(锁住了表A)，然后又访问表B，另一个用户B 访问表B(锁住了表B)，然后企图访问表A，这时用户A由于用户B已经锁住表B，它必须等待用户B释放表B，才能继续，好了他老人家就只好老老实实在这等了，同样用户B要等用户A释放表A才能继续这就死锁了。</p><ul><li>解决方法<br>这种死锁是由于你的程序的BUG产生的，除了调整你的程序的逻辑别无他法<br>　　仔细分析你程序的逻辑：<br>　　1：尽量避免同时锁定两个资源<br>　　2: 必须同时锁定两个资源时，要保证在任何时刻都应该按照相同的顺序来锁定资源.<a id="more"></a><strong>表现二</strong>：用户A读一条纪录，然后修改该条纪录。这时用户B修改该条纪录，这里用户A的事务里锁的性质由共享锁企图上升到独占锁(for update),而用户B里的独占锁由于A有共享锁存在所以必须等A释放掉共享锁，而A由于B的独占锁而无法上升的独占锁也就不可能释放共享锁，于是出现了死锁。<br>　　这种死锁比较隐蔽，但其实在稍大点的项目中经常发生。其实这种死锁也可以叫做书签查找所引起的。<img src="/SQL%E6%AD%BB%E9%94%81%E4%BA%A7%E7%94%9F%E5%8E%9F%E5%9B%A0%E5%92%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/2020-03-13-21-00-04.png" class>解决方法：<br>　　让用户A的事务（即先读后写类型的操作),在select 时就是用Update lock</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> table1 <span class="keyword">with</span>(updlock) <span class="keyword">where</span> ....</span><br></pre></td></tr></table></figure><p>死锁，简而言之，两个或者多个trans，同时请求对方正在请求的某个对象，导致双方互相等待。简单的例子如下：</p><div class="table-container"><table><thead><tr><th style="text-align:left">trans1</th><th style="text-align:left">trans2</th></tr></thead><tbody><tr><td style="text-align:left">1.IDBConnection.BeginTransaction</td><td style="text-align:left">2.IDBConnection.BeginTransaction</td></tr><tr><td style="text-align:left">2.update table A</td><td style="text-align:left">2.update table B</td></tr><tr><td style="text-align:left"><font color="#FF0000"> 3.update table B </font></td><td style="text-align:left"><font color="#FF0000"> 3.update table A </font></td></tr><tr><td style="text-align:left"><font color="#FF0000"> 4.IDBConnection.Commit </font></td><td style="text-align:left"><font color="#FF0000"> 4.IDBConnection.Commit </font></td></tr></tbody></table></div><font color="#FF0000"> 那么，很容易看到，如果trans1和trans2，分别到达了step3，那么trans1会请求对于B的X锁，trans2会请求对于A的X锁，而二者的锁在step2上已经被对方分别持有了。由于得不到锁，后面的Commit无法执行，这样双方开始死锁。 </font><p> 好，我们看一个简单的例子，来解释一下，应该如何解决死锁问题。</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- Batch #1</span></span><br><span class="line"> <span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> deadlocktest</span><br><span class="line"> <span class="keyword">GO</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">USE</span> deadlocktest</span><br><span class="line"> <span class="keyword">SET</span> NOCOUNT <span class="keyword">ON</span></span><br><span class="line"> DBCC TRACEON (<span class="number">1222</span>, <span class="number">-1</span>)</span><br><span class="line"> <span class="comment">-- 在SQL2005中，增加了一个新的dbcc参数，就是1222，原来在2000下，我们知道，可以执行dbcc</span></span><br><span class="line"> <span class="comment">-- traceon(1204,3605,-1)看到所有的死锁信息。SqlServer 2005中，对于1204进行了增强，这就是1222。</span></span><br><span class="line"> <span class="keyword">GO</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">IF</span> OBJECT_ID (<span class="string">'t1'</span>) <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DROP</span> <span class="keyword">TABLE</span> t1</span><br><span class="line"> <span class="keyword">IF</span> OBJECT_ID (<span class="string">'p1'</span>) <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DROP</span> PROC p1</span><br><span class="line"> <span class="keyword">IF</span> OBJECT_ID (<span class="string">'p2'</span>) <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DROP</span> PROC p2</span><br><span class="line"> <span class="keyword">GO</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t1 (c1 <span class="built_in">int</span>, c2 <span class="built_in">int</span>, c3 <span class="built_in">int</span>, c4 <span class="built_in">char</span>(<span class="number">5000</span>))</span><br><span class="line"> <span class="keyword">GO</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">DECLARE</span> @x <span class="built_in">int</span></span><br><span class="line"> <span class="keyword">SET</span> @x = <span class="number">1</span></span><br><span class="line"> <span class="keyword">WHILE</span> (@x &lt;= <span class="number">1000</span>) <span class="keyword">BEGIN</span></span><br><span class="line">          <span class="keyword">INSERT</span> <span class="keyword">INTO</span> t1 <span class="keyword">VALUES</span> (@x*<span class="number">2</span>, @x*<span class="number">2</span>, @x*<span class="number">2</span>, @x*<span class="number">2</span>)</span><br><span class="line">          <span class="keyword">SET</span> @x = @x + <span class="number">1</span></span><br><span class="line"> <span class="keyword">END</span></span><br><span class="line"> <span class="keyword">GO</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">CREATE</span> CLUSTERED <span class="keyword">INDEX</span> cidx <span class="keyword">ON</span> t1 (c1)</span><br><span class="line"> <span class="keyword">CREATE</span> NONCLUSTERED <span class="keyword">INDEX</span> idx1 <span class="keyword">ON</span> t1 (c2)</span><br><span class="line"> <span class="keyword">GO</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="keyword">CREATE</span> PROC p1 @p1 <span class="built_in">int</span> <span class="keyword">AS</span> <span class="keyword">SELECT</span> c2, c3 <span class="keyword">FROM</span> t1 <span class="keyword">WHERE</span> c2 <span class="keyword">BETWEEN</span> @p1 <span class="keyword">AND</span> @p1+<span class="number">1</span></span><br><span class="line"> <span class="keyword">GO</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="keyword">CREATE</span> PROC p2 @p1 <span class="built_in">int</span> <span class="keyword">AS</span></span><br><span class="line">          <span class="keyword">UPDATE</span> t1 <span class="keyword">SET</span> c2 = c2+<span class="number">1</span> <span class="keyword">WHERE</span> c1 = @p1</span><br><span class="line">          <span class="keyword">UPDATE</span> t1 <span class="keyword">SET</span> c2 = c2<span class="number">-1</span> <span class="keyword">WHERE</span> c1 = @p1</span><br><span class="line"> <span class="keyword">GO</span></span><br></pre></td></tr></table></figure><p>上述sql创建一个deadlock的示范数据库，插入了1000条数据，并在表t1上建立了c1列的聚集索引，和c2列的非聚集索引。另外创建了两个sp，分别是从t1中select数据和update数据。</p><p>   好，打开一个新的查询窗口，我们开始执行下面的query：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- Batch #2</span></span><br><span class="line">  <span class="keyword">USE</span> deadlocktest</span><br><span class="line">  <span class="keyword">SET</span> NOCOUNT <span class="keyword">ON</span></span><br><span class="line">  <span class="keyword">WHILE</span> (<span class="number">1</span>=<span class="number">1</span>) EXEC p2 <span class="number">4</span></span><br><span class="line">  <span class="keyword">GO</span></span><br></pre></td></tr></table></figure><p>  开始执行后，然后我们打开第三个查询窗口，执行下面的query：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- Batch #3</span></span><br><span class="line"><span class="keyword">USE</span> deadlocktest</span><br><span class="line"><span class="keyword">SET</span> NOCOUNT <span class="keyword">ON</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="comment">#t1 (c2 int, c3 int)</span></span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">WHILE</span> (<span class="number">1</span>=<span class="number">1</span>) <span class="keyword">BEGIN</span></span><br><span class="line">          <span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="comment">#t1 EXEC p1 4</span></span><br><span class="line">          <span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> <span class="comment">#t1</span></span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"><span class="keyword">GO</span></span><br></pre></td></tr></table></figure><p> 开始执行，哈哈，很快，我们看到了这样的错误信息<br> Msg 1205, Level 13, State 51, Procedure p1, Line 4<br>   Transaction (Process ID 54) was deadlocked on lock resources with another process and has been chosen as the deadlock victim. Rerun the transaction.</p><p>pid54发现了死锁。<br>   那么，我们该如何解决它？</p><p>   在SqlServer 2005中，我们可以这么做：</p><ul><li>在trans3的窗口中，选择EXEC p1 4，然后right click，看到了菜单了吗？选择Analyse Query in Database Engine Tuning Advisor。</li><li>注意右面的窗口中，wordload有三个选择：负载文件、表、查询语句，因为我们选择了查询语句的方式，所以就不需要修改这个radio option了。</li><li>点左上角的Start Analysis按钮</li><li>出现了一个分析结果窗口，其中，在Index Recommendations中，我们发现了一条信息：大意是，在表t1上增加一个非聚集索引索引：t2+t1。</li><li>在当前窗口的上方菜单上，选择Action菜单，选择Apply Recommendations，系统会自动创建这个索引。重新运行batch，呵呵，死锁没有了。</li></ul><p>为什么会死锁呢？再回顾一下两个sp的写法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> PROC p1 @p1 <span class="built_in">int</span> <span class="keyword">AS</span></span><br><span class="line">      <span class="keyword">SELECT</span> c2, c3 <span class="keyword">FROM</span> t1 <span class="keyword">WHERE</span> c2 <span class="keyword">BETWEEN</span> @p1 <span class="keyword">AND</span> @p1+<span class="number">1</span></span><br><span class="line">   <span class="keyword">GO</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="keyword">CREATE</span> PROC p2 @p1 <span class="built_in">int</span> <span class="keyword">AS</span></span><br><span class="line">         <span class="keyword">UPDATE</span> t1 <span class="keyword">SET</span> c2 = c2+<span class="number">1</span> <span class="keyword">WHERE</span> c1 = @p1</span><br><span class="line">         <span class="keyword">UPDATE</span> t1 <span class="keyword">SET</span> c2 = c2<span class="number">-1</span> <span class="keyword">WHERE</span> c1 = @p1</span><br><span class="line">   <span class="keyword">GO</span></span><br></pre></td></tr></table></figure><p>很奇怪吧！p1没有insert，没有delete，没有update，只是一个select，p2才是update。这个和我们前面说过的，trans1里面updata A，update B；trans2里面upate B，update A，根本不贴边啊！<br>   那么，什么导致了死锁？</p><p>   需要从事件日志中，看sql的死锁信息:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Spid X is running this query (line 2 of proc [p1], inputbuffer “… EXEC p1 4 …”):</span><br><span class="line">   <span class="keyword">SELECT</span> c2, c3 <span class="keyword">FROM</span> t1 <span class="keyword">WHERE</span> c2 <span class="keyword">BETWEEN</span> @p1 <span class="keyword">AND</span> @p1+<span class="number">1</span></span><br><span class="line">   Spid Y <span class="keyword">is</span> running this <span class="keyword">query</span> (line <span class="number">2</span> <span class="keyword">of</span> proc [p2], inputbuffer “EXEC p2 <span class="number">4</span>”):</span><br><span class="line">   <span class="keyword">UPDATE</span> t1 <span class="keyword">SET</span> c2 = c2+<span class="number">1</span> <span class="keyword">WHERE</span> c1 = @p1</span><br><span class="line"></span><br><span class="line">   The <span class="keyword">SELECT</span> <span class="keyword">is</span> waiting <span class="keyword">for</span> a <span class="keyword">Shared</span> <span class="keyword">KEY</span> <span class="keyword">lock</span> <span class="keyword">on</span> <span class="keyword">index</span> t1.cidx.  The <span class="keyword">UPDATE</span> holds a conflicting X lock.</span><br><span class="line">   The <span class="keyword">UPDATE</span> <span class="keyword">is</span> waiting <span class="keyword">for</span> an eXclusive <span class="keyword">KEY</span> <span class="keyword">lock</span> <span class="keyword">on</span> <span class="keyword">index</span> t1.idx1.  The <span class="keyword">SELECT</span> holds a conflicting S lock.</span><br></pre></td></tr></table></figure><p>首先，我们看看p1的执行计划。怎么看呢？可以执行set statistics profile on，这句就可以了。下面是p1的执行计划</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> c2, c3 <span class="keyword">FROM</span> t1 <span class="keyword">WHERE</span> c2 <span class="keyword">BETWEEN</span> @p1 <span class="keyword">AND</span> @p1+<span class="number">1</span></span><br><span class="line">        <span class="keyword">Nested</span> Loops(<span class="keyword">Inner</span> <span class="keyword">Join</span>, <span class="keyword">OUTER</span> <span class="keyword">REFERENCES</span>:([Uniq1002], [t1].[c1]))</span><br><span class="line">               <span class="keyword">Index</span> Seek(<span class="keyword">OBJECT</span>:([t1].[idx1]), SEEK:([t1].[c2] &gt;= [@p1] <span class="keyword">AND</span> [t1].[c2] &lt;= [@p1]+(<span class="number">1</span>)) ORDERED FORWARD)</span><br><span class="line">                     Clustered <span class="keyword">Index</span> Seek(<span class="keyword">OBJECT</span>:([t1].[cidx]), SEEK:([t1].[c1]=[t1].[c1] <span class="keyword">AND</span> [Uniq1002]=[Uniq1002]) LOOKUP ORDERED FORWARD)</span><br></pre></td></tr></table></figure><p>我们看到了一个nested loops，第一行，利用索引t1.c2来进行seek，seek出来的那个rowid，在第二行中，用来通过聚集索引来查找整行的数据。这是什么？就是bookmark lookup啊！为什么？因为我们需要的c2、c3不能完全的被索引t1.c1带出来，所以需要书签查找。<br>   好，我们接着看p2的执行计划。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> t1 <span class="keyword">SET</span> c2 = c2+<span class="number">1</span> <span class="keyword">WHERE</span> c1 = @p1</span><br><span class="line">         Clustered <span class="keyword">Index</span> <span class="keyword">Update</span>(<span class="keyword">OBJECT</span>:([t1].[cidx]), <span class="keyword">OBJECT</span>:([t1].[idx1]), <span class="keyword">SET</span>:([t1].[c2] = [Expr1004]))</span><br><span class="line">               <span class="keyword">Compute</span> Scalar(<span class="keyword">DEFINE</span>:([Expr1013]=[Expr1013]))</span><br><span class="line">                     <span class="keyword">Compute</span> Scalar(<span class="keyword">DEFINE</span>:([Expr1004]=[t1].[c2]+(<span class="number">1</span>), [Expr1013]=<span class="keyword">CASE</span> <span class="keyword">WHEN</span> <span class="keyword">CASE</span> <span class="keyword">WHEN</span> ...</span><br><span class="line">                           Top(ROWCOUNT est <span class="number">0</span>)</span><br><span class="line">                                 Clustered <span class="keyword">Index</span> Seek(<span class="keyword">OBJECT</span>:([t1].[cidx]), SEEK:([t1].[c1]=[@p1]) ORDERED FORWARD)</span><br></pre></td></tr></table></figure><p>通过聚集索引的seek找到了一行，然后开始更新。这里注意的是，update的时候，它会申请一个针对clustered index的X锁的。</p><p>   实际上到这里，我们就明白了为什么update会对select产生死锁。update的时候，会申请一个针对clustered index的X锁，这样就阻塞住了（注意，不是死锁！）select里面最后的那个clustered index seek。死锁的另一半在哪里呢？注意我们的select语句，c2存在于索引idx1中，c1是一个聚集索引cidx。问题就在这里！我们在p2中更新了c2这个值，所以sqlserver会自动更新包含c2列的非聚集索引：idx1。而idx1在哪里？就在我们刚才的select语句中。而对这个索引列的更改，意味着索引集合的某个行或者某些行，需要重新排列，而重新排列，需要一个X锁。<br>   SO………，问题就这样被发现了。</p><p>   总结一下，就是说，某个query使用非聚集索引来select数据，那么它会在非聚集索引上持有一个S锁。当有一些select的列不在该索引上，它需要根据rowid找到对应的聚集索引的那行，然后找到其他数据。而此时，第二个的查询中，update正在聚集索引上忙乎：定位、加锁、修改等。但因为正在修改的某个列，是另外一个非聚集索引的某个列，所以此时，它需要同时更改那个非聚集索引的信息，这就需要在那个非聚集索引上，加第二个X锁。select开始等待update的X锁，update开始等待select的S锁，死锁，就这样发生鸟。<br>   那么，为什么我们增加了一个非聚集索引，死锁就消失鸟？我们看一下，按照上文中自动增加的索引之后的执行计划：</p>   <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> c2, c3 <span class="keyword">FROM</span> t1 <span class="keyword">WHERE</span> c2 <span class="keyword">BETWEEN</span> @p1 <span class="keyword">AND</span> @p1+<span class="number">1</span></span><br><span class="line">   <span class="keyword">Index</span> Seek(<span class="keyword">OBJECT</span>:([deadlocktest].[dbo].[t1].[_dta_index_t1_7_2073058421__K2_K1_3]), SEEK:([deadlocktest].[dbo].[t1].[c2] &gt;= [@p1] <span class="keyword">AND</span> [deadlocktest].[dbo].[t1].[c2] &lt;= [@p1]+(<span class="number">1</span>)) ORDERED FORWARD)</span><br></pre></td></tr></table></figure><p>哦，对于clustered index的需求没有了，因为增加的覆盖索引已经足够把所有的信息都select出来。就这么简单。</p><p>   实际上，在sqlserver 2005中，如果用profiler来抓eventid：1222，那么会出现一个死锁的图，很直观的说。</p><p>   下面的方法，有助于将死锁减至最少（详细情况，请看SQLServer联机帮助，搜索：将死锁减至最少即可。</p><ul><li>按同一顺序访问对象。</li><li>避免事务中的用户交互。</li><li>保持事务简短并处于一个批处理中。</li><li>使用较低的隔离级别。</li><li>使用基于行版本控制的隔离级别。</li><li>将 READ_COMMITTED_SNAPSHOT 数据库选项设置为 ON，使得已提交读事务使用行版本控制。</li><li>使用快照隔离。</li><li>使用绑定连接</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;死锁现象&quot;&gt;&lt;a href=&quot;#死锁现象&quot; class=&quot;headerlink&quot; title=&quot;死锁现象&quot;&gt;&lt;/a&gt;死锁现象&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;表现一&lt;/strong&gt;：一个用户A 访问表A(锁住了表A)，然后又访问表B，另一个用户B 访问表B(锁住了表B)，然后企图访问表A，这时用户A由于用户B已经锁住表B，它必须等待用户B释放表B，才能继续，好了他老人家就只好老老实实在这等了，同样用户B要等用户A释放表A才能继续这就死锁了。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;解决方法&lt;br&gt;这种死锁是由于你的程序的BUG产生的，除了调整你的程序的逻辑别无他法&lt;br&gt;　　仔细分析你程序的逻辑：&lt;br&gt;　　1：尽量避免同时锁定两个资源&lt;br&gt;　　2: 必须同时锁定两个资源时，要保证在任何时刻都应该按照相同的顺序来锁定资源.&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="数据库" scheme="https://linbei.top/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="随笔" scheme="https://linbei.top/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="SqlServer" scheme="https://linbei.top/tags/SqlServer/"/>
    
  </entry>
  
  <entry>
    <title>内网穿透工具Ngrock和frp</title>
    <link href="https://linbei.top/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%B7%A5%E5%85%B7/"/>
    <id>https://linbei.top/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%B7%A5%E5%85%B7/</id>
    <published>2019-03-13T09:32:57.000Z</published>
    <updated>2020-05-23T01:20:25.658Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Sunny-Ngrok使用流程如下：https-www-ngrok-cc-user"><a href="#Sunny-Ngrok使用流程如下：https-www-ngrok-cc-user" class="headerlink" title="Sunny-Ngrok使用流程如下：https://www.ngrok.cc/user"></a>Sunny-Ngrok使用流程如下：<a href="https://www.ngrok.cc/user" target="_blank" rel="noopener">https://www.ngrok.cc/user</a></h2><h3 id="点击网址，并进行注册"><a href="#点击网址，并进行注册" class="headerlink" title="点击网址，并进行注册"></a>点击网址，并进行注册</h3><a id="more"></a><img src="/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%B7%A5%E5%85%B7/2020-03-13-16-59-05.png" class><h3 id="获取免费的，点击购买"><a href="#获取免费的，点击购买" class="headerlink" title="获取免费的，点击购买"></a>获取免费的，点击购买</h3><img src="/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%B7%A5%E5%85%B7/2020-03-13-16-59-40.png" class><h3 id="前置域名"><a href="#前置域名" class="headerlink" title="前置域名"></a>前置域名</h3><p>输入xxxx 会变成 <a href="http://xxxx.free.idcfengye.com" target="_blank" rel="noopener">http://xxxx.free.idcfengye.com</a> 本地端口：由于我是本地测试，所以使用127.0.0.1:8080<br><img src="/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%B7%A5%E5%85%B7/2020-03-13-17-00-50.png" class></p><h3 id="进入隧道管理，可以查看相关信息。并下载客户端"><a href="#进入隧道管理，可以查看相关信息。并下载客户端" class="headerlink" title="进入隧道管理，可以查看相关信息。并下载客户端"></a>进入隧道管理，可以查看相关信息。并下载客户端</h3><p>其中有各种系统版本的，本人下载的是win版本的<br><img src="/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%B7%A5%E5%85%B7/2020-03-13-17-02-02.png" class></p><h3 id="启动cmd窗口。在窗口数据渠道id-多个用逗号隔开"><a href="#启动cmd窗口。在窗口数据渠道id-多个用逗号隔开" class="headerlink" title="启动cmd窗口。在窗口数据渠道id 多个用逗号隔开"></a>启动cmd窗口。在窗口数据渠道id 多个用逗号隔开</h3><img src="/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%B7%A5%E5%85%B7/2020-03-13-17-02-43.png" class><h3 id="ok-域名就是之前输入的-前置域名。将域名填写到支付宝的配置文件中-即可"><a href="#ok-域名就是之前输入的-前置域名。将域名填写到支付宝的配置文件中-即可" class="headerlink" title="ok. 域名就是之前输入的 前置域名。将域名填写到支付宝的配置文件中 即可"></a>ok. 域名就是之前输入的 前置域名。将域名填写到支付宝的配置文件中 即可</h3><img src="/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%B7%A5%E5%85%B7/2020-03-13-17-03-17.png" class><p>对于没有云服务器的个人来说，使用Sunny-Ngrock还是比较方便的，其中有免费和付费的。个人使用过后感觉由于是免费的用的人也比较多，有时候会比较卡，会出现经常卡顿或者掉线的情况。</p><h2 id="frp-nginx-配置多人共用的http-内网穿透服务"><a href="#frp-nginx-配置多人共用的http-内网穿透服务" class="headerlink" title="frp + nginx 配置多人共用的http 内网穿透服务"></a>frp + nginx 配置多人共用的http 内网穿透服务</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本人由于在调式微信公众号和小程序，所以要用到内网穿透，这样调试起来就比较容易一些。<br>frp 是一个用Go语言开发的，可用于内网穿透的高性能的反向代理应用，支持 tcp, udp 、 http 和 https。可将一个部署在本机的web服务映射到外网。<br>本文主要讲如何基于frp + nginx 配置http 内网穿透服务，承载多人同时使用，从而支持微信公众号，微信小程序的本地开发调试<br>所需资源：</p><ul><li>一台公网服务器或者VPS（本人用的 阿里云的主机）</li><li>一个指向到此台公网服务器的域名（本文以ikeysun.com 为例）</li></ul><p>本文涉及的环境<br>nginx 1.10.1<br>frp 0.22.0<br>Windows 10</p><h3 id="frp-原理"><a href="#frp-原理" class="headerlink" title="frp 原理"></a>frp 原理</h3><p>请仔细阅读原理，在不理解原理的情况下上手配置容易出错，且很难定位原因。这都是本人所经历的惨痛教训）<br>以本人搭建的frp内网穿透服务为例：<br><strong>第一步</strong>： 配置无误的情况下，frp服务端和frp客户端先后启动，建立通信隧道，其中：frp服务端监听http 7071端口（此端口可自定义），接收此端口下所有外网用户请求，frp客户端代理本地想要暴露给外网的web服务端口，本文以8585 , 8686 端口为例</p><p><strong>第二步</strong>： 通过配置nginx反向代理，将指向本台公网服务器的dev.msh.com 下的子域名，映射到服务器的7071端口，也就是frp监听的那个端口。 外网用户访问iot.ikeesun.com下的子域名，例如 ：<br>a.iot.ikeysun.com<br>b.iot.ikeysun.com<br>等同于访问ikeysun.com：7071，会 触发 frp服务端和客户端的互动，从而http请求由frp服务端传递到frp客户端</p><p><strong>第三步</strong>： frp客户端收到http请求后，基于自定义配置，则做如下处理：<br>监听到http请求中的域名为 a.iot.ikeysun.com，则将请求转发到我本地的8585web服务端口<br>监听到http请求中的域名为 b.iot.ikeysun.com，则将请求转发到我本地的8686web服务端口</p><p><strong>第四步</strong>： 本地的web服务收到http请求后，对请求做处理，并完成响应</p><p><strong>第五步</strong>： frp客户端将响应结果回传给frp的服务端。服务端最终将响应回传给外网用户</p><p><strong>第六步</strong>： 最终的实测效果为：<br>访问 a.iot.ikeysun.com，等同于访问我本地的localhost:8585<br>访问 b.iot.ikeysun.com，等同于访问我本地的localhost:8686</p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><h4 id="在域名解析后台配置子域名"><a href="#在域名解析后台配置子域名" class="headerlink" title="在域名解析后台配置子域名"></a>在域名解析后台配置子域名</h4><p>本文以ikeysun.com 为例：<br>登录域名的解析后台，在ikeysun.com下增加两条A记录： iot, *.iot,记录值为部署frp服务端的公网服务器的ip。</p><p>代表iot.ikeysun.com下的所有的子域名，会全部指向此台公网服务器。</p><h3 id="服务端配置"><a href="#服务端配置" class="headerlink" title="服务端配置"></a>服务端配置</h3><h4 id="frp服务端安装配置"><a href="#frp服务端安装配置" class="headerlink" title="frp服务端安装配置"></a>frp服务端安装配置</h4><p>修改配置文件<br>解压后进入解压目录，找到frps.ini文件, 做如下配置 。配置说明请参见各项对应的注释</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="comment"># frp监听的端口，用作服务端和客户端通信</span></span><br><span class="line"><span class="attr">bind_port</span> = <span class="number">7000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务端通过此端口接监听和接收公网用户的http请求</span></span><br><span class="line"><span class="attr">vhost_http_port</span> = <span class="number">7071</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># frp提供了一个控制台，可以通过这个端口访问到控制台。可查看frp当前有多少代理连接以及对应的状态</span></span><br><span class="line"><span class="attr">dashboard_port</span> = <span class="number">7500</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务端的subdomain_host需要和客户端配置文件中的subdomain、local_port配合使用，</span></span><br><span class="line"><span class="comment"># 可通过&#123;subdomain&#125;.&#123;subdomain_host&#125; 的域名格式来访问自己本地的 web 服务。</span></span><br><span class="line"><span class="comment"># 假如服务端的subdomain_host为iot.ikeysun.com，客户端某个配置组中的</span></span><br><span class="line"><span class="comment"># subdomain为a,local_port为8585，</span></span><br><span class="line"><span class="comment"># 则：</span></span><br><span class="line"><span class="comment"># 访问 a.iot.ikeysun.com ，等同于访问本地的localhost:8585</span></span><br><span class="line"></span><br><span class="line"><span class="attr">subdomain_host</span> = iot.ikeysun.com</span><br></pre></td></tr></table></figure><p>启动frp服务端</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\Frp\frp_0.29.0_windows_amd64\frp_0.29.0_windows_amd64&gt;frps -c frps.ini</span><br></pre></td></tr></table></figure><h3 id="nginx反向代理配置"><a href="#nginx反向代理配置" class="headerlink" title="nginx反向代理配置"></a>nginx反向代理配置</h3><p>修改 nginx.conf 文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frp的接收http请求的反向代理</span></span><br><span class="line"><span class="string">server</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">listen</span> <span class="number">80</span><span class="string">;</span></span><br><span class="line">    <span class="string">server_name</span> <span class="string">*.iot.ikeysun.com</span>  <span class="string">iot.ikeysun.com;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">location</span> <span class="string">/</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="comment"># 7071端口即为frp监听的http端口</span></span><br><span class="line">        <span class="string">proxy_pass</span> <span class="string">http://127.0.0.1:7071;</span></span><br><span class="line">        <span class="string">proxy_set_header</span> <span class="string">Host</span> <span class="string">$host:80;</span></span><br><span class="line">        <span class="string">proxy_set_header</span> <span class="string">X-Real-IP</span> <span class="string">$remote_addr;</span></span><br><span class="line">        <span class="string">proxy_set_header</span> <span class="string">X-Forwarded-For</span> <span class="string">$proxy_add_x_forwarded_for;</span></span><br><span class="line"></span><br><span class="line">        <span class="string">proxy_set_header</span> <span class="string">Upgrade</span> <span class="string">$http_upgrade;</span></span><br><span class="line">        <span class="string">proxy_set_header</span> <span class="string">Connection</span> <span class="string">"upgrade"</span><span class="string">;</span></span><br><span class="line"></span><br><span class="line">        <span class="string">proxy_connect_timeout</span> <span class="string">7d;</span></span><br><span class="line">        <span class="string">proxy_send_timeout</span> <span class="string">7d;</span></span><br><span class="line">        <span class="string">proxy_read_timeout</span> <span class="string">7d;</span></span><br><span class="line"></span><br><span class="line">        <span class="string">&#125;</span></span><br><span class="line">    <span class="comment"># 防止爬虫抓取</span></span><br><span class="line">    <span class="string">if</span> <span class="string">($http_user_agent</span> <span class="string">~*</span> <span class="string">"360Spider|JikeSpider|Spider|spider|bot|Bot|2345Explorer|curl|wget|webZIP|qihoobot|Baiduspider|Googlebot|Googlebot-Mobile|Googlebot-Image|Mediapartners-Google|Adsbot-Google|Feedfetcher-Google|Yahoo! Slurp|Yahoo! Slurp China|YoudaoBot|Sosospider|Sogou spider|Sogou web spider|MSNBot|ia_archiver|Tomato Bot|NSPlayer|bingbot"</span><span class="string">)</span></span><br><span class="line">        <span class="string">&#123;</span></span><br><span class="line">            <span class="string">return</span> <span class="number">403</span><span class="string">;</span></span><br><span class="line">        <span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>让nginx重新加载配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\nginx-1.16.0&gt;nginx -s reload</span><br></pre></td></tr></table></figure><p>防火墙的端口记得一定要放开，包括阿里云后台的安全规则</p><h3 id="客户端安装配置"><a href="#客户端安装配置" class="headerlink" title="客户端安装配置"></a>客户端安装配置</h3><p>下载客户端：去github上面下载最新版的 windows客户端，找到 frp_0.23.1_windows_amd64.zip，点击下载即可<br>解压后，编辑 frpc.ini 文件</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="comment"># 部署frp服务端的公网服务器的ip</span></span><br><span class="line"><span class="attr">server_addr</span> = <span class="number">39.100</span>.<span class="number">107.169</span></span><br><span class="line"><span class="comment"># 和服务端的bind_port保持一致</span></span><br><span class="line"><span class="attr">server_port</span> = <span class="number">7000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 代理服务一 ，[]内的代理服务名称在全局范围内确保唯一，每个人的每个代理服务不能重名，</span></span><br><span class="line"><span class="comment"># 否则会影响正常使用。</span></span><br><span class="line"> <span class="section">[http-a]</span></span><br><span class="line"><span class="attr">type</span> = http</span><br><span class="line"><span class="comment"># local_port代表你想要暴露给外网的本地web服务端口</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">8585</span></span><br><span class="line"><span class="comment"># subdomain 在全局范围内要确保唯一，每个代理服务的subdomain不能重名，否则会影响正常使用。</span></span><br><span class="line"><span class="comment"># 客户端的subdomain需和服务端的subdomain_host配合使用</span></span><br><span class="line"><span class="attr">subdomain</span> = a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 代理服务二  ，各项配置说明请参考配置组一</span></span><br><span class="line"><span class="section">[http-b]</span></span><br><span class="line"><span class="attr">type</span> = http</span><br><span class="line"><span class="attr">local_port</span> = <span class="number">8686</span></span><br><span class="line"><span class="attr">subdomain</span> = b</span><br></pre></td></tr></table></figure><p>启动 客户端<br>在frp解压目录下右键打开 powershell 或者cmd，执行如下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./frpc.exe -c .\frpc.ini</span><br></pre></td></tr></table></figure><p>如果窗口提示 『start proxy success』 ，则代表frp服务端和frp客户端的通信隧道建立成功```</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Sunny-Ngrok使用流程如下：https-www-ngrok-cc-user&quot;&gt;&lt;a href=&quot;#Sunny-Ngrok使用流程如下：https-www-ngrok-cc-user&quot; class=&quot;headerlink&quot; title=&quot;Sunny-Ngrok使用流程如下：https://www.ngrok.cc/user&quot;&gt;&lt;/a&gt;Sunny-Ngrok使用流程如下：&lt;a href=&quot;https://www.ngrok.cc/user&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.ngrok.cc/user&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&quot;点击网址，并进行注册&quot;&gt;&lt;a href=&quot;#点击网址，并进行注册&quot; class=&quot;headerlink&quot; title=&quot;点击网址，并进行注册&quot;&gt;&lt;/a&gt;点击网址，并进行注册&lt;/h3&gt;
    
    </summary>
    
    
      <category term="环境搭建" scheme="https://linbei.top/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="随笔" scheme="https://linbei.top/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="阿里云" scheme="https://linbei.top/tags/%E9%98%BF%E9%87%8C%E4%BA%91/"/>
    
  </entry>
  
  <entry>
    <title>Hexo添加相册</title>
    <link href="https://linbei.top/Hexo%E6%B7%BB%E5%8A%A0%E7%9B%B8%E5%86%8C/"/>
    <id>https://linbei.top/Hexo%E6%B7%BB%E5%8A%A0%E7%9B%B8%E5%86%8C/</id>
    <published>2019-03-13T05:12:57.000Z</published>
    <updated>2020-05-23T01:20:25.470Z</updated>
    
    <content type="html"><![CDATA[<p>最终效果请看这里：<a href="https://hanlinbei.github.io/photos" target="_blank" rel="noopener">https://hanlinbei.github.io/photos</a></p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><h3 id="关于"><a href="#关于" class="headerlink" title="关于"></a>关于</h3><ul><li>我使用的主题是hexo-theme-yilia，其中实现相册功能的方案是同步instagram上面的图片，但是现在instagram被禁，不能使用了</li><li><p>下面是通过自己的方式实现了相册功能，其中的样式还是使用该主题提供的。</p><a id="more"></a><h3 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h3></li><li><p>在github上新建一个仓库，主要用于存储图片，可以通过url访问到，也方便管理</p></li><li>将要放到相册的图片处理成json格式的数据，然后进行访问，这里json的格式需要配合要使用的样式，所以需要处理成特定格式的json数据，下面会给出</li><li>图片裁剪，因为相册显示的样式最好是正方形的的图片，这里使用脚本处理一下</li><li>图片压缩，相册显示的图片是压缩后的图片，提高加载的速度，打开后的图片是原图。</li></ul><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="github操作"><a href="#github操作" class="headerlink" title="github操作"></a>github操作</h3><ul><li>建立一个用于存储相册的仓库，我这里建立了名为BlogPicturep的仓库<img src="/Hexo%E6%B7%BB%E5%8A%A0%E7%9B%B8%E5%86%8C/2020-03-13-13-48-33.png" class></li><li>关于git的命令行操作和配置不再给出</li></ul><h3 id="博客操作"><a href="#博客操作" class="headerlink" title="博客操作"></a>博客操作</h3><ul><li>在博客的source文件夹下建立一个photos文件夹</li><li>如果是通过hexo new 的方式创建的记得把index.md文件删掉，我试过不删掉就渲染不出来。</li><li>将样式文件放到photos文件夹下，样式文件我都放到了github上：<a href="https://github.com/hanlinbei/hanlinbei.github.io/tree/master/photos" target="_blank" rel="noopener">https://github.com/hanlinbei/hanlinbei.github.io/tree/master/photos</a> 在github上一般很难下载单个文件夹，在这里我可以推荐一个gitzip的谷歌浏览器插件，可以右键很方便的把文件打包成一个压缩包下载，不必下载整个项目。整个项目很难下载得下来。</li><li>修改ins.js文件，主要是里面的render函数</li><li><p>其中的url对应到你的github放图片的地址</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> render = <span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> ulTmpl = <span class="string">""</span>;</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>, len2 = res.list.length; j &lt; len2; j++) &#123;</span><br><span class="line">   <span class="keyword">var</span> data = res.list[j].arr;</span><br><span class="line">   <span class="keyword">var</span> liTmpl = <span class="string">""</span>;</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = data.link.length; i &lt; len; i++) &#123;</span><br><span class="line">     <span class="keyword">var</span> minSrc = <span class="string">'https://raw.githubusercontent.com/lawlite19/blog-back-up/master/min_photos/'</span> + data.link[i];</span><br><span class="line">     <span class="keyword">var</span> src = <span class="string">'https://raw.githubusercontent.com/lawlite19/blog-back-up/master/photos/'</span> + data.link[i];</span><br><span class="line">     <span class="keyword">var</span> type = data.type[i];</span><br><span class="line">     <span class="keyword">var</span> target = src + (type === <span class="string">'video'</span> ? <span class="string">'.mp4'</span> : <span class="string">'.jpg'</span>);</span><br><span class="line">     src += <span class="string">''</span>;</span><br><span class="line">     liTmpl += <span class="string">'&lt;figure class="thumb" itemprop="associatedMedia" itemscope="" itemtype="http://schema.org/ImageObject"&gt;\</span></span><br><span class="line"><span class="string">           &lt;a href="'</span> + src + <span class="string">'" itemprop="contentUrl" data-size="1080x1080" data-type="'</span> + type + <span class="string">'" data-target="'</span> + src + <span class="string">'"&gt;\</span></span><br><span class="line"><span class="string">             &lt;img class="reward-img" data-type="'</span> + type + <span class="string">'" data-src="'</span> + minSrc + <span class="string">'" src="/assets/img/empty.png" itemprop="thumbnail" onload="lzld(this)"&gt;\</span></span><br><span class="line"><span class="string">           &lt;/a&gt;\</span></span><br><span class="line"><span class="string">           &lt;figcaption style="display:none" itemprop="caption description"&gt;'</span> + data.text[i] + <span class="string">'&lt;/figcaption&gt;\</span></span><br><span class="line"><span class="string">       &lt;/figure&gt;'</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   ulTmpl = ulTmpl + <span class="string">'&lt;section class="archives album"&gt;&lt;h1 class="year"&gt;'</span> + data.year + <span class="string">'年&lt;em&gt;'</span> + data.month + <span class="string">'月&lt;/em&gt;&lt;/h1&gt;\</span></span><br><span class="line"><span class="string">   &lt;ul class="img-box-ul"&gt;'</span> + liTmpl + <span class="string">'&lt;/ul&gt;\</span></span><br><span class="line"><span class="string">   &lt;/section&gt;'</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><img src="/Hexo%E6%B7%BB%E5%8A%A0%E7%9B%B8%E5%86%8C/2020-03-13-13-56-29.png" class><p>地址一定是点击这个download后浏览器框上出现得地址</p><img src="/Hexo%E6%B7%BB%E5%8A%A0%E7%9B%B8%E5%86%8C/2020-03-13-13-57-33.png" class></li></ul><h3 id="图片处理"><a href="#图片处理" class="headerlink" title="图片处理"></a>图片处理</h3><ul><li>python脚本文件都放在了这里：<a href="https://github.com/hanlinbei/BlogPicture" target="_blank" rel="noopener">https://github.com/hanlinbei/BlogPicture</a><br>(1). 裁剪图片</li><li>去图片的中间部分，裁剪为正方形</li><li><p>对应的裁剪函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cut_by_ratio</span><span class="params">(self)</span>:</span>  </span><br><span class="line">    <span class="string">"""按照图片长宽进行分割</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    ------------</span></span><br><span class="line"><span class="string">    取中间的部分，裁剪成正方形</span></span><br><span class="line"><span class="string">    """</span>  </span><br><span class="line">    im = Image.open(self.infile)  </span><br><span class="line">    (x, y) = im.size  </span><br><span class="line">    <span class="keyword">if</span> x &gt; y:  </span><br><span class="line">        region = (int(x/<span class="number">2</span>-y/<span class="number">2</span>), <span class="number">0</span>, int(x/<span class="number">2</span>+y/<span class="number">2</span>), y)  </span><br><span class="line">        <span class="comment">#裁切图片  </span></span><br><span class="line">        crop_img = im.crop(region)  </span><br><span class="line">        <span class="comment">#保存裁切后的图片  </span></span><br><span class="line">        crop_img.save(self.outfile)</span><br><span class="line">    <span class="keyword">elif</span> x &lt; y:  </span><br><span class="line">        region = (<span class="number">0</span>, int(y/<span class="number">2</span>-x/<span class="number">2</span>), x, int(y/<span class="number">2</span>+x/<span class="number">2</span>))</span><br><span class="line">        <span class="comment">#裁切图片  </span></span><br><span class="line">        crop_img = im.crop(region)  </span><br><span class="line">        <span class="comment">#保存裁切后的图片  </span></span><br><span class="line">        crop_img.save(self.outfile)</span><br></pre></td></tr></table></figure><p>(2) 压缩图片<br>把图片进行压缩，方便相册的加载</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compress</span><span class="params">(choose, des_dir, src_dir, file_list)</span>:</span></span><br><span class="line">   <span class="string">"""压缩算法，img.thumbnail对图片进行压缩，</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   参数</span></span><br><span class="line"><span class="string">   -----------</span></span><br><span class="line"><span class="string">   choose: str</span></span><br><span class="line"><span class="string">           选择压缩的比例，有4个选项，越大压缩后的图片越小</span></span><br><span class="line"><span class="string">   """</span></span><br><span class="line">   <span class="keyword">if</span> choose == <span class="string">'1'</span>:</span><br><span class="line">       scale = SIZE_normal</span><br><span class="line">   <span class="keyword">if</span> choose == <span class="string">'2'</span>:</span><br><span class="line">       scale = SIZE_small</span><br><span class="line">   <span class="keyword">if</span> choose == <span class="string">'3'</span>:</span><br><span class="line">       scale = SIZE_more_small</span><br><span class="line">   <span class="keyword">if</span> choose == <span class="string">'4'</span>:</span><br><span class="line">       scale = SIZE_more_small_small</span><br><span class="line">   <span class="keyword">for</span> infile <span class="keyword">in</span> file_list:</span><br><span class="line">       img = Image.open(src_dir+infile)</span><br><span class="line">       <span class="comment"># size_of_file = os.path.getsize(infile)</span></span><br><span class="line">       w, h = img.size</span><br><span class="line">       img.thumbnail((int(w/scale), int(h/scale)))</span><br><span class="line">       img.save(des_dir + infile)</span><br></pre></td></tr></table></figure><h3 id="github提交"><a href="#github提交" class="headerlink" title="github提交"></a>github提交</h3></li><li><p>处理完成之后需要将处理后的图片提交到github上</p></li><li><p>这里同样使用脚本的方式，需要将git命令行配置到环境变量中</p>  <figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">git_operation</span><span class="params">()</span>:</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">git 命令行函数，将仓库提交</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">----------</span></span><br><span class="line"><span class="string">需要安装git命令行工具，并且添加到环境变量中</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">os.system(<span class="string">'git add --all'</span>)</span><br><span class="line">os.system(<span class="string">'git commit -m "add photos"'</span>)</span><br><span class="line">os.system(<span class="string">'git push origin master'</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="json数据处理"><a href="#json数据处理" class="headerlink" title="json数据处理"></a>json数据处理</h3><ul><li>下面就需要将图片信息处理成json数据格式了，这里为重点</li><li><p>最终需要的json格式的数据如下图：</p><img src="/Hexo%E6%B7%BB%E5%8A%A0%E7%9B%B8%E5%86%8C/2020-03-13-14-08-54.png" class><p>这里我采用的方式是读取图片的名字作为其中的text的内容，图片的命名如下图</p><img src="/Hexo%E6%B7%BB%E5%8A%A0%E7%9B%B8%E5%86%8C/2020-03-13-14-09-31.png" class><p>最前面是日期，然后用_进行分隔<br>后面是图片的描述信息，注意不要包含_和.符号 这个命名一定要规范，不能有问题。<br>实现代码：<br>注意代码中../blog/source/photos/data.json是对应到我的博客的路径，这里根据需要改成自己博客的路径</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">ef handle_photo():</span><br><span class="line">   <span class="string">'''根据图片的文件名处理成需要的json格式的数据</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   -----------</span></span><br><span class="line"><span class="string">   最后将data.json文件存到博客的source/photos文件夹下</span></span><br><span class="line"><span class="string">   '''</span></span><br><span class="line">   src_dir, des_dir = <span class="string">"photos/"</span>, <span class="string">"min_photos/"</span></span><br><span class="line">   file_list = list_img_file(src_dir)</span><br><span class="line">   list_info = []</span><br><span class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> range(len(file_list)):</span><br><span class="line">       filename = file_list[i]</span><br><span class="line">       date_str, info = filename.split(<span class="string">"_"</span>)</span><br><span class="line">       info, _ = info.split(<span class="string">"."</span>)</span><br><span class="line">       date = datetime.strptime(date_str, <span class="string">"%Y-%m-%d"</span>)</span><br><span class="line">       year_month = date_str[<span class="number">0</span>:<span class="number">7</span>]</span><br><span class="line">       <span class="keyword">if</span> i == <span class="number">0</span>:  <span class="comment"># 处理第一个文件</span></span><br><span class="line">           new_dict = &#123;<span class="string">"date"</span>: year_month, <span class="string">"arr"</span>:&#123;<span class="string">'year'</span>: date.year,</span><br><span class="line">                                                                  <span class="string">'month'</span>: date.month,</span><br><span class="line">                                                                  <span class="string">'link'</span>: [filename],</span><br><span class="line">                                                                  <span class="string">'text'</span>: [info],</span><br><span class="line">                                                                  <span class="string">'type'</span>: [<span class="string">'image'</span>]</span><br><span class="line">                                                                  &#125;</span><br><span class="line">                                       &#125;</span><br><span class="line">           list_info.append(new_dict)</span><br><span class="line">       <span class="keyword">elif</span> year_month != list_info[<span class="number">-1</span>][<span class="string">'date'</span>]:  <span class="comment"># 不是最后的一个日期，就新建一个dict</span></span><br><span class="line">           new_dict = &#123;<span class="string">"date"</span>: year_month, <span class="string">"arr"</span>:&#123;<span class="string">'year'</span>: date.year,</span><br><span class="line">                                                  <span class="string">'month'</span>: date.month,</span><br><span class="line">                                                  <span class="string">'link'</span>: [filename],</span><br><span class="line">                                                  <span class="string">'text'</span>: [info],</span><br><span class="line">                                                  <span class="string">'type'</span>: [<span class="string">'image'</span>]</span><br><span class="line">                                                  &#125;</span><br><span class="line">                       &#125;</span><br><span class="line">           list_info.append(new_dict)</span><br><span class="line">       <span class="keyword">else</span>:  <span class="comment"># 同一个日期</span></span><br><span class="line">           list_info[<span class="number">-1</span>][<span class="string">'arr'</span>][<span class="string">'link'</span>].append(filename)</span><br><span class="line">           list_info[<span class="number">-1</span>][<span class="string">'arr'</span>][<span class="string">'text'</span>].append(info)</span><br><span class="line">           list_info[<span class="number">-1</span>][<span class="string">'arr'</span>][<span class="string">'type'</span>].append(<span class="string">'image'</span>)</span><br><span class="line">   list_info.reverse()  <span class="comment"># 翻转</span></span><br><span class="line">   final_dict = &#123;<span class="string">"list"</span>: list_info&#125;</span><br><span class="line">   <span class="keyword">with</span> open(<span class="string">"../lawlite19.github.io/source/photos/data.json"</span>,<span class="string">"w"</span>) <span class="keyword">as</span> fp:</span><br><span class="line">       json.dump(final_dict, fp)</span><br></pre></td></tr></table></figure></li></ul><p>每次图片有改动都需要执行此脚本文件<br>效果展示<br><img src="/Hexo%E6%B7%BB%E5%8A%A0%E7%9B%B8%E5%86%8C/2020-03-13-14-13-07.png" class></p><h3 id="可能会遇到得问题"><a href="#可能会遇到得问题" class="headerlink" title="可能会遇到得问题"></a>可能会遇到得问题</h3><h4 id="缩略图不显示"><a href="#缩略图不显示" class="headerlink" title="缩略图不显示"></a>缩略图不显示</h4><p>首先，去下载“empty.png” <a href="https://github.com/hanlinbei/hanlinbei.github.io/blob/master/assets/img/empty.png" target="_blank" rel="noopener">点这里</a><br>直接右键另存，保存为“empty.png”。名字也要一样，别问为什么，实现了，自己再去看源码。<br>在你博客的本地仓库source下新建一个文件夹命名为assets,再在assets下新建一个文件夹命名为img。最后把empty.png放到img里面。我的结果如下：<br><img src="/Hexo%E6%B7%BB%E5%8A%A0%E7%9B%B8%E5%86%8C/2020-03-13-14-17-02.png" class><br>这样做好像就完事了，可以成功看到缩略图显示出来。其实操作本不复杂严格按照教程来，细心点</p><h4 id="网页没有渲染出来"><a href="#网页没有渲染出来" class="headerlink" title="网页没有渲染出来"></a>网页没有渲染出来</h4><p>如果是github操作一定要及时查看邮件，如果渲染不出来有错误你会收到github发送过来的邮件<br><img src="/Hexo%E6%B7%BB%E5%8A%A0%E7%9B%B8%E5%86%8C/2020-03-13-14-21-24.png" class><br>如果没有错误记得请一下浏览器的缓存，可能会是浏览器缓存造成的 刷新还是原来的页面。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最终效果请看这里：&lt;a href=&quot;https://hanlinbei.github.io/photos&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://hanlinbei.github.io/photos&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h2&gt;&lt;h3 id=&quot;关于&quot;&gt;&lt;a href=&quot;#关于&quot; class=&quot;headerlink&quot; title=&quot;关于&quot;&gt;&lt;/a&gt;关于&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;我使用的主题是hexo-theme-yilia，其中实现相册功能的方案是同步instagram上面的图片，但是现在instagram被禁，不能使用了&lt;/li&gt;
&lt;li&gt;&lt;p&gt;下面是通过自己的方式实现了相册功能，其中的样式还是使用该主题提供的。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="环境搭建" scheme="https://linbei.top/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="随笔" scheme="https://linbei.top/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="Hexo" scheme="https://linbei.top/tags/Hexo/"/>
    
      <category term="阿里云" scheme="https://linbei.top/tags/%E9%98%BF%E9%87%8C%E4%BA%91/"/>
    
  </entry>
  
  <entry>
    <title>VsCode编写Hexo支持的MD文档</title>
    <link href="https://linbei.top/vscode%E7%BC%96%E5%86%99md/"/>
    <id>https://linbei.top/vscode%E7%BC%96%E5%86%99md/</id>
    <published>2019-03-12T04:12:57.000Z</published>
    <updated>2020-05-23T01:20:25.658Z</updated>
    
    <content type="html"><![CDATA[<h2 id="vscode编写markdown"><a href="#vscode编写markdown" class="headerlink" title="vscode编写markdown"></a>vscode编写markdown</h2><p>markdown是用hexo写博客的可选文本格式之一，通常我们用hexo new xxx来创建一篇新的post。md编辑器有很多，预览我们hexo项目中的md文章的方法也有很多，我的方案是编辑与预览都在vscode中完成。</p><p>这里要先提一下在hexo3.0版本中编写md文件时新的图片插入方式：只要在_config.yml中添加post_asset_folder: true，就会在生成新post时创建一个同名文件夹；在md中输入，就可以插入这个文件夹中的图片。(这种方式较之以前把图片放在source/images，方式更整洁，图片随文章分类)<br>vscode有很多md的插件，这里推荐两个插件，并针对hexo做一些配置调整，以满足插入图片与预览md的需求：<br><a id="more"></a></p><ol><li>粘贴图片Paste Image<img src="/vscode%E7%BC%96%E5%86%99md/2020-03-13-13-13-00.png" class>这个插件用来在md文档中粘贴图片，默认会在文档的同级目录下新建一个图片文件，并在md中插入一行相对路径的图片代码。迎合上述hexo的新图片插入方式，可以在vscode的user-settings里新增两条配置：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">"pasteImage.path": "$&#123;currentFileNameWithoutExt&#125;/",</span><br><span class="line">"pasteImage.insertPattern": "&#123;% asset_img $&#123;imageFileName&#125; %&#125;"</span><br></pre></td></tr></table></figure><p>这样以来，粘贴的图片就会保存到md文档的同名文件夹下，文档中将插入hexo asset语法的代码。</p><ol><li>预览Markdown Preview Enhanced<img src="/vscode%E7%BC%96%E5%86%99md/2020-03-13-13-14-28.png" class>这个是下载量最高的vscode md预览插件，支持很多功能，并支持扩展md解析语法。现在就要利用这个功能来解决一个问题：vscode内无法预览代码的图片。ctrl+shift+P输入Markdown Preview Enhanced: Extend Parser调出插件的parse.js文件，修改其中的onWillParseMarkdown方法：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  onWillParseMarkdown: <span class="function"><span class="keyword">function</span>(<span class="params">markdown</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span> &#123;</span><br><span class="line">      markdown = markdown.replace(</span><br><span class="line">        /\&#123;%\s*asset_img\s*(.*)\s*%\&#125;/g,</span><br><span class="line">        (whole, content) =&gt; (<span class="string">`![](<span class="subst">$&#123;content&#125;</span>)`</span>)</span><br><span class="line">      )</span><br><span class="line">      <span class="keyword">return</span> resolve(markdown)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样以来，我们md中的代码就会在解析预览时被替换成md的图片语法，并且同样采用相对路径，图片预览成功。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;vscode编写markdown&quot;&gt;&lt;a href=&quot;#vscode编写markdown&quot; class=&quot;headerlink&quot; title=&quot;vscode编写markdown&quot;&gt;&lt;/a&gt;vscode编写markdown&lt;/h2&gt;&lt;p&gt;markdown是用hexo写博客的可选文本格式之一，通常我们用hexo new xxx来创建一篇新的post。md编辑器有很多，预览我们hexo项目中的md文章的方法也有很多，我的方案是编辑与预览都在vscode中完成。&lt;/p&gt;
&lt;p&gt;这里要先提一下在hexo3.0版本中编写md文件时新的图片插入方式：只要在_config.yml中添加post_asset_folder: true，就会在生成新post时创建一个同名文件夹；在md中输入，就可以插入这个文件夹中的图片。(这种方式较之以前把图片放在source/images，方式更整洁，图片随文章分类)&lt;br&gt;vscode有很多md的插件，这里推荐两个插件，并针对hexo做一些配置调整，以满足插入图片与预览md的需求：&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="环境搭建" scheme="https://linbei.top/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="随笔" scheme="https://linbei.top/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="Hexo" scheme="https://linbei.top/tags/Hexo/"/>
    
      <category term="Vscode" scheme="https://linbei.top/tags/Vscode/"/>
    
  </entry>
  
  <entry>
    <title>Hexo主题变化与添加插件</title>
    <link href="https://linbei.top/Hexo%E4%B8%BB%E9%A2%98%E5%8F%98%E6%8D%A2%E4%B8%8E%E6%B7%BB%E5%8A%A0%E6%8F%92%E4%BB%B6/"/>
    <id>https://linbei.top/Hexo%E4%B8%BB%E9%A2%98%E5%8F%98%E6%8D%A2%E4%B8%8E%E6%B7%BB%E5%8A%A0%E6%8F%92%E4%BB%B6/</id>
    <published>2019-03-12T04:12:57.000Z</published>
    <updated>2020-05-23T01:20:25.361Z</updated>
    
    <content type="html"><![CDATA[<h1 id="更换主题Theme及基本配置"><a href="#更换主题Theme及基本配置" class="headerlink" title="更换主题Theme及基本配置"></a>更换主题Theme及基本配置</h1><h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><p>默认主题是landscape，在themes文件夹下，可以使用别人开发好的主题，这里有很多，我使用的是这一个<a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="noopener">https://github.com/litten/hexo-theme-yilia</a><br>下载之后放到themes文件夹下即可：git clone git@github.com:litten/hexo-theme-yilia.git<br><a id="more"></a></p><h2 id="主题基本配置"><a href="#主题基本配置" class="headerlink" title="主题基本配置"></a>主题基本配置</h2><p>配置在_config.yml文件中，基本的配置尝试一下就知道了，不在给出<br>图片的位置<br>比如打赏的支付宝二维码图片，是在当前主题下的source/assets/img/下 （不是当前博客根目录）<br><img src="/Hexo%E4%B8%BB%E9%A2%98%E5%8F%98%E6%8D%A2%E4%B8%8E%E6%B7%BB%E5%8A%A0%E6%8F%92%E4%BB%B6/2020-03-12-20-51-10.png" class><br>配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 打赏基础设定：0-关闭打赏； 1-文章对应的md文件里有reward:<span class="literal">true</span>属性，才有打赏； 2-所有文章均有打赏</span></span><br><span class="line">reward_type: 1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 打赏wording</span></span><br><span class="line">reward_wording: '谢谢你请我吃糖果'</span><br><span class="line"><span class="meta">#</span><span class="bash"> 支付宝二维码图片地址，跟你设置头像的方式一样。比如：/assets/img/alipay.jpg</span></span><br><span class="line">alipay: /assets/img/alipay.jpg</span><br><span class="line"><span class="meta">#</span><span class="bash"> 微信二维码图片地址</span></span><br><span class="line">weixin: /assets/img/weixin.png</span><br></pre></td></tr></table></figure><h2 id="文章评论设置"><a href="#文章评论设置" class="headerlink" title="文章评论设置"></a>文章评论设置</h2><p>很多默认的评论插件要么不维护了，要么需要翻墙的。不过有基于github开发的gittalk还是不错的。Gitalk 是一个基于 Github Issue 和 Preact 开发的评论插件。使用 Github 帐号登录，界面干净整洁，最喜欢的一点是支持 MarkDown语法</p><p>主要特性：</p><p>使用 Github 登录<br>支持多语言 [en, zh-CN, zh-TW, es-ES, fr]<br>支持个人或组织<br>无干扰模式（设置 distractionFreeMode 为 true 开启）<br>快捷键提交评论 （cmd|ctrl + enter）<br>支持MarkDown语法</p><p>在layout/_partial/post目录下新增gitalk.ejs文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"gitalk-container"</span> style=<span class="string">"padding: 0px 30px 0px 30px;"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;link rel="stylesheet" href="https:/</span><span class="regexp">/cdn.jsdelivr.net/</span>npm/gitalk@<span class="number">1</span>/dist/gitalk.css<span class="string">"&gt;</span></span><br><span class="line"><span class="string">&lt;script src="</span>https:<span class="comment">//cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.min.js"&gt;&lt;/script&gt;</span></span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(&lt;%=theme.gitalk.enable%&gt;)&#123;</span><br><span class="line"> <span class="keyword">var</span> gitalk = <span class="keyword">new</span> Gitalk(&#123;</span><br><span class="line">   clientID: <span class="string">'&lt;%=theme.gitalk.ClientID%&gt;'</span>,</span><br><span class="line">   clientSecret: <span class="string">'&lt;%=theme.gitalk.ClientSecret%&gt;'</span>,</span><br><span class="line">   repo: <span class="string">'&lt;%=theme.gitalk.repo%&gt;'</span>,</span><br><span class="line">   owner: <span class="string">'&lt;%=theme.gitalk.githubID%&gt;'</span>,</span><br><span class="line">   admin: [<span class="string">'&lt;%=theme.gitalk.adminUser%&gt;'</span>],</span><br><span class="line">   id: <span class="string">'&lt;%= page.date %&gt;'</span>,</span><br><span class="line">   distractionFreeMode: <span class="string">'&lt;%=theme.gitalk.distractionFreeMode%&gt;'</span></span><br><span class="line">&#125;)</span><br><span class="line">gitalk.render(<span class="string">'gitalk-container'</span>)</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>修改source-src/css/目录下comment.scss文件</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#disqus_thread</span>, <span class="selector-class">.duoshuo</span>, <span class="selector-class">.cloud-tie-wrapper</span>, <span class="selector-id">#SOHUCS</span>, <span class="selector-id">#gitment-ctn</span>, <span class="selector-id">#gitalk-container</span> &#123;</span><br><span class="line"> <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">30px</span> <span class="meta">!important</span>;</span><br><span class="line"> <span class="attribute">min-height</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#SOHUCS</span> &#123;</span><br><span class="line"> #SOHU_MAIN .module-cmt-list .block-cont-gw &#123;</span><br><span class="line">  <span class="selector-tag">border-bottom</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">dashed</span> <span class="selector-id">#c8c8c8</span> !<span class="selector-tag">important</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在layout/_partial目录下的article.ejs文件内新增gitalk相关的配置代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;% <span class="keyword">if</span> (theme.gitalk.enable)&#123; %&gt;</span><br><span class="line">       &lt;div id=<span class="string">"gitalk-container"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">       &lt;%- include post/gi</span>talk.ejs %&gt;</span><br><span class="line">  &lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p>最后在yilia主题配置文件中新增gitalk相关的配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#gitalk评论</span></span><br><span class="line"><span class="attr">gitalk:</span></span><br><span class="line">  <span class="attr">enable:</span>  <span class="literal">true</span></span><br><span class="line">  <span class="attr">githubID:</span> <span class="string">写自己github的ID</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">新建存放评论的仓库名</span></span><br><span class="line">  <span class="attr">ClientID:</span>  <span class="string">下面讲述如何书写</span> <span class="string">需要注册</span> <span class="string">OAuth</span> <span class="string">Application</span></span><br><span class="line">  <span class="attr">ClientSecret:</span>  <span class="string">下面讲述如何书</span> <span class="string">需要注册</span> <span class="string">OAuth</span> <span class="string">Application</span></span><br><span class="line"><span class="comment">#不这样书写容易报错</span></span><br><span class="line">  <span class="attr">adminUser:</span> <span class="string">"['仓库名','仓库名']"</span></span><br><span class="line">  <span class="attr">labels:</span> <span class="string">gitalk</span></span><br><span class="line">  <span class="attr">perPage:</span> <span class="number">15</span></span><br><span class="line">  <span class="attr">pagerDirection:</span> <span class="string">last</span></span><br><span class="line">  <span class="attr">createIssueManually:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">distractionFreeMode:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>当别人评论你的文章时，会需要它是授权。点击<a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">https://github.com/settings/applications/new</a></p><p>进行注册。注册界面如下。<br><img src="/Hexo%E4%B8%BB%E9%A2%98%E5%8F%98%E6%8D%A2%E4%B8%8E%E6%B7%BB%E5%8A%A0%E6%8F%92%E4%BB%B6/2020-03-12-21-04-54.png" class><br>红色方框写的是博客地址就 ok 了！！<br>注册成功后，会获取到 Client ID/scerct 。如下图所示：<br><img src="/Hexo%E4%B8%BB%E9%A2%98%E5%8F%98%E6%8D%A2%E4%B8%8E%E6%B7%BB%E5%8A%A0%E6%8F%92%E4%BB%B6/2020-03-12-21-05-53.png" class><br>最终演示<br><img src="/Hexo%E4%B8%BB%E9%A2%98%E5%8F%98%E6%8D%A2%E4%B8%8E%E6%B7%BB%E5%8A%A0%E6%8F%92%E4%BB%B6/2020-03-12-21-06-26.png" class></p><h2 id="网站访问量显示"><a href="#网站访问量显示" class="headerlink" title="网站访问量显示"></a>网站访问量显示</h2><p>我使用了不蒜子第三方的统计插件，网址：<a href="http://ibruce.info/2015/04/04/busuanzi/" target="_blank" rel="noopener">http://ibruce.info/2015/04/04/busuanzi/</a><br>在themes\yilia\layout_partial下的footer.ejs中加入如下代码即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script <span class="keyword">async</span> src=<span class="string">"//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;span id="busuanzi_container_site_pv"&gt;</span></span><br><span class="line"><span class="regexp">  本站总访问量&lt;span id="busuanzi_value_site_pv"&gt;&lt;/</span>span&gt;次</span><br><span class="line">&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">&lt;span id="busuanzi_container_site_uv"&gt;</span></span><br><span class="line"><span class="regexp">总访客数&lt;span id="busuanzi_value_site_uv"&gt;&lt;/</span>span&gt;人次</span><br><span class="line">&lt;<span class="regexp">/span&gt;</span></span><br></pre></td></tr></table></figure><h2 id="添加字数统计和阅读时长功能"><a href="#添加字数统计和阅读时长功能" class="headerlink" title="添加字数统计和阅读时长功能"></a>添加字数统计和阅读时长功能</h2><p>1.安装 hexo-wordcount<br>在博客目录下打开Git Bash Here 输入命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --save hexo-wordcount</span><br></pre></td></tr></table></figure><p>2.文件配置<br>在theme\yilia\layout_partial\post下创建word.ejs文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style=<span class="string">"margin-top:10px;"</span>&gt;</span><br><span class="line">    &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"post-time"</span>&gt;</span><br><span class="line">      &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"post-meta-item-icon"</span>&gt;</span><br><span class="line">        &lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">"fa fa-keyboard-o"</span>&gt;&lt;<span class="regexp">/i&gt;</span></span><br><span class="line"><span class="regexp">        &lt;span class="post-meta-item-text"&gt;  字数统计: &lt;/</span>span&gt;</span><br><span class="line">        &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"post-count"</span>&gt;&lt;%= wordcount(post.content) %&gt;字&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>span&gt;</span><br><span class="line">    &lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    &lt;span class="post-time"&gt;</span></span><br><span class="line"><span class="regexp">      &amp;nbsp; | &amp;nbsp;</span></span><br><span class="line"><span class="regexp">      &lt;span class="post-meta-item-icon"&gt;</span></span><br><span class="line"><span class="regexp">        &lt;i class="fa fa-hourglass-half"&gt;&lt;/i</span>&gt;</span><br><span class="line">        &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"post-meta-item-text"</span>&gt;  阅读时长: &lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">        &lt;span class="post-count"&gt;&lt;%= min2read(post.content) %&gt;分&lt;/</span>span&gt;</span><br><span class="line">      &lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>span&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><p>然后在 themes/yilia/layout/_partial/article.ejs中添加<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"article-inner"</span>&gt;</span><br><span class="line">    &lt;% <span class="keyword">if</span> (post.link || post.title)&#123; %&gt;</span><br><span class="line">      &lt;header <span class="class"><span class="keyword">class</span></span>=<span class="string">"article-header"</span>&gt;</span><br><span class="line">        &lt;%- partial(<span class="string">'post/title'</span>, &#123;<span class="attr">class_name</span>: <span class="string">'article-title'</span>&#125;) %&gt;</span><br><span class="line">        &lt;% <span class="keyword">if</span> (!post.noDate)&#123; %&gt;</span><br><span class="line">        &lt;%- partial(<span class="string">'post/date'</span>, &#123;<span class="attr">class_name</span>: <span class="string">'archive-article-date'</span>, <span class="attr">date_format</span>: <span class="literal">null</span>&#125;) %&gt;</span><br><span class="line">        &lt;!-- 需要添加的位置 --&gt;</span><br><span class="line">        &lt;!-- 开始添加字数统计--&gt;</span><br><span class="line">        &lt;% <span class="keyword">if</span>(theme.word_count &amp;&amp; !post.no_word_count)&#123;%&gt;</span><br><span class="line">          &lt;%- partial(<span class="string">'post/word'</span>) %&gt;</span><br><span class="line">          &lt;% &#125; %&gt;</span><br><span class="line">        &lt;!-- 添加完成 --&gt;</span><br><span class="line"></span><br><span class="line">        &lt;% &#125; %&gt;</span><br><span class="line">      &lt;<span class="regexp">/header&gt;</span></span><br></pre></td></tr></table></figure></p><p>3.开启功能<br>在站点的_config.yml中添加下面代码</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 是否开启字数统计</span></span><br><span class="line"><span class="comment">#不需要使用，直接设置值为false，或注释掉</span></span><br><span class="line"><span class="attr">word_count:</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><h2 id="添加背景音乐"><a href="#添加背景音乐" class="headerlink" title="添加背景音乐"></a>添加背景音乐</h2><ol><li>打开网易云音乐首页，然后搜索你要添加的背景音乐<a href="http://music.163.com/" target="_blank" rel="noopener">http://music.163.com/</a><img src="/Hexo%E4%B8%BB%E9%A2%98%E5%8F%98%E6%8D%A2%E4%B8%8E%E6%B7%BB%E5%8A%A0%E6%8F%92%E4%BB%B6/2020-03-12-21-16-59.png" class></li><li>搜索到歌曲点击生成外链播放器，进去下一个界面<img src="/Hexo%E4%B8%BB%E9%A2%98%E5%8F%98%E6%8D%A2%E4%B8%8E%E6%B7%BB%E5%8A%A0%E6%8F%92%E4%BB%B6/2020-03-12-21-17-30.png" class></li><li>复制外链播放器的代码<br>打开yilia主题下的<code>_partial</code>文件夹下的<code>left-col.ejs</code>文件复制文件内容到最下端笔者添加了一些判断和表达式</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!-- 网易云音乐插件 --&gt;</span><br><span class="line">&lt;% <span class="keyword">if</span> (theme.music &amp;&amp; theme.music.enable)&#123; %&gt;</span><br><span class="line">    &lt;div style=<span class="string">"position:absolute; bottom:120px left:auto; width:85%"</span>&gt;</span><br><span class="line">        &lt;iframe frameborder=<span class="string">"no"</span> border=<span class="string">"0"</span> marginwidth=<span class="string">"0"</span> marginheight=<span class="string">"0"</span> width=<span class="string">"240"</span> height=<span class="string">"52"</span> src=<span class="string">"//music.163.com/outchain/player?type=2&amp;id=&lt;%=theme.music.id||1334445174%&gt;&amp;auto=&lt;%=theme.music.autoplay?1:0%&gt;&amp;height=32"</span>&gt;&lt;<span class="regexp">/iframe&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><img src="/Hexo%E4%B8%BB%E9%A2%98%E5%8F%98%E6%8D%A2%E4%B8%8E%E6%B7%BB%E5%8A%A0%E6%8F%92%E4%BB%B6/2020-03-12-21-20-12.png" class><ol><li>在yilia主题配置文件中添加属性</li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 网易云音乐插件</span></span><br><span class="line"><span class="attr">music:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment">#id: 1332647902  # 网易云分享的ID</span></span><br><span class="line">  <span class="attr">autoplay:</span> <span class="literal">true</span>  <span class="comment"># 是否开启自动播放</span></span><br></pre></td></tr></table></figure><h2 id="写作的一些说明"><a href="#写作的一些说明" class="headerlink" title="写作的一些说明"></a>写作的一些说明</h2><p>执行命令：hexo new “xxxx”创建Markdown文件，在博客的source_posts文件夹下<br>比如如下例子，<br>comments设置为true允许评论，若设置为false则不能评论<br>reward设置为true允许打赏，若设置为false则不能打赏，（注意对应主题的配置文件reward_type: 设置的为1）<br><img src="/Hexo%E4%B8%BB%E9%A2%98%E5%8F%98%E6%8D%A2%E4%B8%8E%E6%B7%BB%E5%8A%A0%E6%8F%92%E4%BB%B6/2020-03-12-21-10-01.png" class></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;更换主题Theme及基本配置&quot;&gt;&lt;a href=&quot;#更换主题Theme及基本配置&quot; class=&quot;headerlink&quot; title=&quot;更换主题Theme及基本配置&quot;&gt;&lt;/a&gt;更换主题Theme及基本配置&lt;/h1&gt;&lt;h2 id=&quot;更换主题&quot;&gt;&lt;a href=&quot;#更换主题&quot; class=&quot;headerlink&quot; title=&quot;更换主题&quot;&gt;&lt;/a&gt;更换主题&lt;/h2&gt;&lt;p&gt;默认主题是landscape，在themes文件夹下，可以使用别人开发好的主题，这里有很多，我使用的是这一个&lt;a href=&quot;https://github.com/litten/hexo-theme-yilia&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/litten/hexo-theme-yilia&lt;/a&gt;&lt;br&gt;下载之后放到themes文件夹下即可：git clone git@github.com:litten/hexo-theme-yilia.git&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="环境搭建" scheme="https://linbei.top/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="随笔" scheme="https://linbei.top/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="Hexo" scheme="https://linbei.top/tags/Hexo/"/>
    
      <category term="阿里云" scheme="https://linbei.top/tags/%E9%98%BF%E9%87%8C%E4%BA%91/"/>
    
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://linbei.top/"/>
  <updated>2020-09-18T08:57:53.730Z</updated>
  <id>https://linbei.top/</id>
  
  <author>
    <name>Mr Han</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>好文章记录</title>
    <link href="https://linbei.top/%E5%A5%BD%E6%96%87%E7%AB%A0%E8%AE%B0%E5%BD%95/"/>
    <id>https://linbei.top/%E5%A5%BD%E6%96%87%E7%AB%A0%E8%AE%B0%E5%BD%95/</id>
    <published>2020-08-22T13:51:57.000Z</published>
    <updated>2020-09-18T08:57:53.730Z</updated>
    
    <content type="html"><![CDATA[<h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p>常见数据结构可视化网站  <a href="https://www.cs.usfca.edu/~galles/visualization/Algorithms.html" target="_blank" rel="noopener">https://www.cs.usfca.edu/~galles/visualization/Algorithms.html</a></p><h2 id="java基础"><a href="#java基础" class="headerlink" title="java基础"></a>java基础</h2><p>HashMap <a href="http://www.tianxiaobo.com/2018/01/18/HashMap-%E6%BA%90%E7%A0%81%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90-JDK1-8/" target="_blank" rel="noopener">http://www.tianxiaobo.com/2018/01/18/HashMap-%E6%BA%90%E7%A0%81%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90-JDK1-8/</a><br>ArrayList <a href="http://www.tianxiaobo.com/2018/01/28/ArrayList%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/" target="_blank" rel="noopener">http://www.tianxiaobo.com/2018/01/28/ArrayList%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</a><br>LinkedList <a href="http://www.tianxiaobo.com/2018/01/31/LinkedList-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-JDK-1-8/" target="_blank" rel="noopener">http://www.tianxiaobo.com/2018/01/31/LinkedList-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-JDK-1-8/</a><br>LinkedHashMap <a href="http://www.tianxiaobo.com/2018/01/24/LinkedHashMap-%E6%BA%90%E7%A0%81%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90%EF%BC%88JDK1-8%EF%BC%89/" target="_blank" rel="noopener">http://www.tianxiaobo.com/2018/01/24/LinkedHashMap-%E6%BA%90%E7%A0%81%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90%EF%BC%88JDK1-8%EF%BC%89/</a></p><p>TreeMap源码分析 <a href="http://www.tianxiaobo.com/2018/01/11/TreeMap%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/" target="_blank" rel="noopener">http://www.tianxiaobo.com/2018/01/11/TreeMap%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</a></p><p>红黑树详细分析 <a href="http://www.tianxiaobo.com/2018/01/11/%E7%BA%A2%E9%BB%91%E6%A0%91%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90/" target="_blank" rel="noopener">http://www.tianxiaobo.com/2018/01/11/%E7%BA%A2%E9%BB%91%E6%A0%91%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90/</a></p><h2 id="java并发多线程"><a href="#java并发多线程" class="headerlink" title="java并发多线程"></a>java并发多线程</h2><p>Java线程同步的几种方法 <a href="https://blog.csdn.net/love284969214/article/details/7231246?utm_medium=distribute.pc_feed_404.none-task-blog-BlogCommendFromBaidu-1.nonecase&amp;depth_1-utm_source=distribute.pc_feed_404.none-task-blog-BlogCommendFromBaidu-1.nonecas" target="_blank" rel="noopener">https://blog.csdn.net/love284969214/article/details/7231246?utm_medium=distribute.pc_feed_404.none-task-blog-BlogCommendFromBaidu-1.nonecase&amp;depth_1-utm_source=distribute.pc_feed_404.none-task-blog-BlogCommendFromBaidu-1.nonecas</a></p><p>Thread.interrupt()方法 <a href="https://blog.csdn.net/tianyuxingxuan/article/details/76222935" target="_blank" rel="noopener">https://blog.csdn.net/tianyuxingxuan/article/details/76222935</a></p><p>AQS原理： <a href="https://javadoop.com/post/AbstractQueuedSynchronizer" target="_blank" rel="noopener">https://javadoop.com/post/AbstractQueuedSynchronizer</a></p><p>线程池参数设置： <a href="https://blog.csdn.net/zhanht/article/details/79513134" target="_blank" rel="noopener">https://blog.csdn.net/zhanht/article/details/79513134</a></p><h2 id="jvm"><a href="#jvm" class="headerlink" title="jvm"></a>jvm</h2><p>跳表：<a href="https://zhuanlan.zhihu.com/p/53975333" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/53975333</a></p><p>内存泄漏： <a href="https://blog.csdn.net/anxpp/article/details/51325838" target="_blank" rel="noopener">https://blog.csdn.net/anxpp/article/details/51325838</a></p><p>jstate命令： <a href="https://blog.csdn.net/zhaozheng7758/article/details/8623549" target="_blank" rel="noopener">https://blog.csdn.net/zhaozheng7758/article/details/8623549</a></p><p>双亲委派模型破坏 <a href="https://www.jianshu.com/p/09f73af48a98" target="_blank" rel="noopener">https://www.jianshu.com/p/09f73af48a98</a></p><h2 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h2><p>在浏览器中输入 URL 地址到显示主页的过程 <a href="https://segmentfault.com/a/1190000006879700" target="_blank" rel="noopener">https://segmentfault.com/a/1190000006879700</a></p><p>DNS原理总结及其解析过程详解：<a href="https://blog.csdn.net/yipiankongbai/article/details/25031461" target="_blank" rel="noopener">https://blog.csdn.net/yipiankongbai/article/details/25031461</a></p><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><p>覆盖索引：<a href="https://www.cnblogs.com/happyflyingpig/p/7662881.html" target="_blank" rel="noopener">https://www.cnblogs.com/happyflyingpig/p/7662881.html</a></p><p>EXPLAIN 命令详解：<a href="https://www.cnblogs.com/gomysql/p/3720123.html" target="_blank" rel="noopener">https://www.cnblogs.com/gomysql/p/3720123.html</a></p><p>数据库分区、分表、分库、分片 <a href="https://blog.csdn.net/qq_28289405/article/details/80576614?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522159877265019195264521362%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&amp;request_id=159877265019195264521362&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v2~rank_blog_default-4-80576614.pc_v2_rank_blog_default&amp;utm_term=%E8%A1%A8&amp;spm=1018.2118.3001.4187" target="_blank" rel="noopener">https://blog.csdn.net/qq_28289405/article/details/80576614?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522159877265019195264521362%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&amp;request_id=159877265019195264521362&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v2~rank_blog_default-4-80576614.pc_v2_rank_blog_default&amp;utm_term=%E8%A1%A8&amp;spm=1018.2118.3001.4187</a></p><p>MySQL事务隔离级别和MVCC <a href="https://juejin.im/post/6844903808376504327" target="_blank" rel="noopener">https://juejin.im/post/6844903808376504327</a></p><p>详述 MySQL 中的行级锁、表级锁和页级锁 <a href="https://blog.csdn.net/qq_35246620/article/details/69943011" target="_blank" rel="noopener">https://blog.csdn.net/qq_35246620/article/details/69943011</a></p><h2 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h2><p>生命周期： <a href="https://mp.weixin.qq.com/s/GczkZHJ2DdI7cf9g0e6t_w" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/GczkZHJ2DdI7cf9g0e6t_w</a></p><p>spring事务： <a href="https://juejin.im/post/6844903608224333838" target="_blank" rel="noopener">https://juejin.im/post/6844903608224333838</a></p><h2 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a>分布式</h2><p>分布式锁： <a href="https://www.cnblogs.com/seesun2012/p/9214653.html" target="_blank" rel="noopener">https://www.cnblogs.com/seesun2012/p/9214653.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;工具&quot;&gt;&lt;a href=&quot;#工具&quot; class=&quot;headerlink&quot; title=&quot;工具&quot;&gt;&lt;/a&gt;工具&lt;/h2&gt;&lt;p&gt;常见数据结构可视化网站  &lt;a href=&quot;https://www.cs.usfca.edu/~galles/visualization/A
      
    
    </summary>
    
    
      <category term="面试" scheme="https://linbei.top/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="Java" scheme="https://linbei.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>值传递和引用传递</title>
    <link href="https://linbei.top/%E5%80%BC%E4%BC%A0%E9%80%92%E5%92%8C%E5%BC%95%E7%94%A8%E4%BC%A0%E9%80%92/"/>
    <id>https://linbei.top/%E5%80%BC%E4%BC%A0%E9%80%92%E5%92%8C%E5%BC%95%E7%94%A8%E4%BC%A0%E9%80%92/</id>
    <published>2020-08-19T13:51:57.000Z</published>
    <updated>2020-08-19T11:38:16.411Z</updated>
    
    <content type="html"><![CDATA[<p>本文来源于<a href="https://blog.csdn.net/javazejian/article/details/51192130" target="_blank" rel="noopener">此处</a><br>Java 的值传递和引用传递在面试中一般都会都被涉及到，今天我们就来聊聊这个问题，首先我们必须认识到这个问题一般是相对函数而言的，也就是 Java 中的方法参数，那么我们先来回顾一下在程序设计语言中有关参数传递给方法（或函数）的两个专业术语：<br><a id="more"></a></p><blockquote><p>按值调用（call by value）<br>按引用调用（call by reference</p></blockquote><p>所谓的按值调用表示方法接收的是调用着提供的值，而按引用调用则表示方法接收的是调用者提供的变量地址(如果是C语言的话来说就是指针啦，当然java并没有指针的概念)。这里我们需要注意的是一个方法可以修改传递引用所对应的变量值，而不能修改传递值调用所对应的变量值，这句话相当重要，这是按值调用与引用调用的根本区别，当然如果还不理解，没关系，下面就要图文并茂的彻底分析啦。</p><p>前面我们说过java中并不存在引用调用，这点是没错的，因为java程序设计语言确实是采用了按值调用，即call by value。也就是说方法得到的是所有参数值的一个拷贝，方法并不能修改传递给它的任何参数变量的内容。下面我们来看一个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zejian.test;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * java中的按值调用</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zejian</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CallByValue</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> x=<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">updateValue</span><span class="params">(<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">      value = <span class="number">3</span> * value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"调用前x的值："</span>+x);</span><br><span class="line">      updateValue(x);</span><br><span class="line">       System.out.println(<span class="string">"调用后x的值："</span>+x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行程序，结果如下：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">调用前x的值：10</span><br><span class="line">调用后x的值：10</span><br></pre></td></tr></table></figure><p>可以看到x的值并没有变化，接下来我们一起来看一下具体的执行过程：<br><img src="/%E5%80%BC%E4%BC%A0%E9%80%92%E5%92%8C%E5%BC%95%E7%94%A8%E4%BC%A0%E9%80%92/2020-08-19-19-29-03.png" class><br>分析：</p><ol><li>value被初始化为x值的一个拷贝（也就是10）</li><li>value被乘以3后等于30，但注意此时x的值仍为10！</li><li>这个方法结束后，参数变量value不再使用，被回收。</li></ol><p>结论：当传递方法参数类型为基本数据类型（数字以及布尔值）时，一个方法是不可能修改一个基本数据类型的参数。</p><p>当然java中除了基本数据类型还有引用数据类型，也就是对象引用，那么对于这种数据类型又是怎么样的情况呢？我们还是一样先来看一个例子：<br>声明一个User对象类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zejian.test;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name=name;</span><br><span class="line"><span class="keyword">this</span>.age=age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行类如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zejian.test;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * java中的按值调用</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zejian</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CallByValue</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> User user=<span class="keyword">null</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">updateUser</span><span class="params">(User student)</span></span>&#123;</span><br><span class="line">student.setName(<span class="string">"Lishen"</span>);</span><br><span class="line">student.setAge(<span class="number">18</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">user = <span class="keyword">new</span> User(<span class="string">"zhangsan"</span>,<span class="number">26</span>);</span><br><span class="line">System.out.println(<span class="string">"调用前user的值："</span>+user.toString());</span><br><span class="line">updateUser(user);</span><br><span class="line">System.out.println(<span class="string">"调用后user的值："</span>+user.toString());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">调用前user的值：User [name=zhangsan, age=26]</span><br><span class="line">调用后user的值：User [name=Lishen, age=18]</span><br></pre></td></tr></table></figure><p>很显然，User的值被改变了，也就是说方法参数类型如果是引用类型的话，引用类型对应的值将会被修改，下面我们来分析一下这个过程：<br><img src="/%E5%80%BC%E4%BC%A0%E9%80%92%E5%92%8C%E5%BC%95%E7%94%A8%E4%BC%A0%E9%80%92/2020-08-19-19-32-28.png" class></p><p>过程分析：<br>1）student变量被初始化为user值的拷贝，这里是一个对象的引用。<br>2）调用student变量的set方法作用在这个引用对象上，user和student同时引用的User对象内部值被修改。<br>3）方法结束后，student变量不再使用，被释放，而user还是没有变，依然指向User对象。</p><p>结论：当传递方法参数类型为引用数据类型时，一个方法将修改一个引用数据类型的参数所指向对象的值。</p><p>虽然到这里两个数据类型的传递都分析完了，也明白的基本数据类型的传递和引用数据类型的传递区别，前者将不会修改原数据的值，而后者将会修改引用所指向对象的值。可通过上面的实例我们可能就会觉得java同时拥有按值调用和按引用调用啊，可惜的是这样的理解是有误导性的，虽然上面引用传递表面上体现了按引用调用现象，但是java中确实只有按值调用而没有按引用调用。到这里估计不少人都蒙逼了，下面我们通过一个反例来说明（回忆一下开头我们所说明的按值调用与按引用调用的根本区别）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zejian.test;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * java中的按值调用</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zejian</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CallByValue</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> User user=<span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> User stu=<span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 交换两个对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> x</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> y</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(User x,User y)</span></span>&#123;</span><br><span class="line">User temp =x;</span><br><span class="line">x=y;</span><br><span class="line">y=temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">user = <span class="keyword">new</span> User(<span class="string">"user"</span>,<span class="number">26</span>);</span><br><span class="line">stu = <span class="keyword">new</span> User(<span class="string">"stu"</span>,<span class="number">18</span>);</span><br><span class="line">System.out.println(<span class="string">"调用前user的值："</span>+user.toString());</span><br><span class="line">System.out.println(<span class="string">"调用前stu的值："</span>+stu.toString());</span><br><span class="line">swap(user,stu);</span><br><span class="line">System.out.println(<span class="string">"调用后user的值："</span>+user.toString());</span><br><span class="line">System.out.println(<span class="string">"调用后stu的值："</span>+stu.toString());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们通过一个swap函数来交换两个变量user和stu的值，在前面我们说过，如果是按引用调用那么一个方法可以修改传递引用所对应的变量值，也就是说如果java是按引用调用的话，那么swap方法将能够实现数据的交换，而实际运行结果是：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">调用前user的值：User [name=user, age=26]</span><br><span class="line">调用前stu的值：User [name=stu, age=18]</span><br><span class="line">调用后user的值：User [name=user, age=26]</span><br><span class="line">调用后stu的值：User [name=stu, age=18]</span><br></pre></td></tr></table></figure><p>我们发现user和stu的值并没有发生变化，也就是方法并没有改变存储在变量user和stu中的对象引用。swap方法的参数x和y被初始化为两个对象引用的拷贝，这个方法交换的是这两个拷贝的值而已，最终，所做的事都是白费力气罢了。在方法结束后x，y将被丢弃，而原来的变量user和stu仍然引用这个方法调用之前所引用的对象。<br><img src="/%E5%80%BC%E4%BC%A0%E9%80%92%E5%92%8C%E5%BC%95%E7%94%A8%E4%BC%A0%E9%80%92/2020-08-19-19-34-34.png" class></p><p>这个过程也充分说明了java程序设计语言对对象采用的不是引用调用，实际上是对象引用进行的是值传递，当然在这里我们可以简单理解为这就是按值调用和引用调用的区别，而且必须明白即使java函数在传递引用数据类型时，也只是拷贝了引用的值罢了，之所以能修改引用数据是因为它们同时指向了一个对象，但这仍然是按值调用而不是引用调用。</p><p>总结：</p><ul><li>一个方法不能修改一个基本数据类型的参数（数值型和布尔型）。</li><li>一个方法可以修改一个引用所指向的对象状态，但这仍然是按值调用而非引用调用。</li><li>上面两种传递都进行了值拷贝的过程。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文来源于&lt;a href=&quot;https://blog.csdn.net/javazejian/article/details/51192130&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;此处&lt;/a&gt;&lt;br&gt;Java 的值传递和引用传递在面试中一般都会都被涉及到，今天我们就来聊聊这个问题，首先我们必须认识到这个问题一般是相对函数而言的，也就是 Java 中的方法参数，那么我们先来回顾一下在程序设计语言中有关参数传递给方法（或函数）的两个专业术语：&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="面试" scheme="https://linbei.top/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="Java" scheme="https://linbei.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Finally相关问题</title>
    <link href="https://linbei.top/Finally%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/"/>
    <id>https://linbei.top/Finally%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</id>
    <published>2020-08-18T13:51:57.000Z</published>
    <updated>2020-08-20T04:19:11.342Z</updated>
    
    <content type="html"><![CDATA[<p>问题描述：try{}里有一个return语句，那么紧跟在这个try{}后面的finally{}中的代码是否会被执行？如果会的话，什么时候被执行，在return之前还是return之后？<br><a id="more"></a><br>在Java语言的异常处理中，finally块的作用就是为了保证无论出现什么情况，finally块里的代码一定会被执行。由于程序执行return就意味着结束对当前函数的调用并跳出这个函数体，因此任何语句要执行都只能在return前执行（除非碰到exit函数），因此finally块里的代码也是在return之前执行的。此外，如果try-finally或者catch-finally中都有return，那么finally块中的return将会覆盖别处的return语句，最终返回到调用者那里的是finally中return的值。下面通过一个例子来说明这个问题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.js;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * try-catch中有return语句，finally中代码运行时机问题</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> hanlinbei</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">testFinally</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">System.out.println(<span class="string">"execute finally"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> result = testFinally();</span><br><span class="line">System.out.println(result);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">execute finally</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p>从上面这个例子中可以看出，在执行return语句前确实执行了finally块中的代码。紧接着，在finally块里放置个return语句，来看看到底最终返回的是哪个return语句的值，例子如下图所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.js;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * try-catch中有多个return语句，研究return的是哪一个</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> hanlinbei</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">testFinally</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">System.out.println(<span class="string">"execute finally"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> result = testFinally();</span><br><span class="line">System.out.println(result);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">execute finally</span><br><span class="line">3</span><br></pre></td></tr></table></figure><p>从以上运行结果可以看出，当finally块中有return语句时，将会覆盖函数中其他return语句。此外，由于在一个方法内部定义的变量都存储在栈中，当这个函数结束后，其对应的栈就会被回收，此时在其方法体中定义的变量将不存在了，因此，对基本类型的数据，在finally块中改变return的值对返回值没有任何影响，而对引用类型的数据会有影响。下面通过一个例子来说明这个问题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.js;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在finally块中改变基本数据类型、引用类型对比</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> hanlinbei</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">testFinally1</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> result = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">result = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">result = <span class="number">3</span>;</span><br><span class="line">System.out.println(<span class="string">"execute finally1"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> StringBuffer <span class="title">testFinally2</span><span class="params">()</span></span>&#123;</span><br><span class="line">StringBuffer s = <span class="keyword">new</span> StringBuffer(<span class="string">"Hello"</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">return</span> s;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">s.append(<span class="string">" World"</span>);</span><br><span class="line">System.out.println(<span class="string">"execute finally2"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> result = testFinally1();</span><br><span class="line">System.out.println(result);</span><br><span class="line">StringBuffer resultRef = testFinally2();</span><br><span class="line">System.out.println(resultRef);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">execute finally1</span><br><span class="line">2</span><br><span class="line">execute finally2</span><br><span class="line">Hello World</span><br></pre></td></tr></table></figure><p>程序在执行到return时会首先将返回值存储在一个指定的位置，其次去执行finally块，最后再返回。在方法testFinally1中调用return前，先把result的值1存储在一个指定的位置，然后再去执行finally块中的代码，此时修改result的值将不会影响到程序的返回结果。testFinally2中，在调用return前先把s存储到一个指定的位置，由于s为引用类型，因此在finally中修改s将会修改程序的返回结果。</p><p>引申：出现在Java程序中的finally块是不是一定会被执行？<br>答案：不一定。</p><p>下面给出两个finally块不会被执行的例子：<br>1）、当程序进入try块之前就出现异常时，会直接结束，不会执行finally块中的代码，示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.js;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在try之前发生异常</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> hanlinbei</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testFinally1</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> result = <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"try block"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">System.out.println(<span class="string">"catch block"</span>);</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">System.out.println(<span class="string">"finally block"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">testFinally1();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread "main" java.lang.ArithmeticException: / by zero</span><br><span class="line">at com.js.Test.testFinally1(Test.java:9)</span><br><span class="line">at com.js.Test.main(Test.java:19)</span><br></pre></td></tr></table></figure><p>程序在执行1/0时会抛出异常，导致没有执行try块，因此finally块也就不会被执行。</p><p>2）、当程序在try块中强制退出时也不会去执行finally块中的代码，示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.js;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在try之前发生异常</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> hanlinbei</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testFinally1</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"try block"</span>);</span><br><span class="line">System.exit(<span class="number">0</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">System.out.println(<span class="string">"catch block"</span>);</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">System.out.println(<span class="string">"finally block"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">testFinally1();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">try block</span><br></pre></td></tr></table></figure><p>上例在try块中通过调用System.exit(0)强制退出了程序，因此导致finally块中的代码没有被执行</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;问题描述：try{}里有一个return语句，那么紧跟在这个try{}后面的finally{}中的代码是否会被执行？如果会的话，什么时候被执行，在return之前还是return之后？&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="面试" scheme="https://linbei.top/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="Java" scheme="https://linbei.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>重载和重写</title>
    <link href="https://linbei.top/Java%E9%87%8D%E8%BD%BD%E5%92%8C%E9%87%8D%E5%86%99/"/>
    <id>https://linbei.top/Java%E9%87%8D%E8%BD%BD%E5%92%8C%E9%87%8D%E5%86%99/</id>
    <published>2020-08-17T03:11:57.000Z</published>
    <updated>2020-08-19T11:38:16.396Z</updated>
    
    <content type="html"><![CDATA[<p>Java的重载和重写<br><a id="more"></a><br>之前刷选择题刷了挺多，碰到过重载和重写区别的题挺多的，当时感觉记住了，可回过头来看结果又有些东西忘记了，所以还是写篇文章记录下吧。</p><h2 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h2><ol><li>重载是多态在编译器时期的表现形式</li><li>重载的判定只有两个条件，方法名一致、形参列表不同，返回值不同不能作为判断条件</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        Father s = <span class="keyword">new</span> Father();</span><br><span class="line">        s.sayHello();</span><br><span class="line">        s.sayHello(<span class="string">"wintershii"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello"</span> + <span class="string">" "</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h2><ol><li>重写是在方法运行时，通过调用者的实际类型来确定方法的调用版本</li><li>重写只发生在可见的实例方法中。静态方法不存在重写，形式上的重写只能说是隐藏。私有方法不存在重写，父类中private方法子类就算定义了，相当于一个新方法。静态方法和实例方法不存在相互重写。</li><li>重写满足一个原则：两同两小一大。两同是方法名和形参列表相同。两小指的是重写方法的返回值和抛出异常要和被重写方法的返回值和抛出的异常相同或者是其子类，注意，一旦返回值是基本数据类型，那么重写方法和被重写方法必须相同，且不存在自动拆装箱问题。一大指的是重写方法的访问修饰符要大于等于被重写方法的访问修饰符。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        Son s = <span class="keyword">new</span> Son();</span><br><span class="line">        s.sayHello();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        System.out.println(<span class="string">"hello by "</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="面试时，问：重载（Overload）和重写（Override）的区别"><a href="#面试时，问：重载（Overload）和重写（Override）的区别" class="headerlink" title="面试时，问：重载（Overload）和重写（Override）的区别"></a>面试时，问：重载（Overload）和重写（Override）的区别</h3><blockquote><p>答：方法的重载和重写都是实现多态的方式，区别在于前者实现的是编译时的多台性，后者实现的是运行时的多态性。重载发生在一个类中，同名的方法如果有不同的参数列表(参数类型不同，参数个数不同或者两者都不同)则被视为重载；重写发生在子类与父类之间，重写要求子类被重写方法与父类被重写方法有相同的参数列表，有兼容的返回类型，有比父类被重写方法更好访问，不能比父类被重写方法声明更多的异常(里氏替换原则)。重载对返回值类型没有特殊的要求，不能根据返回类型进行区分。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Java的重载和重写&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="面试" scheme="https://linbei.top/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="面经" scheme="https://linbei.top/tags/%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>Java基础疑难点</title>
    <link href="https://linbei.top/Java%E5%9F%BA%E7%A1%80%E7%96%91%E9%9A%BE%E7%82%B9/"/>
    <id>https://linbei.top/Java%E5%9F%BA%E7%A1%80%E7%96%91%E9%9A%BE%E7%82%B9/</id>
    <published>2020-08-14T13:51:57.000Z</published>
    <updated>2020-08-20T04:20:00.024Z</updated>
    
    <content type="html"><![CDATA[<h2 id="接口和抽象类的不同"><a href="#接口和抽象类的不同" class="headerlink" title="接口和抽象类的不同"></a>接口和抽象类的不同</h2><a id="more"></a><p>不同点：</p><ol><li>抽象类可以定义构造函数，接口不可以</li><li>抽象类可以有抽象方法和具体方法，接口中只能有抽象方法(public abstact)</li><li>抽象类中的成员权限可以是 public、默认、protected（抽象类中抽象方法就是为了重<br>写，所以不能被 private 修饰），而接口中的成员只可以是 public（方法默认：public<br>abstrat、成员变量默认：public static final)</li></ol><blockquote><p>在 Java8 中，允许在接口中包含带有具体实现的方法，使用 default 修饰，这类方法就是默认方法。</p></blockquote><ol><li>抽象类中可以包含静态方法，而接口中不可以包含静态方法</li></ol><blockquote><p>抽象类中可以包含静态方法，在 JDK1.8 之前接口中不能包含静态方法，JDK1.8 以后<br>可以包含。之前不能包含是因为，接口不可以实现方法，只可以定义方法，所以不能<br>使用静态方法（因为静态方法必须实现）。现在可以包含了，只能直接用接口调用静<br>态方法。1.8 仍然不可以包含静态代码块。<br>接口的成员变量默认是 public static final，static 是为了保证变量只有一份，因为一<br>个类可以实现多个接口，定义为 static 后，如果出现重名，那么存储在静态存储区的<br>时候就会报错，因为静态存储区已经有一份了，你改名吧（成员变量可以通过接口和<br>实现接口的类来调用）。final 是因为接口的东西是大家共用的，不能随便修改。</p></blockquote><p>相同点：</p><ol><li>都不能被实例化；</li><li>可以将抽象类和接口作为引用类型；</li><li>一个类如何继承了某个抽象类或者实现了某个接口，就必须对其中所有的抽象方法全部<br>进行实现，否则该类仍然需要被声明为抽象类.</li></ol><h2 id="零碎知识点"><a href="#零碎知识点" class="headerlink" title="零碎知识点"></a>零碎知识点</h2><p>Java 对于 [-128, 127] 之间的数会进行缓存，比如：<br>Integer i = 127，会将 127 进行缓存，下次再写 Integer j = 127 的时候，就会直接从缓<br>存中取出，而对于这个区间之外的数就需要 new 了。</p><p>try-catch-finally 中catch可以被忽略。</p><p>初始化顺序</p><blockquote><ol><li>父类（静态变量、静态语句块）</li><li>子类（静态变量、静态语句块）</li><li>父类（实例变量、普通语句块）</li><li>父类（构造函数）</li><li>子类（实例变量、普通语句块）</li><li>子类（构造函数）</li></ol></blockquote><p>this 和 super 不能同时出现在一个构造函数里面</p><p>transient 只能修饰变量，不能修饰类和方法。</p><p>为什么重写 equals() 就一定要重写 hashCode() 方法？</p><blockquote><p>这个问题应该是有个前提，就是你需要用到 HashMap、HashSet 等 Java 集合。用不到哈希表的话，其实仅仅重写 equals() 方法也可以吧。而工作中的场景是常常用到 Java 集合，所以 Java 官方建议重写 equals() 就一定要重写 hashCode() 方法。</p></blockquote><p>对于对象集合的判重，如果一个集合含有 10000 个对象实例，仅仅使用 equals() 方法的话，那么对于一个对象判重就需要比较 10000 次，随着集合规模的增大，时间开销是很大的。但是同时使用哈希表的话，就能快速定位到对象的大概存储位置，并且在定位到大概存储位置后，后续比较过程中，如果两个对象的 hashCode 不相同，也不再需要调用equals() 方法，从而大大减少了 equals() 比较次数。<br>所以从程序实现原理上来讲的话，既需要 equals() 方法，也需要 hashCode() 方法。那么既然重写了 equals()，那么也要重写 hashCode() 方法，以保证两者之间的配合关系。</p><p>hashCode（）与equals（）的相关规定：</p><ol><li>如果两个对象相等，则 hashCode 一定也是相同的；</li><li>两个对象相等，对两个对象分别调用 equals 方法都返回 true；</li><li>两个对象有相同的 hashCode 值，它们也不一定是相等的；</li><li>因此，equals 方法被覆盖过，则 hashCode 方法也必须被覆盖；</li><li>hashCode() 的默认行为是对堆上的对象产生独特值。如果没有重写 hashCode()，则该 class 的两个对象无论如何都不会相等（即使这两个对象指向相同的数据）</li></ol><p>Array 不支持泛型，要用 List 代替 Array，因为 List 可以提供编译器的类型安全保证，而 Array却不能。</p><p>Comparable 和 Comparator 区别比较</p><ol><li>Comparable 相当于“内部比较器”，而 Comparator 相当于“外部比较器”；</li><li>Comparable 和 Comparator 是用来实现集合中元素的比较、排序的；</li><li>Comparable 是在集合内部定义的方法实现的排序，位于 java.lang 下；Comparator在集合外部实现的排序，位于 java.util 下；</li><li>Comparable 是一个对象本身就已经支持自比较所需要实现的接口，如 String、Integer 自己就实现了 Comparable 接口，可完成比较大小操作。自定义类要在加入 list容器中后能够排序，也可以实现 Comparable 接口，在用 Collections 类的 sort 方法排序时若不指定 Comparator，那就以自然顺序排序。所谓自然顺序就是实现 Comparable 接口设定的排序方式。</li><li>Comparator 是一个专用的比较器，当这个对象不支持自比较或者自比较函数不能满足要求时，可写一个比较器来完成两个对象之间大小的比较。</li><li>Comparator 体现了一种策略模式 (strategy design pattern)，就是不改变对象自身，而用一个策略对象 (strategy object) 来改变它的行为。</li></ol><p>总而言之 Comparable 是自已完成比较，Comparator 是外部程序实现比较。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;接口和抽象类的不同&quot;&gt;&lt;a href=&quot;#接口和抽象类的不同&quot; class=&quot;headerlink&quot; title=&quot;接口和抽象类的不同&quot;&gt;&lt;/a&gt;接口和抽象类的不同&lt;/h2&gt;
    
    </summary>
    
    
      <category term="面试" scheme="https://linbei.top/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="Java" scheme="https://linbei.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>HashMap死循环</title>
    <link href="https://linbei.top/HashMap%E6%AD%BB%E5%BE%AA%E7%8E%AF/"/>
    <id>https://linbei.top/HashMap%E6%AD%BB%E5%BE%AA%E7%8E%AF/</id>
    <published>2020-07-19T13:51:57.000Z</published>
    <updated>2020-09-18T08:57:53.714Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="HashMap的rehash源代码"><a href="#HashMap的rehash源代码" class="headerlink" title="HashMap的rehash源代码"></a>HashMap的rehash源代码</h2><p>Put一个Key,Value对到Hash表中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ......</span><br><span class="line">    <span class="comment">//算Hash值</span></span><br><span class="line">    <span class="keyword">int</span> hash = hash(key.hashCode());</span><br><span class="line">    <span class="keyword">int</span> i = indexFor(hash, table.length);</span><br><span class="line">    <span class="comment">//如果该key已被插入，则替换掉旧的value （链接操作）</span></span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[i]; e != <span class="keyword">null</span>; e = e.next) &#123;</span><br><span class="line">        Object k;</span><br><span class="line">        <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123;</span><br><span class="line">            V oldValue = e.value;</span><br><span class="line">            e.value = value;</span><br><span class="line">            e.recordAccess(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="comment">//该key不存在，需要增加一个结点</span></span><br><span class="line">    addEntry(hash, key, value, i);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>检查容量是否超标</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addEntry</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">int</span> bucketIndex)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Entry&lt;K,V&gt; e = table[bucketIndex];</span><br><span class="line">    table[bucketIndex] = <span class="keyword">new</span> Entry&lt;K,V&gt;(hash, key, value, e);</span><br><span class="line">    <span class="comment">//查看当前的size是否超过了我们设定的阈值threshold，如果超过，需要resize</span></span><br><span class="line">    <span class="keyword">if</span> (size++ &gt;= threshold)</span><br><span class="line">        resize(<span class="number">2</span> * table.length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建一个更大尺寸的hash表，然后把数据从老的Hash表中迁移到新的Hash表中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> newCapacity)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Entry[] oldTable = table;</span><br><span class="line">    <span class="keyword">int</span> oldCapacity = oldTable.length;</span><br><span class="line">    ......</span><br><span class="line">    <span class="comment">//创建一个新的Hash Table</span></span><br><span class="line">    Entry[] newTable = <span class="keyword">new</span> Entry[newCapacity];</span><br><span class="line">    <span class="comment">//将Old Hash Table上的数据迁移到New Hash Table上</span></span><br><span class="line">    transfer(newTable);</span><br><span class="line">    table = newTable;</span><br><span class="line">    threshold = (<span class="keyword">int</span>)(newCapacity * loadFactor);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>迁移的源代码，注意高亮处：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">transfer</span><span class="params">(Entry[] newTable)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Entry[] src = table;</span><br><span class="line">    <span class="keyword">int</span> newCapacity = newTable.length;</span><br><span class="line">    <span class="comment">//下面这段代码的意思是：</span></span><br><span class="line">    <span class="comment">//  从OldTable里摘一个元素出来，然后放到NewTable中</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; src.length; j++) &#123;</span><br><span class="line">        Entry&lt;K,V&gt; e = src[j];</span><br><span class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">            src[j] = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                Entry&lt;K,V&gt; next = e.next;</span><br><span class="line">                <span class="keyword">int</span> i = indexFor(e.hash, newCapacity);</span><br><span class="line">                e.next = newTable[i];</span><br><span class="line">                newTable[i] = e;</span><br><span class="line">                e = next;</span><br><span class="line">            &#125; <span class="keyword">while</span> (e != <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好了，这个代码算是比较正常的。而且没有什么问题。</p><h2 id="正常的ReHash的过程"><a href="#正常的ReHash的过程" class="headerlink" title="正常的ReHash的过程"></a>正常的ReHash的过程</h2><ul><li>我假设了我们的hash算法就是简单的用key mod 一下表的大小（也就是数组的长度）。</li><li>最上面的是old hash 表，其中的Hash表的size=2, 所以key = 3, 7, 5，在mod 2以后都冲突在table[1]这里了。</li><li>接下来的三个步骤是Hash表 resize成4，然后所有的<key,value> 重新rehash的过程<img src="/HashMap%E6%AD%BB%E5%BE%AA%E7%8E%AF/2020-08-22-21-16-02.png" class></key,value></li></ul><h2 id="并发下的Rehash"><a href="#并发下的Rehash" class="headerlink" title="并发下的Rehash"></a>并发下的Rehash</h2><p>1）假设我们有两个线程。我用红色和浅蓝色标注了一下。<br>我们再回头看一下我们的 transfer代码中的这个细节：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    Entry&lt;K,V&gt; next = e.next; <span class="comment">// &lt;--假设线程一执行到这里就被调度挂起了</span></span><br><span class="line">    <span class="keyword">int</span> i = indexFor(e.hash, newCapacity);</span><br><span class="line">    e.next = newTable[i];</span><br><span class="line">    newTable[i] = e;</span><br><span class="line">    e = next;</span><br><span class="line">&#125; <span class="keyword">while</span> (e != <span class="keyword">null</span>);</span><br></pre></td></tr></table></figure><p>而我们的线程二执行完成了。于是我们有下面的这个样子。<br><img src="/HashMap%E6%AD%BB%E5%BE%AA%E7%8E%AF/2020-08-22-21-16-58.png" class><br>注意，因为Thread1的 e 指向了key(3)，而next指向了key(7)，其在线程二rehash后，指向了线程二重组后的链表。我们可以看到链表的顺序被反转后。</p><p>2）线程一被调度回来执行。</p><ul><li>先是执行 newTalbe[i] = e;</li><li>然后是e = next，导致了e指向了key(7)，</li><li>而下一次循环的next = e.next导致了next指向了key<img src="/HashMap%E6%AD%BB%E5%BE%AA%E7%8E%AF/2020-08-22-21-17-46.png" class></li></ul><p>(3)一切安好。<br>线程一接着工作。把key(7)摘下来，放到newTable[i]的第一个，然后把e和next往下移。<br><img src="/HashMap%E6%AD%BB%E5%BE%AA%E7%8E%AF/2020-08-22-21-18-15.png" class><br>4）环形链接出现。<br>e.next = newTable[i] 导致  key(3).next 指向了 key(7)</p><p>注意：此时的key(7).next 已经指向了key(3)， 环形链表就这样出现了。<br><img src="/HashMap%E6%AD%BB%E5%BE%AA%E7%8E%AF/2020-08-22-21-18-39.png" class><br>于是，当我们的线程一调用到，HashTable.get(11)时，悲剧就出现了——Infinite Loop。</p><p>本文参考：<a href="https://coolshell.cn/articles/9606.html" target="_blank" rel="noopener">https://coolshell.cn/articles/9606.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;HashMap的rehash源代码&quot;&gt;&lt;a href=&quot;#HashMap的rehash源代码&quot; class=&quot;headerlink&quot; title=&quot;HashMap的rehash源代码&quot;&gt;&lt;/a&gt;HashMap的rehash源代码
      
    
    </summary>
    
    
      <category term="面试" scheme="https://linbei.top/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="Java" scheme="https://linbei.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>FastFail机制</title>
    <link href="https://linbei.top/Fast-Fail%E6%9C%BA%E5%88%B6/"/>
    <id>https://linbei.top/Fast-Fail%E6%9C%BA%E5%88%B6/</id>
    <published>2020-07-18T13:51:57.000Z</published>
    <updated>2020-09-18T08:57:53.714Z</updated>
    
    <content type="html"><![CDATA[<p>fail-fast 机制，即快速失败机制，是java集合(Collection)中的一种错误检测机制。当在迭代集合的过程中该集合在结构上发生改变的时候，就有可能会发生fail-fast，即抛出ConcurrentModificationException异常。fail-fast机制并不保证在不同步的修改下一定会抛出异常，它只是尽最大努力去抛出，所以这种机制一般仅用于检测bug。</p><a id="more"></a><h2 id="fail-fast的出现场景"><a href="#fail-fast的出现场景" class="headerlink" title="fail-fast的出现场景"></a>fail-fast的出现场景</h2><p>在我们常见的java集合中就可能出现fail-fast机制,比如ArrayList，HashMap。在多线程和单线程环境下都有可能出现快速失败。</p><h3 id="单线程环境下的fail-fast"><a href="#单线程环境下的fail-fast" class="headerlink" title="单线程环境下的fail-fast"></a>单线程环境下的fail-fast</h3><p>ArrayList发生fail-fast例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">10</span> ; i++ ) &#123;</span><br><span class="line">           list.add(i + <span class="string">""</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      Iterator&lt;String&gt; iterator = list.iterator();</span><br><span class="line">      <span class="keyword">int</span> i = <span class="number">0</span> ;</span><br><span class="line">      <span class="keyword">while</span>(iterator.hasNext()) &#123;</span><br><span class="line">           <span class="keyword">if</span> (i == <span class="number">3</span>) &#123;</span><br><span class="line">                list.remove(<span class="number">3</span>);</span><br><span class="line">           &#125;</span><br><span class="line">           System.out.println(iterator.next());</span><br><span class="line">           i ++;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该段代码定义了一个Arraylist集合，并使用迭代器遍历，在遍历过程中，刻意在某一步迭代中remove一个元素，这个时候，就会发生fail-fast。<br><img src="/Fast-Fail%E6%9C%BA%E5%88%B6/2020-08-22-21-02-07.png" class><br>HashMap发生fail-fast：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">10</span> ; i ++ ) &#123;</span><br><span class="line">           map.put(i+<span class="string">""</span>, i+<span class="string">""</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      Iterator&lt;Entry&lt;String, String&gt;&gt; it = map.entrySet().iterator();</span><br><span class="line">      <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">           <span class="keyword">if</span> (i == <span class="number">3</span>) &#123;</span><br><span class="line">                map.remove(<span class="number">3</span>+<span class="string">""</span>);</span><br><span class="line">           &#125;</span><br><span class="line">           Entry&lt;String, String&gt; entry = it.next();</span><br><span class="line">           System.out.println(<span class="string">"key= "</span> + entry.getKey() + <span class="string">" and value= "</span> + entry.getValue());</span><br><span class="line">           i++;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该段代码定义了一个hashmap对象并存放了10个键值对，在迭代遍历过程中，使用map的remove方法移除了一个元素，导致抛出了ConcurrentModificationException异常：<br><img src="/Fast-Fail%E6%9C%BA%E5%88%B6/2020-08-22-21-02-45.png" class></p><h3 id="多线程环境下"><a href="#多线程环境下" class="headerlink" title="多线程环境下"></a>多线程环境下</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FailFastTest</span> </span>&#123;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"> </span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread1</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                Iterator&lt;String&gt; iterator = list.iterator();</span><br><span class="line">                <span class="keyword">while</span>(iterator.hasNext()) &#123;</span><br><span class="line">                     String s = iterator.next();</span><br><span class="line">                     System.out.println(<span class="keyword">this</span>.getName() + <span class="string">":"</span> + s);</span><br><span class="line">                     <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">super</span>.run();</span><br><span class="line">           &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread2</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">           <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">while</span> (i &lt; <span class="number">10</span>) &#123;</span><br><span class="line">                     System.out.println(<span class="string">"thread2:"</span> + i);</span><br><span class="line">                     <span class="keyword">if</span> (i == <span class="number">2</span>) &#123;</span><br><span class="line">                           list.remove(i);</span><br><span class="line">                     &#125;</span><br><span class="line">                     <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                     i ++;</span><br><span class="line">                &#125;</span><br><span class="line">           &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">10</span>;i++)&#123;</span><br><span class="line">            list.add(i+<span class="string">""</span>);</span><br><span class="line">        &#125;</span><br><span class="line">           MyThread1 thread1 = <span class="keyword">new</span> MyThread1();</span><br><span class="line">           MyThread2 thread2 = <span class="keyword">new</span> MyThread2();</span><br><span class="line">           thread1.setName(<span class="string">"thread1"</span>);</span><br><span class="line">           thread2.setName(<span class="string">"thread2"</span>);</span><br><span class="line">           thread1.start();</span><br><span class="line">           thread2.start();</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动两个线程，分别对其中一个对list进行迭代，另一个在线程1的迭代过程中去remove一个元素，结果也是抛出了java.util.ConcurrentModificationException<br><img src="/Fast-Fail%E6%9C%BA%E5%88%B6/2020-08-22-21-03-38.png" class></p><h3 id="fail-fast的原理"><a href="#fail-fast的原理" class="headerlink" title="fail-fast的原理"></a>fail-fast的原理</h3><p>fail-fast是如何抛出ConcurrentModificationException异常的，又是在什么情况下才会抛出?<br>我们知道，对于集合如list，map类，我们都可以通过迭代器来遍历，而Iterator其实只是一个接口，具体的实现还是要看具体的集合类中的内部类去实现Iterator并实现相关方法。这里我们就以ArrayList类为例。在ArrayList中，当调用list.iterator()时，其源码是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Itr();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>即它会返回一个新的Itr类，而Itr类是ArrayList的内部类，实现了Iterator接口，下面是该类的源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * An optimized version of AbstractList.Itr</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Itr</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cursor;       <span class="comment">// index of next element to return</span></span><br><span class="line">    <span class="keyword">int</span> lastRet = -<span class="number">1</span>; <span class="comment">// index of last element returned; -1 if no such</span></span><br><span class="line">    <span class="keyword">int</span> expectedModCount = modCount;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cursor != size;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        checkForComodification();</span><br><span class="line">        <span class="keyword">int</span> i = cursor;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= size)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">        Object[] elementData = ArrayList.<span class="keyword">this</span>.elementData;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= elementData.length)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        cursor = i + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> (E) elementData[lastRet = i];</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (lastRet &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">        checkForComodification();</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ArrayList.<span class="keyword">this</span>.remove(lastRet);</span><br><span class="line">            cursor = lastRet;</span><br><span class="line">            lastRet = -<span class="number">1</span>;</span><br><span class="line">            expectedModCount = modCount;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">forEachRemaining</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> E&gt; consumer)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(consumer);</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> size = ArrayList.<span class="keyword">this</span>.size;</span><br><span class="line">        <span class="keyword">int</span> i = cursor;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= size) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> Object[] elementData = ArrayList.<span class="keyword">this</span>.elementData;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= elementData.length) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (i != size &amp;&amp; modCount == expectedModCount) &#123;</span><br><span class="line">            consumer.accept((E) elementData[i++]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// update once at end of iteration to reduce heap write traffic</span></span><br><span class="line">        cursor = i;</span><br><span class="line">        lastRet = i - <span class="number">1</span>;</span><br><span class="line">        checkForComodification();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">checkForComodification</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，有三个属性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> cursor;       <span class="comment">// index of next element to return</span></span><br><span class="line"><span class="keyword">int</span> lastRet = -<span class="number">1</span>; <span class="comment">// index of last element returned; -1 if no such</span></span><br><span class="line"><span class="keyword">int</span> expectedModCount = modCount;</span><br></pre></td></tr></table></figure><p>cursor是指集合遍历过程中的即将遍历的元素的索引，lastRet是cursor -1，默认为-1，即不存在上一个时，为-1，它主要用于记录刚刚遍历过的元素的索引。expectedModCount这个就是fail-fast判断的关键变量了，它初始值就为ArrayList中的modCount。（modCount是抽象类AbstractList中的变量，默认为0，而ArrayList 继承了AbstractList ，所以也有这个变量，modCount用于记录集合操作过程中作的修改次数，与size还是有区别的，并不一定等于size）<br>我们一步一步来看：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> cursor != size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>迭代器迭代结束的标志就是hasNext()返回false，而该方法就是用cursor游标和size(集合中的元素数目)进行对比，当cursor等于size时，表示已经遍历完成。<br>接下来看看最关心的next()方法，看看为什么在迭代过程中，如果有线程对集合结构做出改变，就会发生fail-fast：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line"> <span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     checkForComodification();</span><br><span class="line">     <span class="keyword">int</span> i = cursor;</span><br><span class="line">     <span class="keyword">if</span> (i &gt;= size)</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">     Object[] elementData = ArrayList.<span class="keyword">this</span>.elementData;</span><br><span class="line">     <span class="keyword">if</span> (i &gt;= elementData.length)</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">     cursor = i + <span class="number">1</span>;</span><br><span class="line">     <span class="keyword">return</span> (E) elementData[lastRet = i];</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>从源码知道，每次调用next()方法，在实际访问元素前，都会调用checkForComodification方法，该方法源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">checkForComodification</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出，该方法才是判断是否抛出ConcurrentModificationException异常的关键。在该段代码中，当modCount != expectedModCount<br>时，就会抛出该异常。但是在一开始的时候，expectedModCount初始值默认等于modCount，为什么会出现modCount != expectedModCount，很明显expectedModCount在整个迭代过程除了一开始赋予初始值modCount外，并没有再发生改变，所以可能发生改变的就只有modCount，在前面关于ArrayList扩容机制的分析中，可以知道在ArrayList进行add，remove，clear等涉及到修改集合中的元素个数的操作时，modCount就会发生改变(modCount ++),所以当另一个线程(并发修改)或者同一个线程遍历过程中，调用相关方法使集合的个数发生改变，就会使modCount发生变化，这样checkForComodification方法中就会抛出ConcurrentModificationException异常。类似的，hashMap中发生的原理也是一样的。</p><h3 id="避免fail-fas"><a href="#避免fail-fas" class="headerlink" title="避免fail-fas"></a>避免fail-fas</h3><p>了解了fail-fast机制的产生原理，接下来就看看如何解决fail-fast<br>方法1<br>在单线程的遍历过程中，如果要进行remove操作，可以调用迭代器的remove方法而不是集合类的remove方法。看看ArrayList中迭代器的remove方法的源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (lastRet &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">    checkForComodification();</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ArrayList.<span class="keyword">this</span>.remove(lastRet);</span><br><span class="line">        cursor = lastRet;</span><br><span class="line">        lastRet = -<span class="number">1</span>;</span><br><span class="line">        expectedModCount = modCount;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，该remove方法并不会修改modCount的值，并且不会对后面的遍历造成影响，因为该方法remove不能指定元素，只能remove当前遍历过的那个元素，所以调用该方法并不会发生fail-fast现象。该方法有局限性。<br>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">10</span> ; i++ ) &#123;</span><br><span class="line">           list.add(i + <span class="string">""</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      Iterator&lt;String&gt; iterator = list.iterator();</span><br><span class="line">      <span class="keyword">int</span> i = <span class="number">0</span> ;</span><br><span class="line">      <span class="keyword">while</span>(iterator.hasNext()) &#123;</span><br><span class="line">           <span class="keyword">if</span> (i == <span class="number">3</span>) &#123;</span><br><span class="line">                iterator.remove(); <span class="comment">//迭代器的remove()方法</span></span><br><span class="line">           &#125;</span><br><span class="line">           System.out.println(iterator.next());</span><br><span class="line">           i ++;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法2<br>使用java并发包(java.util.concurrent)中的类来代替ArrayList 和hashMap。比如使用 CopyOnWriterArrayList代替ArrayList，CopyOnWriterArrayList在是使用上跟ArrayList几乎一样，CopyOnWriter是写时复制的容器(COW)，在读写时是线程安全的。该容器在对add和remove等操作时，并不是在原数组上进行修改，而是将原数组拷贝一份，在新数组上进行修改，待完成后，才将指向旧数组的引用指向新数组，所以对于CopyOnWriterArrayList在迭代过程并不会发生fail-fast现象。但 CopyOnWrite容器只能保证数据的最终一致性，不能保证数据的实时一致性。对于HashMap，可以使用ConcurrentHashMap，ConcurrentHashMap采用了锁机制，是线程安全的。在迭代方面，ConcurrentHashMap使用了一种不同的迭代方式。在这种迭代方式中，当iterator被创建后集合再发生改变就不再是抛出ConcurrentModificationException，取而代之的是在改变时new新的数据从而不影响原有的数据 ，iterator完成后再将头指针替换为新的数据 ，这样iterator线程可以使用原来老的数据，而写线程也可以并发的完成改变。即迭代不会发生fail-fast，但不保证获取的是最新的数据。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;fail-fast 机制，即快速失败机制，是java集合(Collection)中的一种错误检测机制。当在迭代集合的过程中该集合在结构上发生改变的时候，就有可能会发生fail-fast，即抛出ConcurrentModificationException异常。fail-fast机制并不保证在不同步的修改下一定会抛出异常，它只是尽最大努力去抛出，所以这种机制一般仅用于检测bug。&lt;/p&gt;
    
    </summary>
    
    
      <category term="面试" scheme="https://linbei.top/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="Java" scheme="https://linbei.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>ArrayList源码分析</title>
    <link href="https://linbei.top/ArrayList%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>https://linbei.top/ArrayList%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</id>
    <published>2020-07-17T13:51:57.000Z</published>
    <updated>2020-09-18T08:57:53.683Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ArrayList概述"><a href="#ArrayList概述" class="headerlink" title="ArrayList概述"></a>ArrayList概述</h2><ol><li>ArrayList 是一种变长的集合类，基于定长数组实现。</li><li>ArrayList 允许空值和重复元素，当往 ArrayList 中添加的元素数量大于其底层数组容量时，其会通过扩容机制重新生成一个更大的数组。</li><li>由于 ArrayList 底层基于数组实现，所以其可以保证在 O(1) 复杂度下完成随机查找操作。</li><li>ArrayList 是非线程安全类，并发环境下，多个线程同时操作 ArrayList，会引发不可预知的异常或错误</li></ol><a id="more"></a><h2 id="ArrayList的成员属性"><a href="#ArrayList的成员属性" class="headerlink" title="ArrayList的成员属性"></a>ArrayList的成员属性</h2><p>DEFAULTCAPACITY_EMPTY_ELEMENTDATA与EMPTY_ELEMENTDATA的区别是：当我们向数组中添加第一个元素时，DEFAULTCAPACITY_EMPTY_ELEMENTDATA将会知道数组该扩充多少</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//默认初始化容量</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//默认的空的数组，这个主要是在构造方法初始化一个空数组的时候使用</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用默认size大小的空数组实例，和EMPTY_ELEMENTDATA区分开来，</span></span><br><span class="line"><span class="comment">//这样可以知道当第一个元素添加的时候进行扩容至多少</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ArrayList底层存储数据就是通过数组的形式，ArrayList长度就是数组的长度。</span></span><br><span class="line"><span class="comment">//一个空的实例elementData为上面的DEFAULTCAPACITY_EMPTY_ELEMENTDATA，当添加第一个元素的时候</span></span><br><span class="line"><span class="comment">//会进行扩容，扩容大小就是上面的默认容量DEFAULT_CAPACITY</span></span><br><span class="line"><span class="keyword">transient</span> Object[] elementData; <span class="comment">// non-private to simplify nested class access</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//arrayList的大小</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> size;</span><br></pre></td></tr></table></figure><p>static修饰的EMPTY_ELEMENTDATA和DEFAULTCAPACITY_EMPTY_ELEMENTDATA</p><img src="/ArrayList%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/2020-08-20-22-27-27.png" class><h2 id="ArrayList构造方法"><a href="#ArrayList构造方法" class="headerlink" title="ArrayList构造方法"></a>ArrayList构造方法</h2><p>（1）带有初始化容量的构造方法</p><ul><li>参数大于0，elementData初始化为initialCapacity大小的数组</li><li>参数等于0，elementData初始化为空数组</li><li>参数小于0，抛出异常</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//参数为初始化容量</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//判断容量的合法性</span></span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//elementData才是实际存放元素的数组</span></span><br><span class="line">        <span class="keyword">this</span>.elementData = <span class="keyword">new</span> Object[initialCapacity];</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (initialCapacity == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//如果传递的长度为0，就是直接使用自己已经定义的成员变量(一个空数组)</span></span><br><span class="line">        <span class="keyword">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal Capacity: "</span>+</span><br><span class="line">                                           initialCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）无参构造</p><ul><li>构造方法中将elementData初始化为空数组DEFAULTCAPACITY_EMPTY_ELEMENTDATA</li><li>当调用add方法添加第一个元素的时候，会进行扩容</li><li>扩容至大小为DEFAULT_CAPACITY=10</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//无参构造，使用默认的size为10的空数组，在构造方法中没有对数组长度进行设置，会在后续调用add方法的时候进行扩容</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（3）参数为Collection类型的构造器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将一个参数为Collection的集合转变为ArrayList（实际上就是将集合中的元素换为了数组的形式）。如果</span></span><br><span class="line"><span class="comment">//传入的集合为null会抛出空指针异常（调用c.toArray()方法的时候）</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">    elementData = c.toArray();</span><br><span class="line">    <span class="keyword">if</span> ((size = elementData.length) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//c.toArray()可能不会正确地返回一个 Object[]数组，那么使用Arrays.copyOf()方法</span></span><br><span class="line">        <span class="keyword">if</span> (elementData.getClass() != Object[]<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">            <span class="title">elementData</span> </span>= Arrays.copyOf(elementData, size, Object[]<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//如果集合转换为数组之后数组长度为0，就直接使用自己的空成员变量初始化elementData</span></span><br><span class="line">        <span class="keyword">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​上面的这些构造方法理解起来比较简单，关注前两个构造方法做的事情，目的都是初始化底层数组 elementData(this.elementData=XXX)。区别在于无参构造方法会将 elementData 初始化一个空数组，插入元素时，扩容将会按默认值重新初始化数组。而有参的构造方法则会将 elementData 初始化为参数值大小（&gt;= 0）的数组。一般情况下，我们用默认的构造方法即可。倘若在可知道将会向 ArrayList 插入多少元素的情况下，可以使用有参构造方法。</p><p>上面说到了使用无参构造的时候，在调用add方法的时候会进行扩容，所以下面我们就看看add方法以及扩容的细节</p><h2 id="ArrayList的add方法"><a href="#ArrayList的add方法" class="headerlink" title="ArrayList的add方法"></a>ArrayList的add方法</h2><h3 id="add方法大致流程"><a href="#add方法大致流程" class="headerlink" title="add方法大致流程"></a>add方法大致流程</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将指定元素添加到list的末尾</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//因为要添加元素，所以添加之后可能导致容量不够，所以需要在添加之前进行判断（扩容）</span></span><br><span class="line">    ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!（待会会介绍到fast-fail）</span></span><br><span class="line">    elementData[size++] = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们看到add方法中在添加元素之前，会先判断size的大小，所以我们来看看ensureCapacityInternal方法的细节</p><h3 id="ensureCapacityInternal方法分析"><a href="#ensureCapacityInternal方法分析" class="headerlink" title="ensureCapacityInternal方法分析"></a>ensureCapacityInternal方法分析</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacityInternal</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//这里就是判断elementData数组是不是为空数组</span></span><br><span class="line">    <span class="comment">//（使用的无参构造的时候，elementData=DEFAULTCAPACITY_EMPTY_ELEMENTDATA）</span></span><br><span class="line">    <span class="comment">//如果是，那么比较size+1(第一次调用add的时候size+1=1)和DEFAULT_CAPACITY，</span></span><br><span class="line">    <span class="comment">//那么显然容量为10</span></span><br><span class="line">    <span class="keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">        minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">    ensureExplicitCapacity(minCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当要add 进第1个元素时，minCapacity为(size+1=0+1=)1，在Math.max()方法比较后，minCapacity 为10。然后紧接着调用ensureExplicitCapacity更新modCount的值，并判断是否需要扩容</p><h3 id="ensureExplicitCapacity方法分析"><a href="#ensureExplicitCapacity方法分析" class="headerlink" title="ensureExplicitCapacity方法分析"></a>ensureExplicitCapacity方法分析</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureExplicitCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    modCount++; <span class="comment">//这里就是add方法中注释的Increments modCount</span></span><br><span class="line">    <span class="comment">//溢出</span></span><br><span class="line">    <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">        grow(minCapacity);<span class="comment">//这里就是执行扩容的方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面来看一下扩容的主要方法grow。</p><h3 id="grow方法分析"><a href="#grow方法分析" class="headerlink" title="grow方法分析"></a>grow方法分析</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_ARRAY_SIZE = Integer.MAX_VALUE - <span class="number">8</span>;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// oldCapacity为旧数组的容量</span></span><br><span class="line">    <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">    <span class="comment">// newCapacity为新数组的容量（oldCap+oldCap/2:即更新为旧容量的1.5倍）</span></span><br><span class="line">    <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 检查新容量的大小是否小于最小需要容量，如果小于那旧将最小容量最为数组的新容量</span></span><br><span class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = minCapacity;</span><br><span class="line">    <span class="comment">//如果新容量大于MAX_ARRAY_SIZE，使用hugeCapacity比较二者</span></span><br><span class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">    <span class="comment">// minCapacity is usually close to size, so this is a win:</span></span><br><span class="line">    <span class="comment">// 将原数组中的元素拷贝</span></span><br><span class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="hugeCapacity方法"><a href="#hugeCapacity方法" class="headerlink" title="hugeCapacity方法"></a>hugeCapacity方法</h3><p>这里简单看一下hugeCapacity方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hugeCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (minCapacity &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> OutOfMemoryError();</span><br><span class="line">    <span class="comment">//对minCapacity和MAX_ARRAY_SIZE进行比较</span></span><br><span class="line">    <span class="comment">//若minCapacity大，将Integer.MAX_VALUE作为新数组的大小</span></span><br><span class="line">    <span class="comment">//若MAX_ARRAY_SIZE大，将MAX_ARRAY_SIZE作为新数组的大小</span></span><br><span class="line">    <span class="comment">//MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8;</span></span><br><span class="line">    <span class="keyword">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ? Integer.MAX_VALUE : MAX_ARRAY_SIZE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="add方法执行流程总结"><a href="#add方法执行流程总结" class="headerlink" title="add方法执行流程总结"></a>add方法执行流程总结</h3><p>我们用一幅图来简单梳理一下，当使用无参构造的时候，在第一次调用add方法之后的执行流程<br><img src="/ArrayList%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/2020-08-20-22-41-16.png" class><br>这是第一次调用add方法的过程，当扩容值capacity为10之后，</p><ul><li><p>继续添加第2个元素（先注意调用ensureCapacityInternal方法传递的参数为size+1=1+1=2）</p></li><li><p>在ensureCapacityInternal方法中，elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA不成立，所以直接执行ensureExplicitCapacity方法</p></li><li><p>ensureExplicitCapacity方法中minCapacity为刚刚传递的2，所以第二个if判断（2-10=-8）不会成立，即newCapacity 不比 MAX_ARRAY_SIZE大，则不会进入 grow 方法。数组容量为10，add方法中 return true,size增为1。</p></li><li><p>假设又添加3、4……10个元素（其中过程类似，但是不会执行grow扩容方法）</p></li><li><p>当add第11个元素时候，会进入grow方法时，计算newCapacity为15，比minCapacity（为10+1=11）大，第一个if判断不成立。新容量没有大于数组最大size，不会进入hugeCapacity方法。数组容量扩为15，add方法中return true,size增为11。</p></li></ul><h3 id="add-int-index-E-element-方法"><a href="#add-int-index-E-element-方法" class="headerlink" title="add(int index,E element)方法"></a>add(int index,E element)方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在元素序列 index 位置处插入</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">    rangeCheckForAdd(index); <span class="comment">//校验传递的index参数是不是合法</span></span><br><span class="line">    <span class="comment">// 1. 检测是否需要扩容</span></span><br><span class="line">    ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">    <span class="comment">// 2. 将 index 及其之后的所有元素都向后移一位</span></span><br><span class="line">    System.arraycopy(elementData, index, elementData, index + <span class="number">1</span>,</span><br><span class="line">                     size - index);</span><br><span class="line">    <span class="comment">// 3. 将新元素插入至 index 处</span></span><br><span class="line">    elementData[index] = element;</span><br><span class="line">    size++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rangeCheckForAdd</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &gt; size || index &lt; <span class="number">0</span>) <span class="comment">//这里判断的index&gt;size（保证数组的连续性），index小于0</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(outOfBoundsMsg(index));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>add(int index, E element)方法（在元素序列指定位置（假设该位置合理）插入）的过程大概是下面这些</p><ol><li>检测数组是否有足够的空间(这里的实现和上面的)</li><li>将 index 及其之后的所有元素向后移一位</li><li>将新元素插入至 index 处.</li></ol><p>将新元素插入至序列指定位置，需要先将该位置及其之后的元素都向后移动一位，为新元素腾出位置。这个操作的时间复杂度为O(N)，频繁移动元素可能会导致效率问题，特别是集合中元素数量较多时。在日常开发中，若非所需，我们应当尽量避免在大集合中调用第二个插入方法。</p><h2 id="ArrayList的remove方法"><a href="#ArrayList的remove方法" class="headerlink" title="ArrayList的remove方法"></a>ArrayList的remove方法</h2><p>ArrayList支持两种删除元素的方式</p><ol><li>remove(int index) 按照下标删除</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    rangeCheck(index); <span class="comment">//校验下标是否合法（如果index&gt;size，旧抛出IndexOutOfBoundsException异常）</span></span><br><span class="line">    modCount++;<span class="comment">//修改list结构，就需要更新这个值</span></span><br><span class="line">    E oldValue = elementData(index); <span class="comment">//直接在数组中查找这个值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;<span class="comment">//这里计算所需要移动的数目</span></span><br><span class="line">    <span class="comment">//如果这个值大于0 说明后续有元素需要左移(size=index+1)</span></span><br><span class="line">    <span class="comment">//如果是0说明被移除的对象就是最后一位元素(不需要移动别的元素)</span></span><br><span class="line">    <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">        <span class="comment">//索引index只有的所有元素左移一位  覆盖掉index位置上的元素</span></span><br><span class="line">        System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</span><br><span class="line">                         numMoved);</span><br><span class="line">    <span class="comment">//移动之后，原数组中size位置null</span></span><br><span class="line">    elementData[--size] = <span class="keyword">null</span>; <span class="comment">// clear to let GC do its work</span></span><br><span class="line">    <span class="comment">//返回旧值</span></span><br><span class="line">    <span class="keyword">return</span> oldValue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//src:源数组</span></span><br><span class="line"><span class="comment">//srcPos:从源数组的srcPos位置处开始移动</span></span><br><span class="line"><span class="comment">//dest:目标数组</span></span><br><span class="line"><span class="comment">//desPos:源数组的srcPos位置处开始移动的元素，这些元素从目标数组的desPos处开始填充</span></span><br><span class="line"><span class="comment">//length:移动源数组的长度</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">arraycopy</span><span class="params">(Object src,  <span class="keyword">int</span>  srcPos,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    Object dest, <span class="keyword">int</span> destPos,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    <span class="keyword">int</span> length)</span></span>;</span><br></pre></td></tr></table></figure><p>删除过程如下图所示<br><img src="/ArrayList%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/2020-08-21-09-09-14.png" class></p><ol><li>remove(Object o) 按照元素删除，会删除和参数匹配的第一个元素</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//如果元素是null 遍历数组移除第一个null</span></span><br><span class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)</span><br><span class="line">            <span class="keyword">if</span> (elementData[index] == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">//遍历找到第一个null元素的下标 调用下标移除元素的方法</span></span><br><span class="line">                fastRemove(index);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//找到元素对应的下标 调用下标移除元素的方法</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)</span><br><span class="line">            <span class="keyword">if</span> (o.equals(elementData[index])) &#123;</span><br><span class="line">                fastRemove(index);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//按照下标移除元素（通过数组元素的位置移动来达到删除的效果）</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">fastRemove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">  modCount++;</span><br><span class="line">  <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">    System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</span><br><span class="line">                     numMoved);</span><br><span class="line">  elementData[--size] = <span class="keyword">null</span>; <span class="comment">// clear to let GC do its work</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ArrayList的其他方法"><a href="#ArrayList的其他方法" class="headerlink" title="ArrayList的其他方法"></a>ArrayList的其他方法</h2><h3 id="ensureCapacity方法"><a href="#ensureCapacity方法" class="headerlink" title="ensureCapacity方法"></a>ensureCapacity方法</h3><p>最好在 add 大量元素之前用 ensureCapacity 方法，以减少增量从新分配的次数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ensureCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> minExpand = (elementData != DEFAULTCAPACITY_EMPTY_ELEMENTDATA)</span><br><span class="line">        <span class="comment">// any size if not default element table</span></span><br><span class="line">        ? <span class="number">0</span></span><br><span class="line">        <span class="comment">// larger than default for default empty table. It's already</span></span><br><span class="line">        <span class="comment">// supposed to be at default size.</span></span><br><span class="line">        : DEFAULT_CAPACITY;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (minCapacity &gt; minExpand) &#123;</span><br><span class="line">        ensureExplicitCapacity(minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ArrayList总结"><a href="#ArrayList总结" class="headerlink" title="ArrayList总结"></a>ArrayList总结</h2><ol><li>ArrayList 是一种变长的集合类，基于定长数组实现，使用默认构造方法初始化出来的容量是10（1.7之后都是延迟初始化，即第一次调用add方法添加元素的时候才将elementData容量初始化为10）。</li><li>ArrayList 允许空值和重复元素，当往 ArrayList 中添加的元素数量大于其底层数组容量时，其会通过扩容机制重新生成一个更大的数组。ArrayList扩容的长度是原长度的1.5倍.</li><li>由于 ArrayList 底层基于数组实现，所以其可以保证在 O(1) 复杂度下完成随机查找操作。</li><li>ArrayList 是非线程安全类，并发环境下，多个线程同时操作 ArrayList，会引发不可预知的异常或错误。</li><li>顺序添加很方便</li><li>删除和插入需要复制数组，性能差（可以使用LinkindList）</li><li>Integer.MAX_VALUE - 8 ：主要是考虑到不同的JVM,有的JVM会在加入一些数据头,当扩容后的容量大于MAX_ARRAY_SIZE,我们会去比较最小需要容量和MAX_ARRAY_SIZE做比较,如果比它大, 只能取Integer.MAX_VALUE,否则是Integer.MAX_VALUE -8。 这个是从jdk1.7开始才有的</li></ol><h2 id="fast-fail机制"><a href="#fast-fail机制" class="headerlink" title="fast-fail机制"></a>fast-fail机制</h2><p>fail-fast的解释：</p><blockquote><p>在系统设计中，快速失效系统一种可以立即报告任何可能表明故障的情况的系统。快速失效系统通常设计用于停止正常操作，而不是试图继续可能存在缺陷的过程。这种设计通常会在操作中的多个点检查系统的状态，因此可以及早检测到任何故障。快速失败模块的职责是检测错误，然后让系统的下一个最高级别处理错误。</p></blockquote><p>就是在做系统设计的时候先考虑异常情况，一旦发生异常，直接停止并上报，比如下面的这个简单的例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这里的代码是一个对两个整数做除法的方法，在fast_fail_method方法中，我们对被除数做了个简单的检查，如果其值为0，那么就直接抛出一个异常，并明确提示异常原因。这其实就是fail-fast理念的实际应用。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">fast_fail_method</span><span class="params">(<span class="keyword">int</span> arg1,<span class="keyword">int</span> arg2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(arg2 == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"can't be zero"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arg1/arg2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Java集合类中很多地方都用到了该机制进行设计，一旦使用不当，触发fail-fast机制设计的代码，就会发生非预期情况。我们通常说的Java中的fail-fast机制，默认指的是Java集合的一种错误检测机制。当多个线程对部分集合进行结构上的改变的操作时，有可能会触发该机制时，之后就会抛出并发修改<strong>ConcurrentModificationException</strong>.当然如果不在多线程环境下，如果在foreach遍历的时候使用add/remove方法，也可能会抛出该异常。参考fast-fail机制，这里简单做个总结</p><p>之所以会抛出ConcurrentModificationException异常，是因为我们的代码中使用了增强for循环，而在增强for循环中，集合遍历是通过iterator进行的，但是元素的add/remove却是直接使用的集合类自己的方法。这就导致iterator在遍历的时候，会发现有一个元素在自己不知不觉的情况下就被删除/添加了，就会抛出一个异常，用来提示可能发生了并发修改！所以，在使用Java的集合类的时候，如果发生ConcurrentModificationException，优先考虑fail-fast有关的情况，实际上这可能并没有真的发生并发，只是Iterator使用了fail-fast的保护机制，只要他发现有某一次修改是未经过自己进行的，那么就会抛出异常。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;ArrayList概述&quot;&gt;&lt;a href=&quot;#ArrayList概述&quot; class=&quot;headerlink&quot; title=&quot;ArrayList概述&quot;&gt;&lt;/a&gt;ArrayList概述&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;ArrayList 是一种变长的集合类，基于定长数组实现。&lt;/li&gt;
&lt;li&gt;ArrayList 允许空值和重复元素，当往 ArrayList 中添加的元素数量大于其底层数组容量时，其会通过扩容机制重新生成一个更大的数组。&lt;/li&gt;
&lt;li&gt;由于 ArrayList 底层基于数组实现，所以其可以保证在 O(1) 复杂度下完成随机查找操作。&lt;/li&gt;
&lt;li&gt;ArrayList 是非线程安全类，并发环境下，多个线程同时操作 ArrayList，会引发不可预知的异常或错误&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="面试" scheme="https://linbei.top/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="Java" scheme="https://linbei.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>RandomAccess接口作用</title>
    <link href="https://linbei.top/RandomAccess%E6%8E%A5%E5%8F%A3%E4%BD%9C%E7%94%A8/"/>
    <id>https://linbei.top/RandomAccess%E6%8E%A5%E5%8F%A3%E4%BD%9C%E7%94%A8/</id>
    <published>2020-07-14T13:51:57.000Z</published>
    <updated>2020-08-20T11:13:33.537Z</updated>
    
    <content type="html"><![CDATA[<p>众所周知，在List集合中，我们经常会用到ArrayList以及LinkedList集合，但是通过查看源码，就会发现ArrayList实现RandomAccess接口，但是RandomAccess接口里面是空的！Linked并没有实现RandomAccess接口。<br>这是为什么呢？</p><a id="more"></a><p>这是ArrayList实现RandomAccess接口的源码<br><img src="/RandomAccess%E6%8E%A5%E5%8F%A3%E4%BD%9C%E7%94%A8/2020-08-20-19-06-10.png" class><br>这是LinkedList的源码，并没实现RandomAccess接口<br><img src="/RandomAccess%E6%8E%A5%E5%8F%A3%E4%BD%9C%E7%94%A8/2020-08-20-19-06-33.png" class><br>这是RandomAccess接口的源码<br><img src="/RandomAccess%E6%8E%A5%E5%8F%A3%E4%BD%9C%E7%94%A8/2020-08-20-19-06-47.png" class><br>原来RandomAccess接口是一个标志接口（Marker），然而实现这个接口有什么作用呢？</p><p>解答：只要List集合实现这个接口，就能支持快速随机访问，然而又有人问，快速随机访问是什么东西？有什么作用？</p><p>通过查看Collections类中的binarySearch（）方法，源码如下：<br><img src="/RandomAccess%E6%8E%A5%E5%8F%A3%E4%BD%9C%E7%94%A8/2020-08-20-19-07-10.png" class><br>由此可以看出，判断list是否实现RandomAccess接口来实行indexedBinarySerach(list,key)或iteratorBinarySerach(list,key)方法。ps（instanceof其作用是用来判断某对象是否为某个类或接口类型）</p><p>那么，又有人疑问，执行这两个方法有什么不同？<br>查看下indexedBinarySerach(list,key)方法源码：<br><img src="/RandomAccess%E6%8E%A5%E5%8F%A3%E4%BD%9C%E7%94%A8/2020-08-20-19-07-44.png" class><br>查看下iteratorBinarySerach(list,key)方法源码：<br><img src="/RandomAccess%E6%8E%A5%E5%8F%A3%E4%BD%9C%E7%94%A8/2020-08-20-19-08-06.png" class><br>通过查看源代码，发现实现RandomAccess接口的List集合采用一般的for循环遍历，而未实现这接口则采用迭代器。</p><p>接下来，我们将进行下测试ArrayList以及LinkedList采用这两种方法各自的性能是如何！</p><p>main方法：<br><img src="/RandomAccess%E6%8E%A5%E5%8F%A3%E4%BD%9C%E7%94%A8/2020-08-20-19-08-44.png" class><br>for循环遍历ArrayList<br><img src="/RandomAccess%E6%8E%A5%E5%8F%A3%E4%BD%9C%E7%94%A8/2020-08-20-19-08-55.png" class><br>iterator迭代器遍历ArrayList<br><img src="/RandomAccess%E6%8E%A5%E5%8F%A3%E4%BD%9C%E7%94%A8/2020-08-20-19-09-07.png" class><br>for循环遍历LinkedList<br><img src="/RandomAccess%E6%8E%A5%E5%8F%A3%E4%BD%9C%E7%94%A8/2020-08-20-19-09-20.png" class><br>iterator迭代器遍历LinkedList<br><img src="/RandomAccess%E6%8E%A5%E5%8F%A3%E4%BD%9C%E7%94%A8/2020-08-20-19-09-33.png" class><br>运行结果：<br><img src="/RandomAccess%E6%8E%A5%E5%8F%A3%E4%BD%9C%E7%94%A8/2020-08-20-19-09-45.png" class><br>从上面数据可以看出，ArrayList用for循环遍历比iterator迭代器遍历快，LinkedList用iterator迭代器遍历比for循环遍历快，</p><p>所以说，当我们在做项目时，应该考虑到List集合的不同子类采用不同的遍历方式，能够提高性能！</p><p>然而有人发出疑问了，那怎么判断出接收的List子类是ArrayList还是LinkedList呢？</p><p>这时就需要用instanceof来判断List集合子类是否实现RandomAccess接口！<br>代码如下：<br><img src="/RandomAccess%E6%8E%A5%E5%8F%A3%E4%BD%9C%E7%94%A8/2020-08-20-19-11-09.png" class><br>main方法：<br><img src="/RandomAccess%E6%8E%A5%E5%8F%A3%E4%BD%9C%E7%94%A8/2020-08-20-19-11-22.png" class><br>运行结果：<br><img src="/RandomAccess%E6%8E%A5%E5%8F%A3%E4%BD%9C%E7%94%A8/2020-08-20-19-11-34.png" class></p><p>总结：RandomAccess接口这个空架子的存在，是为了能够更好地判断集合是否ArrayList或者LinkedList，从而能够更好选择更优的遍历方式，提高性能！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;众所周知，在List集合中，我们经常会用到ArrayList以及LinkedList集合，但是通过查看源码，就会发现ArrayList实现RandomAccess接口，但是RandomAccess接口里面是空的！Linked并没有实现RandomAccess接口。&lt;br&gt;这是为什么呢？&lt;/p&gt;
    
    </summary>
    
    
      <category term="面试" scheme="https://linbei.top/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="Java" scheme="https://linbei.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>CSharp调用Matlab</title>
    <link href="https://linbei.top/CSharp%E8%B0%83%E7%94%A8Matlab/"/>
    <id>https://linbei.top/CSharp%E8%B0%83%E7%94%A8Matlab/</id>
    <published>2020-07-06T03:11:57.000Z</published>
    <updated>2020-07-06T11:11:21.684Z</updated>
    
    <content type="html"><![CDATA[<p>在matlab里仿真实现了，如果不想重新在C#代码里写程序的话，就可以用matlab生成dll程序集直接调用。<br><a id="more"></a></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>拿Matlab自带函数Linqprog(线性规划的函数)举例，首先新建函数，输入如下函数，并保存。<br><img src="/CSharp%E8%B0%83%E7%94%A8Matlab/2020-07-06-18-58-24.png" class><br>其次在matlab命令行中输入deploytool，跳出如下页面<br><img src="/CSharp%E8%B0%83%E7%94%A8Matlab/2020-07-06-18-58-40.png" class><br>选择Library Compiler 进入如下页面<br><img src="/CSharp%E8%B0%83%E7%94%A8Matlab/2020-07-06-18-59-12.png" class></p><p>第一个箭头选择.net环境，第二个箭头添加你刚才保存的函数。后面其他的配置不需要更改，如果想要对生成的dll文件里面的类名以及命名空间进行修改可以在此图片最后一部分进行修改，此处就不修改。点击右上角Package，保存并等待。此处如果生成失败，说明matlab安装存在问题，自己在网上找资源，或者可以留言找我要资源（免费哟）。这里生成dll文件就已经完成了，就剩下最后一步编写C#程序了。</p><h2 id="编写C-文件"><a href="#编写C-文件" class="headerlink" title="编写C#文件"></a>编写C#文件</h2><p>首先创建项目，并导入两个依赖项，(1)刚才Package生成的dll文件(MyLinprog.dll)。(2)MWArray.dll文件，在Matlab安装目录下%matlabroot%\\toolbox\dotnetbuilder\bin\win64\v4.0\MWArray.dll。导入依赖项成功之后编写函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;导入两个命名空间</span><br><span class="line">&#x2F;&#x2F;using MathWorks.MATLAB.NET.Arrays;</span><br><span class="line">&#x2F;&#x2F;using MyLinprog;</span><br><span class="line">static void Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            &#x2F;&#x2F;输入参数</span><br><span class="line">            MWArray A &#x3D; (MWNumericArray)new double[,] &#123; &#123; 1, -1, 1 &#125;, &#123; 3, 2, 4 &#125;, &#123; 3, 2, 0 &#125; &#125;;</span><br><span class="line">            MWArray f &#x3D; (MWNumericArray)new double[] &#123; -5, -4, -6 &#125;;</span><br><span class="line">            MWArray b &#x3D; (MWNumericArray)new double[] &#123; 20, 42, 30 &#125;;</span><br><span class="line">            MWArray lb &#x3D; (MWNumericArray)new double[] &#123; 0, 0, 0 &#125;;</span><br><span class="line">            MWArray ub &#x3D; (MWNumericArray)new double[] &#123; &#125;;</span><br><span class="line">            MWArray Aeq &#x3D; (MWNumericArray)new int[3] &#123;0,0,0&#125;;</span><br><span class="line">            MWArray beq &#x3D; (MWNumericArray)new int[1] &#123;0&#125;;</span><br><span class="line">            MWArray x0 &#x3D; (MWNumericArray)new int[0] ;</span><br><span class="line"></span><br><span class="line">            MWArray[] agrsIn &#x3D; new MWArray[] &#123; (MWNumericArray)f, (MWNumericArray)A,     (MWNumericArray)b, (MWNumericArray)Aeq, (MWNumericArray)beq,(MWNumericArray)lb, (MWNumericArray)ub, (MWNumericArray)x0 &#125;;&#x2F;&#x2F;输入参数</span><br><span class="line"></span><br><span class="line">            MWArray[] agrsOut &#x3D; new MWArray[2]; &#x2F;&#x2F;输出存放的数组</span><br><span class="line"></span><br><span class="line">            MyLinprog.Class1 mu &#x3D; new MyLinprog.Class1(); &#x2F;&#x2F;实例化对象</span><br><span class="line">            mu.MyLinprog(2, ref agrsOut, agrsIn); &#x2F;&#x2F;计算</span><br><span class="line">            Console.WriteLine(&quot;x最优值为 : \t&quot;);</span><br><span class="line">            Console.WriteLine(agrsOut[0]);</span><br><span class="line">            Console.WriteLine(&quot;得到的y值为 : \t&quot; + agrsOut[1]);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>此时已经完成了所有工作，接下来总结在这个过程中常出现的问题<br>问题1:<br><img src="/CSharp%E8%B0%83%E7%94%A8Matlab/2020-07-06-19-01-47.png" class><br>在调用MWArray类时出现问题，此时应注意你所用的MWArray的环境需要和你的项目平台保持一致。即，引用的win64下的MWArray时，c#的项目平台应该是x64。</p><p>问题2:<br>在实例化对象处报错（因为我的环境配置好的，修改环境需要重启电脑，所以就没有去把错误调处来）。报错依然是类型初始化异常。<br>此时就应该查看MCR(Matlab Runtime)与项目平台以及MATLAB\R2017b\bin\win64三者是否保持一致。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在matlab里仿真实现了，如果不想重新在C#代码里写程序的话，就可以用matlab生成dll程序集直接调用。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="环境搭建" scheme="https://linbei.top/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="Matlab" scheme="https://linbei.top/tags/Matlab/"/>
    
      <category term="算法" scheme="https://linbei.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Docker搭建RabbitMq集群及HaProxy负载均衡</title>
    <link href="https://linbei.top/Docker%E6%90%AD%E5%BB%BARabbitMq%E9%9B%86%E7%BE%A4%E5%8F%8AHaProxy%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    <id>https://linbei.top/Docker%E6%90%AD%E5%BB%BARabbitMq%E9%9B%86%E7%BE%A4%E5%8F%8AHaProxy%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</id>
    <published>2020-06-30T03:11:57.000Z</published>
    <updated>2020-07-06T10:51:53.510Z</updated>
    
    <content type="html"><![CDATA[<p>使用同一台阿里云服务器搭建3个RabbitMq的集群和Haproxy负载均衡。<br><a id="more"></a></p><h2 id="创建rabbitmq容器"><a href="#创建rabbitmq容器" class="headerlink" title="创建rabbitmq容器"></a>创建rabbitmq容器</h2><p>使用docker pull  rabbitmq拉取最新rabbimq镜像，docker pull haproxy 拉取haproxy镜像<br><img src="/Docker%E6%90%AD%E5%BB%BARabbitMq%E9%9B%86%E7%BE%A4%E5%8F%8AHaProxy%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/2020-07-06-18-41-37.png" class><br>创建docker网络 rabbtimanet 用于haproxy和rabbimq通信</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network create rabbtimanet</span><br></pre></td></tr></table></figure><img src="/Docker%E6%90%AD%E5%BB%BARabbitMq%E9%9B%86%E7%BE%A4%E5%8F%8AHaProxy%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/2020-07-06-18-43-06.png" class><p>创建三节点rabbitmq容器<br>rabbitmq1：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name=rabbitmq1 -p 5672:5672 -p 15672:15672 -e RABBITMQ_NODENAME=rabbitmq1 -e RABBITMQ_ERLANG_COOKIE='YZSDHWMFSMKEMBDHSGGZ'  -h rabbitmq1 --net=rabbtimanet rabbitmq:management</span><br></pre></td></tr></table></figure><p>rabbitmq2：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name=rabbitmq1 -p 5673:5672 -p 15673:15672 -e RABBITMQ_NODENAME=rabbitmq2 -e RABBITMQ_ERLANG_COOKIE='YZSDHWMFSMKEMBDHSGGZ'  -h rabbitmq2 --net=rabbtimanet rabbitmq:management</span><br></pre></td></tr></table></figure><p>rabbitmq3：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name=rabbitmq1 -p 5674:5672 -p 15674:15672 -e RABBITMQ_NODENAME=rabbitmq3 -e RABBITMQ_ERLANG_COOKIE='YZSDHWMFSMKEMBDHSGGZ'  -h rabbitmq3 --net=rabbtimanet rabbitmq:management</span><br></pre></td></tr></table></figure><img src="/Docker%E6%90%AD%E5%BB%BARabbitMq%E9%9B%86%E7%BE%A4%E5%8F%8AHaProxy%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/2020-07-06-18-45-36.png" class><h2 id="rabbitmq集群"><a href="#rabbitmq集群" class="headerlink" title="rabbitmq集群"></a>rabbitmq集群</h2><p>分别进入rabbitmq2 和rabbitmq3容器(docker exec -it 容器id /bin/bash)，执行以下：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl stop_app</span><br><span class="line">rabbitmqctl reset</span><br><span class="line">rabbitmqctl join_cluster --ram rabbitmq1@rabbitmq1</span><br><span class="line">rabbitmqctl start_app</span><br></pre></td></tr></table></figure><img src="/Docker%E6%90%AD%E5%BB%BARabbitMq%E9%9B%86%E7%BE%A4%E5%8F%8AHaProxy%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/2020-07-06-18-46-24.png" class><h2 id="部署Haproxy"><a href="#部署Haproxy" class="headerlink" title="部署Haproxy"></a>部署Haproxy</h2><p>编辑haproxy配置文件如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">global</span><br><span class="line">  daemon</span><br><span class="line">  maxconn 256</span><br><span class="line"></span><br><span class="line">defaults</span><br><span class="line">  mode http</span><br><span class="line">  timeout connect 5000ms</span><br><span class="line">  timeout client 5000ms</span><br><span class="line">  timeout server 5000ms</span><br><span class="line"></span><br><span class="line">listen rabbitmq_cluster #监听5677端口转发到rabbitmq服务</span><br><span class="line">  bind 0.0.0.0:5677</span><br><span class="line">  option tcplog</span><br><span class="line">  mode tcp</span><br><span class="line">  balance leastconn</span><br><span class="line">  server rabbit1 rabbitmq1:5672 check inter 2s rise 2 fall 3</span><br><span class="line">  server rabbit2 rabbitmq2:5672 check inter 2s rise 2 fall 3</span><br><span class="line">  server rabbit3 rabbitmq3:5672 check inter 2s rise 2 fall 3</span><br><span class="line">listen http_front #haproxy的客户页面</span><br><span class="line">  bind 0.0.0.0:80</span><br><span class="line">  stats uri /haproxy?stats</span><br><span class="line"></span><br><span class="line">listen rabbitmq_admin #监听8011端口转发到rabbitmq的客户端</span><br><span class="line">  bind 0.0.0.0:8001</span><br><span class="line">  server rabbit1 rabbitmq1:15672 check inter 2s rise 2 fall 3</span><br><span class="line">  server rabbit2 rabbitmq2:15672 check inter 2s rise 2 fall 3</span><br><span class="line">  server rabbit2 rabbitmq3:15672 check inter 2s rise 2 fall 3</span><br></pre></td></tr></table></figure><p>创建haproxy容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name rabbitmq-haproxy  -p 8090:80 -p 5677:5677 -p 8001:8001  --net=rabbtimanet -v /home/haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro haproxy:latest</span><br></pre></td></tr></table></figure><p>通过外部8090访问haproxy容器的80端口，外部8001访问haproxy容器8001，外部5677访问haproxy 容器5677端口</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>连接rabbitmq 的5677端口，并发送数据，检查haproxy的web页面，对每次的请求转发至不同的rabbitmq<br><img src="/Docker%E6%90%AD%E5%BB%BARabbitMq%E9%9B%86%E7%BE%A4%E5%8F%8AHaProxy%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/2020-07-06-18-48-54.png" class><br>通过haproxy的8001端口访问rabbitmq的客户端：<br><img src="/Docker%E6%90%AD%E5%BB%BARabbitMq%E9%9B%86%E7%BE%A4%E5%8F%8AHaProxy%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/2020-07-06-18-49-08.png" class></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用同一台阿里云服务器搭建3个RabbitMq的集群和Haproxy负载均衡。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="环境搭建" scheme="https://linbei.top/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="Docker" scheme="https://linbei.top/tags/Docker/"/>
    
      <category term="Mq" scheme="https://linbei.top/tags/Mq/"/>
    
  </entry>
  
  <entry>
    <title>JAVA代理</title>
    <link href="https://linbei.top/Java%E4%BB%A3%E7%90%86/"/>
    <id>https://linbei.top/Java%E4%BB%A3%E7%90%86/</id>
    <published>2020-06-28T13:51:57.000Z</published>
    <updated>2020-06-28T12:40:54.699Z</updated>
    
    <content type="html"><![CDATA[<p>代理模式（Proxy）是通过代理对象访问目标对象，这样可以在目标对象基础上增强额外的功能，如添加权限，访问控制和审计等功能。<br><a id="more"></a><br><img src="/Java%E4%BB%A3%E7%90%86/2020-06-28-19-53-13.png" class><br><img src="/Java%E4%BB%A3%E7%90%86/2020-06-28-19-53-23.png" class></p><p>Java代理分为静态代理和动态代理和Cglib代理，下面进行逐个说明。</p><h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2><p>接口类AdminService.java接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lance.proxy.demo.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AdminService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">Object <span class="title">find</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现类AdminServiceImpl.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lance.proxy.demo.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdminServiceImpl</span> <span class="keyword">implements</span> <span class="title">AdminService</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"修改管理系统数据"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">find</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"查看管理系统数据"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Object();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代理类AdminServiceProxy.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lance.proxy.demo.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdminServiceProxy</span> <span class="keyword">implements</span> <span class="title">AdminService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AdminService adminService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AdminServiceProxy</span><span class="params">(AdminService adminService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.adminService = adminService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"判断用户是否有权限进行update操作"</span>);</span><br><span class="line">        adminService.update();</span><br><span class="line">        System.out.println(<span class="string">"记录用户执行update操作的用户信息、更改内容和时间等"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">find</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"判断用户是否有权限进行find操作"</span>);</span><br><span class="line">        System.out.println(<span class="string">"记录用户执行find操作的用户信息、查看内容和时间等"</span>);</span><br><span class="line">        <span class="keyword">return</span> adminService.find();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类StaticProxyTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lance.proxy.demo.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticProxyTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AdminService adminService = <span class="keyword">new</span> AdminServiceImpl();</span><br><span class="line">        AdminServiceProxy proxy = <span class="keyword">new</span> AdminServiceProxy(adminService);</span><br><span class="line">        proxy.update();</span><br><span class="line">        System.out.println(<span class="string">"============================="</span>);</span><br><span class="line">        proxy.find();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">判断用户是否有权限进行update操作</span><br><span class="line">修改管理系统数据</span><br><span class="line">记录用户执行update操作的用户信息、更改内容和时间等</span><br><span class="line">=============================</span><br><span class="line">判断用户是否有权限进行find操作</span><br><span class="line">记录用户执行find操作的用户信息、查看内容和时间等</span><br><span class="line">查看管理系统数据</span><br></pre></td></tr></table></figure><p>总结：<br>静态代理模式在不改变目标对象的前提下，实现了对目标对象的功能扩展。<br>不足：静态代理实现了目标对象的所有方法，一旦目标接口增加方法，代理对象和目标对象都要进行相应的修改，增加维护成本。</p><h2 id="JDK动态代理"><a href="#JDK动态代理" class="headerlink" title="JDK动态代理"></a>JDK动态代理</h2><p>为解决静态代理对象必须实现接口的所有方法的问题，Java给出了动态代理，动态代理具有如下特点：<br>1.Proxy对象不需要implements接口；<br>2.Proxy对象的生成利用JDK的Api，在JVM内存中动态的构建Proxy对象。需要使用java.lang.reflect.Proxy类的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns an instance of a proxy class for the specified interfaces</span></span><br><span class="line"><span class="comment">     * that dispatches method invocations to the specified invocation</span></span><br><span class="line"><span class="comment">     * handler.</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>   loader the class loader to define the proxy class</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>   interfaces the list of interfaces for the proxy class</span></span><br><span class="line"><span class="comment">     *          to implement</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>   h the invocation handler to dispatch method invocations to</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  a proxy instance with the specified invocation handler of a</span></span><br><span class="line"><span class="comment">     *          proxy class that is defined by the specified class loader</span></span><br><span class="line"><span class="comment">     *          and that implements the specified interfaces</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> Object <span class="title">newProxyInstance</span><span class="params">(ClassLoader loader, Class&lt;?&gt;[] interfaces,InvocationHandler invocationHandler )</span></span>;</span><br></pre></td></tr></table></figure><p>方法，方法参数说明：<br>a.ClassLoader loader：指定当前target对象使用类加载器，获取加载器的方法是固定的；<br>b.Class&lt;?&gt;[] interfaces：target对象实现的接口的类型，使用泛型方式确认类型<br>c.InvocationHandler invocationHandler:事件处理,执行target对象的方法时，会触发事件处理器的方法，会把当前执行target对象的方法作为参数传入。</p><h3 id="实战代码"><a href="#实战代码" class="headerlink" title="实战代码"></a>实战代码</h3><p>AdminServiceImpl.java和AdminService.java和原来一样，这里不再赘述。<br>AdminServiceInvocation.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lance.proxy.demo.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdminServiceInvocation</span>  <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AdminServiceInvocation</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"判断用户是否有权限进行操作"</span>);</span><br><span class="line">       Object obj = method.invoke(target);</span><br><span class="line">        System.out.println(<span class="string">"记录用户执行操作的用户信息、更改内容和时间等"</span>);</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AdminServiceDynamicProxy.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lance.proxy.demo.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdminServiceDynamicProxy</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line">    <span class="keyword">private</span> InvocationHandler invocationHandler;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AdminServiceDynamicProxy</span><span class="params">(Object target,InvocationHandler invocationHandler)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">        <span class="keyword">this</span>.invocationHandler = invocationHandler;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getPersonProxy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Object obj = Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), invocationHandler);</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DynamicProxyTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lance.proxy.demo.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicProxyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 方法一</span></span><br><span class="line">        System.out.println(<span class="string">"============ 方法一 =============="</span>);</span><br><span class="line">        AdminService adminService = <span class="keyword">new</span> AdminServiceImpl();</span><br><span class="line">        System.out.println(<span class="string">"代理的目标对象："</span> + adminService.getClass());</span><br><span class="line"></span><br><span class="line">        AdminServiceInvocation adminServiceInvocation = <span class="keyword">new</span> AdminServiceInvocation(adminService);</span><br><span class="line"></span><br><span class="line">        AdminService proxy = (AdminService) <span class="keyword">new</span> AdminServiceDynamicProxy(adminService, adminServiceInvocation).getPersonProxy();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"代理对象："</span> + proxy.getClass());</span><br><span class="line"></span><br><span class="line">        Object obj = proxy.find();</span><br><span class="line">        System.out.println(<span class="string">"find 返回对象："</span> + obj.getClass());</span><br><span class="line">        System.out.println(<span class="string">"----------------------------------"</span>);</span><br><span class="line">        proxy.update();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方法二</span></span><br><span class="line">        System.out.println(<span class="string">"============ 方法二 =============="</span>);</span><br><span class="line">        AdminService target = <span class="keyword">new</span> AdminServiceImpl();</span><br><span class="line">        AdminServiceInvocation invocation = <span class="keyword">new</span> AdminServiceInvocation(adminService);</span><br><span class="line">        AdminService proxy2 = (AdminService) Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), invocation);</span><br><span class="line"></span><br><span class="line">        Object obj2 = proxy2.find();</span><br><span class="line">        System.out.println(<span class="string">"find 返回对象："</span> + obj2.getClass());</span><br><span class="line">        System.out.println(<span class="string">"----------------------------------"</span>);</span><br><span class="line">        proxy2.update();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方法三</span></span><br><span class="line">        System.out.println(<span class="string">"============ 方法三 =============="</span>);</span><br><span class="line">        <span class="keyword">final</span> AdminService target3 = <span class="keyword">new</span> AdminServiceImpl();</span><br><span class="line">        AdminService proxy3 = (AdminService) Proxy.newProxyInstance(target3.getClass().getClassLoader(), target3.getClass().getInterfaces(), <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"判断用户是否有权限进行操作"</span>);</span><br><span class="line">                Object obj = method.invoke(target3, args);</span><br><span class="line">                System.out.println(<span class="string">"记录用户执行操作的用户信息、更改内容和时间等"</span>);</span><br><span class="line">                <span class="keyword">return</span> obj;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        Object obj3 = proxy3.find();</span><br><span class="line">        System.out.println(<span class="string">"find 返回对象："</span> + obj3.getClass());</span><br><span class="line">        System.out.println(<span class="string">"----------------------------------"</span>);</span><br><span class="line">        proxy3.update();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">============ 方法一 ==============</span><br><span class="line">代理的目标对象：<span class="class"><span class="keyword">class</span> <span class="title">com</span>.<span class="title">lance</span>.<span class="title">proxy</span>.<span class="title">demo</span>.<span class="title">service</span>.<span class="title">AdminServiceImpl</span></span></span><br><span class="line"><span class="class">代理对象：<span class="title">class</span> <span class="title">com</span>.<span class="title">sun</span>.<span class="title">proxy</span>.$<span class="title">Proxy0</span></span></span><br><span class="line"><span class="class">判断用户是否有权限进行操作</span></span><br><span class="line"><span class="class">查看管理系统数据</span></span><br><span class="line"><span class="class">记录用户执行操作的用户信息、更改内容和时间等</span></span><br><span class="line"><span class="class"><span class="title">find</span> 返回对象：<span class="title">class</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">Object</span></span></span><br><span class="line"><span class="class">----------------------------------</span></span><br><span class="line"><span class="class">判断用户是否有权限进行操作</span></span><br><span class="line"><span class="class">修改管理系统数据</span></span><br><span class="line"><span class="class">记录用户执行操作的用户信息、更改内容和时间等</span></span><br><span class="line"><span class="class"></span>============ 方法二 ==============</span><br><span class="line">判断用户是否有权限进行操作</span><br><span class="line">查看管理系统数据</span><br><span class="line">记录用户执行操作的用户信息、更改内容和时间等</span><br><span class="line">find 返回对象：<span class="class"><span class="keyword">class</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">Object</span></span></span><br><span class="line"><span class="class">----------------------------------</span></span><br><span class="line"><span class="class">判断用户是否有权限进行操作</span></span><br><span class="line"><span class="class">修改管理系统数据</span></span><br><span class="line"><span class="class">记录用户执行操作的用户信息、更改内容和时间等</span></span><br><span class="line"><span class="class"></span>============ 方法三 ==============</span><br><span class="line">判断用户是否有权限进行操作</span><br><span class="line">查看管理系统数据</span><br><span class="line">记录用户执行操作的用户信息、更改内容和时间等</span><br><span class="line">find 返回对象：<span class="class"><span class="keyword">class</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">Object</span></span></span><br><span class="line"><span class="class">----------------------------------</span></span><br><span class="line"><span class="class">判断用户是否有权限进行操作</span></span><br><span class="line"><span class="class">修改管理系统数据</span></span><br><span class="line"><span class="class">记录用户执行操作的用户信息、更改内容和时间等</span></span><br></pre></td></tr></table></figure><h2 id="Cglib代理"><a href="#Cglib代理" class="headerlink" title="Cglib代理"></a>Cglib代理</h2><p>DK动态代理要求target对象是一个接口的实现对象，假如target对象只是一个单独的对象，并没有实现任何接口，这时候就会用到Cglib代理(Code Generation Library)，即通过构建一个子类对象，从而实现对target对象的代理，因此目标对象不能是final类(报错)，且目标对象的方法不能是final或static（不执行代理功能）。<br>Cglib依赖的jar包</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&lt;dependency&gt;</span></span><br><span class="line">          <span class="string">&lt;groupId&gt;cglib&lt;/groupId&gt;</span></span><br><span class="line">          <span class="string">&lt;artifactId&gt;cglib&lt;/artifactId&gt;</span></span><br><span class="line">          <span class="string">&lt;version&gt;3.2.10&lt;/version&gt;</span></span><br><span class="line"><span class="string">&lt;/dependency&gt;</span></span><br></pre></td></tr></table></figure><h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p>目标对象类AdminCglibService.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lance.proxy.demo.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdminCglibService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"修改管理系统数据"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">find</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"查看管理系统数据"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Object();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代理类AdminServiceCglibProxy.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lance.proxy.demo.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.Enhancer;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodInterceptor;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodProxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdminServiceCglibProxy</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AdminServiceCglibProxy</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//给目标对象创建一个代理对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getProxyInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//工具类</span></span><br><span class="line">        Enhancer en = <span class="keyword">new</span> Enhancer();</span><br><span class="line">        <span class="comment">//设置父类</span></span><br><span class="line">        en.setSuperclass(target.getClass());</span><br><span class="line">        <span class="comment">//设置回调函数</span></span><br><span class="line">        en.setCallback(<span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">//创建子类代理对象</span></span><br><span class="line">        <span class="keyword">return</span> en.create();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object object, Method method, Object[] arg2, MethodProxy proxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"判断用户是否有权限进行操作"</span>);</span><br><span class="line">        Object obj = method.invoke(target);</span><br><span class="line">        System.out.println(<span class="string">"记录用户执行操作的用户信息、更改内容和时间等"</span>);</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Cglib代理测试类CglibProxyTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lance.proxy.demo.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CglibProxyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        AdminCglibService target = <span class="keyword">new</span> AdminCglibService();</span><br><span class="line">        AdminServiceCglibProxy proxyFactory = <span class="keyword">new</span> AdminServiceCglibProxy(target);</span><br><span class="line">        AdminCglibService proxy = (AdminCglibService)proxyFactory.getProxyInstance();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"代理对象："</span> + proxy.getClass());</span><br><span class="line"></span><br><span class="line">        Object obj = proxy.find();</span><br><span class="line">        System.out.println(<span class="string">"find 返回对象："</span> + obj.getClass());</span><br><span class="line">        System.out.println(<span class="string">"----------------------------------"</span>);</span><br><span class="line">        proxy.update();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">代理对象：<span class="class"><span class="keyword">class</span> <span class="title">com</span>.<span class="title">lance</span>.<span class="title">proxy</span>.<span class="title">demo</span>.<span class="title">service</span>.<span class="title">AdminCglibService</span>$$<span class="title">EnhancerByCGLIB</span>$$41<span class="title">b156f9</span></span></span><br><span class="line"><span class="class">判断用户是否有权限进行操作</span></span><br><span class="line"><span class="class">查看管理系统数据</span></span><br><span class="line"><span class="class">记录用户执行操作的用户信息、更改内容和时间等</span></span><br><span class="line"><span class="class"><span class="title">find</span> 返回对象：<span class="title">class</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">Object</span></span></span><br><span class="line"><span class="class">----------------------------------</span></span><br><span class="line"><span class="class">判断用户是否有权限进行操作</span></span><br><span class="line"><span class="class">修改管理系统数据</span></span><br><span class="line"><span class="class">记录用户执行操作的用户信息、更改内容和时间等</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>理解上述Java代理后，也就明白Spring AOP的代理实现模式，即加入Spring中的target是接口的实现时，就使用JDK动态代理，否是就使用Cglib代理。Spring也可以通过<aop:config proxy-target-class="true">强制使用Cglib代理，使用Java字节码编辑类库ASM操作字节码来实现，直接以二进制形式动态地生成 stub 类或其他代理类，性能比JDK更强。</aop:config></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;代理模式（Proxy）是通过代理对象访问目标对象，这样可以在目标对象基础上增强额外的功能，如添加权限，访问控制和审计等功能。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="面试" scheme="https://linbei.top/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="JAVA" scheme="https://linbei.top/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>TCP拥塞控制机制</title>
    <link href="https://linbei.top/TCP%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6%E6%9C%BA%E5%88%B6/"/>
    <id>https://linbei.top/TCP%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6%E6%9C%BA%E5%88%B6/</id>
    <published>2020-06-23T13:51:57.000Z</published>
    <updated>2020-06-23T12:06:39.066Z</updated>
    
    <content type="html"><![CDATA[<h2 id="产生的原因"><a href="#产生的原因" class="headerlink" title="产生的原因"></a>产生的原因</h2><p>∑对资源的需求&gt;可用资源<br><a id="more"></a></p><blockquote><p>注意<br>单纯的增加网络资源无法解决问题<br>例如：把结点的存储空间扩大，更换更高速率的链路，提高结点处理机的运算速度，不仅不能解决问题，而且可能使网络性能更坏。<br>原因：网络拥塞是许多因素引起的，单纯的解决一个可能会使上述情况得到一些缓解，但是会把拥塞转移到其他地方。<br>扩大结点存储空间——&gt;由于输出链路的容量和处理机的速度并未提高，增大排队等待时间，超时重传，浪费资源。<br>更换更高速率的链路——&gt;可能会缓解，，有可能造成各部分不匹配。</p></blockquote><h2 id="拥塞控制的作用"><a href="#拥塞控制的作用" class="headerlink" title="拥塞控制的作用"></a>拥塞控制的作用</h2><img src="/TCP%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6%E6%9C%BA%E5%88%B6/2020-06-23-19-29-01.png" class><blockquote><p>注意<br>拥塞控制与流量控制的区别<br>拥塞控制是防止过多的数据注入到网络中，可以使网络中的路由器或链路不致过载，是一个全局性的过程。<br>流量控制是点对点通信量的控制，是一个端到端的问题，主要就是抑制发送端发送数据的速率，以便接收端来得及接收.</p></blockquote><h2 id="拥塞的标志"><a href="#拥塞的标志" class="headerlink" title="拥塞的标志"></a>拥塞的标志</h2><ol><li>重传计时器超时</li><li>接收到三个重复确认</li></ol><h2 id="拥塞控制的机制"><a href="#拥塞控制的机制" class="headerlink" title="拥塞控制的机制"></a>拥塞控制的机制</h2><img src="/TCP%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6%E6%9C%BA%E5%88%B6/2020-06-23-19-30-53.png" class><img src="/TCP%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6%E6%9C%BA%E5%88%B6/2020-06-23-19-31-02.png" class><h2 id="慢开始与拥塞避免"><a href="#慢开始与拥塞避免" class="headerlink" title="慢开始与拥塞避免"></a>慢开始与拥塞避免</h2><h3 id="慢开始"><a href="#慢开始" class="headerlink" title="慢开始"></a>慢开始</h3><ol><li>慢开始不是指cwnd的增长速度慢（指数增长），而是指TCP开始发送设置cwnd=1。</li><li><p>思路：不要一开始就发送大量的数据，先探测一下网络的拥塞程度，也就是说由小到大逐渐增加拥塞窗口的大小。这里用报文段的个数的拥塞窗口大小举例说明慢开始算法，实时拥塞窗口大小是以字节为单位的。如下图：</p><img src="/TCP%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6%E6%9C%BA%E5%88%B6/2020-06-23-19-31-53.png" class></li><li><p>为了防止cwnd增长过大引起网络拥塞，设置一个慢开始门限（ssthresh状态变量）<br>当cnwd＜ssthresh，使用慢开始算法<br>当cnwd=ssthresh，既可使用慢开始算法，也可以使用拥塞避免算法<br>当cnwd＞ssthresh，使用拥塞避免算法</p></li></ol><h3 id="拥塞避免（按线性规律增长）"><a href="#拥塞避免（按线性规律增长）" class="headerlink" title="拥塞避免（按线性规律增长）"></a>拥塞避免（按线性规律增长）</h3><ol><li>拥塞避免并非完全能够避免拥塞，是说在拥塞避免阶段将拥塞窗口控制为按线性规律增长，使网络比较不容易出现拥塞。</li><li>思路：让拥塞窗口cwnd缓慢地增大，即每经过一个往返时间RTT就把发送方的拥塞控制窗口加一。</li></ol><p>无论是在慢开始阶段还是在拥塞避免阶段，只要发送方判断网络出现拥塞（其根据就是没有收到确认，虽然没有收到确认可能是其他原因的分组丢失，但是因为无法判定，所以都当做拥塞来处理），就把慢开始门限设置为出现拥塞时的发送窗口大小的一半。然后把拥塞窗口设置为1，执行慢开始算法。<br><img src="/TCP%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6%E6%9C%BA%E5%88%B6/2020-06-23-19-32-53.png" class></p><blockquote><p>加法增大与乘法减小<br>乘法减小：无论是慢开始阶段还是拥塞避免，只要出现了网络拥塞（超时），就把慢开始门限值ssthresh减半<br>加法增大：执行拥塞避免算法后，拥塞窗口线性缓慢增大，防止网络过早出现拥塞</p></blockquote><h3 id="快重传与快恢复"><a href="#快重传与快恢复" class="headerlink" title="快重传与快恢复"></a>快重传与快恢复</h3><img src="/TCP%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6%E6%9C%BA%E5%88%B6/2020-06-23-19-34-09.png" class><h3 id="快重传"><a href="#快重传" class="headerlink" title="快重传"></a>快重传</h3><ol><li>快重传要求接收方在收到一个失序的报文段后就立即发出重复确认（为的是使发送方及早知道有报文段没有到达对方）而不要等到自己发送数据时捎带确认。快重传算法规定，发送方只要一连收到三个重复确认就应当立即重传对方尚未收到的报文段，而不必继续等待设置的重传计时器时间到期。<img src="/TCP%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6%E6%9C%BA%E5%88%B6/2020-06-23-19-34-48.png" class></li><li>由于不需要等待设置的重传计时器到期，能尽早重传未被确认的报文段，能提高整个网络的吞吐量。</li></ol><h3 id="快恢复（与快重传配合使用）"><a href="#快恢复（与快重传配合使用）" class="headerlink" title="快恢复（与快重传配合使用）"></a>快恢复（与快重传配合使用）</h3><ol><li>采用快恢复算法时，慢开始只在TCP连接建立时和网络出现超时时才使用。</li><li>当发送方连续收到三个重复确认时，就执行“乘法减小”算法，把ssthresh门限减半。但是接下去并不执行慢开始算法。</li><li>考虑到如果网络出现拥塞的话就不会收到好几个重复的确认，所以发送方现在认为网络可能没有出现拥塞。所以此时不执行慢开始算法，而是将cwnd设置为ssthresh的大小，然后执行拥塞避免算法。</li></ol><blockquote><p>注意<br>发送方窗口的上限值=Min（接受窗口rwnd，拥塞窗口cwnd）<br>rwnd＞cwnd 接收方的接收能力限制发送方窗口的最大值<br>rwnd＜cwnd 网络的拥塞限制发送方窗口的最大值</p></blockquote><h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><p>腾讯面试题<br>TCP的拥塞控制机制是什么？请简单说说。<br>答：我们知道TCP通过一个定时器（timer）采样了RTT并计算RTO，但是，如果网络上的延时突然增加，那么，TCP对这个事做出的应对只有重传数据，然而重传会导致网络的负担更重，于是会导致更大的延迟以及更多的丢包，这就导致了恶性循环，最终形成“网络风暴” —— TCP的拥塞控制机制就是用于应对这种情况。<br>首先需要了解一个概念，为了在发送端调节所要发送的数据量，定义了一个“拥塞窗口”（Congestion Window），在发送数据时，将拥塞窗口的大小与接收端ack的窗口大小做比较，取较小者作为发送数据量的上限。<br>拥塞控制主要是四个算法：</p><ol><li>慢启动：意思是刚刚加入网络的连接，一点一点地提速，不要一上来就把路占满。<br>连接建好的开始先初始化cwnd = 1，表明可以传一个MSS大小的数据。<br>每当收到一个ACK，cwnd++; 呈线性上升<br>每当过了一个RTT，cwnd = cwnd*2; 呈指数让升<br>阈值ssthresh（slow start threshold），是一个上限，当cwnd &gt;= ssthresh时，就会进入“拥塞避免算法”</li><li>拥塞避免：当拥塞窗口 cwnd 达到一个阈值时，窗口大小不再呈指数上升，而是以线性上升，避免增长过快导致网络拥塞。<br>每当收到一个ACK，cwnd = cwnd + 1/cwnd<br>每当过了一个RTT，cwnd = cwnd + 1<br>拥塞发生：当发生丢包进行数据包重传时，表示网络已经拥塞。分两种情况进行处理：<br>等到RTO超时，重传数据包<br>sshthresh = cwnd /2<br>cwnd 重置为 1</li><li>进入慢启动过程<br>在收到3个duplicate ACK时就开启重传，而不用等到RTO超时<br>sshthresh = cwnd = cwnd /2<br>进入快速恢复算法——Fast Recovery</li><li>快速恢复：至少收到了3个Duplicated Acks，说明网络也不那么糟糕，可以快速恢复。<br>cwnd = sshthresh + 3 * MSS （3的意思是确认有3个数据包被收到了）<br>重传Duplicated ACKs指定的数据包<br>如果再收到 duplicated Acks，那么cwnd = cwnd +1<br>如果收到了新的Ack，那么，cwnd = sshthresh ，然后就进入了拥塞避免的算法了。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;产生的原因&quot;&gt;&lt;a href=&quot;#产生的原因&quot; class=&quot;headerlink&quot; title=&quot;产生的原因&quot;&gt;&lt;/a&gt;产生的原因&lt;/h2&gt;&lt;p&gt;∑对资源的需求&amp;gt;可用资源&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="面试" scheme="https://linbei.top/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="计算机网络" scheme="https://linbei.top/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>数据库死锁问题</title>
    <link href="https://linbei.top/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%AD%BB%E9%94%81%E9%97%AE%E9%A2%98/"/>
    <id>https://linbei.top/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%AD%BB%E9%94%81%E9%97%AE%E9%A2%98/</id>
    <published>2020-06-17T13:51:57.000Z</published>
    <updated>2020-09-18T08:57:53.746Z</updated>
    
    <content type="html"><![CDATA[<p>两个事务 update同一张表出现的死锁问题<br><a id="more"></a><br><img src="/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%AD%BB%E9%94%81%E9%97%AE%E9%A2%98/2020-08-22-21-28-30.png" class><br>这个就是我们在代码中写了大批量的update语句，用trace Profiler ，我们对死锁追踪是这样的：<br><img src="/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%AD%BB%E9%94%81%E9%97%AE%E9%A2%98/2020-08-22-21-28-42.png" class><br>我们来分析一下上面的图，上面为DeakLock graph，图中左右两边的椭圆形相当于一个处理节点（Process Node），当鼠标移动到上面的时候，可以看到内部执行的代码，如update，Insert，Delete等等，有打叉的左边的椭圆形就是牺牲者，没有打叉的为优胜者。中间两个长方形就是一个资源节点（Resource Node），描述数据库中的对象，如一个表、一行或者一个索引。在我们当前的实例中，描述的是：假设左边的椭圆形为Process Node1，右边的椭圆形为Process Node2，上面的长方形为Resource Node1，下面为Resource Node2，Process Node1对Resource Node1申请一个U锁，但是，Resource Node1被Process Node2的X锁占有；另一边，Process Node2对Resource Node2申请一个U锁，但是Resource Node2被Process Node1的X锁占有。这样就形成了一个资源占有的死循环，这个时候，sql server会在sq_lock中检测到死锁，这个时候，就会出现一个牺牲品的事情，以至于系统能够继续运行。</p><p> 我们可以看一下，两个事务分为什么：<br> <img src="/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%AD%BB%E9%94%81%E9%97%AE%E9%A2%98/2020-08-22-21-29-04.png" class><br> 右边的Process Node2为：<br> <img src="/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%AD%BB%E9%94%81%E9%97%AE%E9%A2%98/2020-08-22-21-29-17.png" class><br> 可以粗略的看到，是两个update语句出现了死锁的问题。<br> 那么为什么两条update语句会出现死锁的问题呢？我们通过一个简单的数据库进行模拟一下当时两条update语句的死锁。</p><p> 模拟：</p><p>下面是我们的建表语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> ANSI_NULLS <span class="keyword">ON</span>  </span><br><span class="line"><span class="keyword">GO</span>  </span><br><span class="line"><span class="keyword">SET</span> QUOTED_IDENTIFIER <span class="keyword">ON</span>  </span><br><span class="line"><span class="keyword">GO</span>  </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [dbo].[table1](  </span><br><span class="line"> [A] [<span class="keyword">nvarchar</span>](<span class="number">10</span>) <span class="literal">NULL</span>,  </span><br><span class="line"> [B] [<span class="keyword">nvarchar</span>](<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,  </span><br><span class="line"> [C] [<span class="keyword">nvarchar</span>](<span class="number">10</span>) <span class="literal">NULL</span>  </span><br><span class="line">) <span class="keyword">ON</span> [PRIMARY]  </span><br><span class="line"><span class="keyword">GO</span>  </span><br><span class="line"><span class="keyword">INSERT</span> [dbo].[table1] ([A], [B], [C]) <span class="keyword">VALUES</span> (N<span class="string">'aa1'</span>, N<span class="string">'b1'</span>, N<span class="string">'11'</span>)  </span><br><span class="line"><span class="keyword">INSERT</span> [dbo].[table1] ([A], [B], [C]) <span class="keyword">VALUES</span> (N<span class="string">'aa2'</span>, N<span class="string">'b3'</span>, N<span class="string">'11'</span>)  </span><br><span class="line"><span class="keyword">INSERT</span> [dbo].[table1] ([A], [B], [C]) <span class="keyword">VALUES</span> (N<span class="string">'aa3'</span>, N<span class="string">'b4'</span>, N<span class="string">'11'</span>)  </span><br><span class="line"><span class="keyword">INSERT</span> [dbo].[table1] ([A], [B], [C]) <span class="keyword">VALUES</span> (N<span class="string">'aa3'</span>, N<span class="string">'b5'</span>, N<span class="string">'11'</span>)  </span><br><span class="line"><span class="keyword">INSERT</span> [dbo].[table1] ([A], [B], [C]) <span class="keyword">VALUES</span> (N<span class="string">'aa3'</span>, N<span class="string">'b2'</span>, N<span class="string">'11'</span>)  </span><br><span class="line"><span class="keyword">INSERT</span> [dbo].[table1] ([A], [B], [C]) <span class="keyword">VALUES</span> (N<span class="string">'aa3'</span>, N<span class="string">'b6'</span>, N<span class="string">'11'</span>)  </span><br><span class="line"><span class="keyword">INSERT</span> [dbo].[table1] ([A], [B], [C]) <span class="keyword">VALUES</span> (N<span class="string">'aa3'</span>, N<span class="string">'b7'</span>, N<span class="string">'11'</span>)  </span><br><span class="line"><span class="keyword">INSERT</span> [dbo].[table1] ([A], [B], [C]) <span class="keyword">VALUES</span> (N<span class="string">'aa3'</span>, N<span class="string">'b8'</span>, N<span class="string">'11'</span>)  </span><br><span class="line"><span class="keyword">INSERT</span> [dbo].[table1] ([A], [B], [C]) <span class="keyword">VALUES</span> (N<span class="string">'aa1'</span>, N<span class="string">'b9'</span>, N<span class="string">'11'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> [dbo].[table1] ([A], [B], [C]) <span class="keyword">VALUES</span> (N<span class="string">'aa1'</span>, N<span class="string">'b1'</span>, N<span class="string">'11'</span>)  </span><br><span class="line"><span class="keyword">INSERT</span> [dbo].[table1] ([A], [B], [C]) <span class="keyword">VALUES</span> (N<span class="string">'aa2'</span>, N<span class="string">'b3'</span>, N<span class="string">'11'</span>)  </span><br><span class="line"><span class="keyword">INSERT</span> [dbo].[table1] ([A], [B], [C]) <span class="keyword">VALUES</span> (N<span class="string">'aa3'</span>, N<span class="string">'b4'</span>, N<span class="string">'11'</span>)  </span><br><span class="line"><span class="keyword">INSERT</span> [dbo].[table1] ([A], [B], [C]) <span class="keyword">VALUES</span> (N<span class="string">'aa3'</span>, N<span class="string">'b5'</span>, N<span class="string">'11'</span>)  </span><br><span class="line"><span class="keyword">INSERT</span> [dbo].[table1] ([A], [B], [C]) <span class="keyword">VALUES</span> (N<span class="string">'aa3'</span>, N<span class="string">'b2'</span>, N<span class="string">'11'</span>)  </span><br><span class="line"><span class="keyword">INSERT</span> [dbo].[table1] ([A], [B], [C]) <span class="keyword">VALUES</span> (N<span class="string">'aa3'</span>, N<span class="string">'b6'</span>, N<span class="string">'11'</span>)  </span><br><span class="line"><span class="keyword">INSERT</span> [dbo].[table1] ([A], [B], [C]) <span class="keyword">VALUES</span> (N<span class="string">'aa3'</span>, N<span class="string">'b7'</span>, N<span class="string">'11'</span>)  </span><br><span class="line"><span class="keyword">INSERT</span> [dbo].[table1] ([A], [B], [C]) <span class="keyword">VALUES</span> (N<span class="string">'aa3'</span>, N<span class="string">'b8'</span>, N<span class="string">'11'</span>)  </span><br><span class="line"><span class="keyword">INSERT</span> [dbo].[table1] ([A], [B], [C]) <span class="keyword">VALUES</span> (N<span class="string">'aa1'</span>, N<span class="string">'b9'</span>, N<span class="string">'11'</span>)</span><br></pre></td></tr></table></figure><p>我们第一个update事务为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">TRANSACTION</span> <span class="keyword">ISOLATION</span> <span class="keyword">LEVEL</span> <span class="keyword">READ</span> UNCOMMITTED</span><br><span class="line"><span class="keyword">begin</span> tran  </span><br><span class="line">   print <span class="keyword">convert</span>(<span class="keyword">nvarchar</span>(<span class="number">30</span>),<span class="keyword">convert</span>(datetime,<span class="keyword">getdate</span>(),<span class="number">121</span>),<span class="number">121</span>)  </span><br><span class="line">     <span class="keyword">update</span> t_table  </span><br><span class="line">     <span class="keyword">set</span> A=<span class="string">'aa1'</span>  </span><br><span class="line">     <span class="keyword">where</span> B=<span class="string">'b3'</span>  </span><br><span class="line">   print <span class="keyword">convert</span>(<span class="keyword">nvarchar</span>(<span class="number">30</span>),<span class="keyword">convert</span>(datetime,<span class="keyword">getdate</span>(),<span class="number">121</span>),<span class="number">121</span>)  </span><br><span class="line">   EXEC sp_lock @@spid  </span><br><span class="line">   </span><br><span class="line">   waitfor  delay <span class="string">'00:00:10'</span>  </span><br><span class="line">  </span><br><span class="line">     <span class="keyword">update</span> t_table  </span><br><span class="line">     <span class="keyword">set</span> A=<span class="string">'aa2'</span>  </span><br><span class="line">     <span class="keyword">where</span> B=<span class="string">'b8'</span>  </span><br><span class="line">     EXEC sp_lock @@spid  </span><br><span class="line">   print <span class="keyword">convert</span>(<span class="keyword">nvarchar</span>(<span class="number">30</span>),<span class="keyword">convert</span>(datetime,<span class="keyword">getdate</span>(),<span class="number">121</span>),<span class="number">121</span>)  </span><br><span class="line"><span class="keyword">commit</span> tran</span><br></pre></td></tr></table></figure><p>第二个update事务为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">TRANSACTION</span> <span class="keyword">ISOLATION</span> <span class="keyword">LEVEL</span> <span class="keyword">Read</span> UNCOMMITTED  </span><br><span class="line"><span class="keyword">begin</span> tran  </span><br><span class="line"><span class="keyword">update</span> table1   </span><br><span class="line"><span class="keyword">set</span> A=<span class="string">'aa3'</span>  </span><br><span class="line"><span class="keyword">where</span> B=<span class="string">'b1'</span>  </span><br><span class="line"></span><br><span class="line">EXEC sp_lock @@spid  </span><br><span class="line"><span class="keyword">commit</span> tran</span><br></pre></td></tr></table></figure><p>两个事物首先我们触发事务一，然后紧接着，我们触发事务二，这个时候，消息中出现：</p><p>这个时候，我们追踪死锁的时候，是这样的：<br><img src="/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%AD%BB%E9%94%81%E9%97%AE%E9%A2%98/2020-08-22-21-31-06.png" class></p><p>两个Process Node节点执行的事务为：<br><img src="/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%AD%BB%E9%94%81%E9%97%AE%E9%A2%98/2020-08-22-21-31-45.png" class></p><p>可以看到，其实是我们上面写的事务，一个是牺牲品，另外一个为优胜品。那么我们现在最大的疑问，就是，他们的申请U锁和X锁，是如何形成死锁的呢？</p><p>我们首先看一下现在table1表中的数据：<br><img src="/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%AD%BB%E9%94%81%E9%97%AE%E9%A2%98/2020-08-22-21-32-31.png" class></p><p>我们把数据放到Excel中进行分析：<br><img src="/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%AD%BB%E9%94%81%E9%97%AE%E9%A2%98/2020-08-22-21-32-56.png" class></p><p>首先我运行事务一（Process Node1），我们看看它的代码：首先要进行这一步：update table1  set A=’aa1’ where B=’b3’ ，系统运行这一步的时候，是从第一条数据开始加上U锁的，当检查到第二条数据的时候，U锁发现，符合B=’b3’时，将U锁升级为X锁，这个时候，我们就在第一条蓝线这里表示为X，接下来，继续对第3条记录进行U锁，然后为第4条，第5条，到了第11条的时候，又存在了符合B=’b3’时，将U锁升级为X锁，也就是我表示的第二条蓝线，继续加U锁，发现，整张表都已经所扫描完了，没有存在符合条件的了，这个时候，如果Process Node1到这里就运行完了，我们应该释放X锁，但是Process Node1，后面还有代码：waitfor  delay ‘00:00:10’  ，也就是等待了10秒钟，这个时候，只要事务不执行完成，X锁不会释放。</p><p>而此时，我已经运行了事务二（Process Node2），我们看到它的代码是： update table1  set A=’aa3’  where B=’b1’，通过上面说明，我们同样分析一下该update语句的执行过程，Process Node2将table1中的数据从第一条开始加U锁，这个时候，第一条数据就符合 B=’b1’，这个时候，U锁升级为X锁，继续往下执行的时候，发现第二条数据已经被Process  Node1的X锁占有，X锁为排它锁的原因为不与其他锁兼容，也就是说，不能加U锁，这个时候，Process Node2只能等待Process Node1将X锁释放，而Process Node1 没有执行完成，是不会释放X锁的，所以Process Node2 等待Process Node1释放第二条记录的X锁。</p><p>这个时候，我们发现Process Node1中waitfor  delay ‘00:00:10’ ，代码已经运行完成，之后，进行update table1 set A=’aa2’ where B=’b8’代码，这条语句从第一条数据开始加U锁，但是，我们发现第一条数据已经被Process Node2的X锁占用，也就是说，Process Node1需要等待Process Node2 的X锁释放才行，所以Process Node1 在第一条记录这里等待。</p><p>我们最后看到的应该是这样的：<br><img src="/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%AD%BB%E9%94%81%E9%97%AE%E9%A2%98/2020-08-22-21-33-26.png" class></p><p>因此出现了上面的现象，就是Process Node2 想要对Resource Node1（第二条记录）请求U锁，但是，Resource Node1 被Process Node1 的X锁占用，而Process Node2 想要对Resource Node2（第一条记录）请求U锁，但是Resource Node2被Process Node2 的X锁占用。</p><p>解决方案：</p><p>我们的解决方案是这样的，在B的字段加上非聚集索引，就可以了，为什么呢？应为聚集索引和非聚集索引加U锁的时候，都不是整张表进行扫描的，而是直接就可以根据索引找到这条记录进行升级锁，所以，不会出现上面的死锁的问题。</p><p>结束语：<br>对于数据库锁的问题，我们要懂得锁的运行原理。不要仅仅停留在表面上，有时候，我们需要动手模拟sql server的运行原理来解决我们数据库中的死锁问题，原理很重要。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;两个事务 update同一张表出现的死锁问题&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据库" scheme="https://linbei.top/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="Sql" scheme="https://linbei.top/tags/Sql/"/>
    
  </entry>
  
  <entry>
    <title>JestClient操作ES</title>
    <link href="https://linbei.top/JestClient%E6%93%8D%E4%BD%9CElasticSearch/"/>
    <id>https://linbei.top/JestClient%E6%93%8D%E4%BD%9CElasticSearch/</id>
    <published>2020-05-31T13:51:57.000Z</published>
    <updated>2020-05-31T13:03:36.715Z</updated>
    
    <content type="html"><![CDATA[<p>使用JestClient操作ElasticSearch，具体代码如下<br><a id="more"></a><br>InitElasticSearchConfig.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mdl.monitor.init;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.gson.GsonBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.searchbox.client.JestClient;</span><br><span class="line"><span class="keyword">import</span> io.searchbox.client.JestClientFactory;</span><br><span class="line"><span class="keyword">import</span> io.searchbox.client.config.HttpClientConfig;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 初始化es</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InitElasticSearchConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> JestClient client ;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JestClient <span class="title">getClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> client;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InitElasticSearchConfig</span><span class="params">(String esUrl)</span></span>&#123;</span><br><span class="line">        client = getClientConfig(esUrl) ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JestClient <span class="title">getClientConfig</span><span class="params">(String esUrl)</span></span>&#123;</span><br><span class="line">        JestClientFactory factory = <span class="keyword">new</span> JestClientFactory();</span><br><span class="line">        factory.setHttpClientConfig(<span class="keyword">new</span> HttpClientConfig</span><br><span class="line">                .Builder(esUrl)</span><br><span class="line">                .gson(<span class="keyword">new</span> GsonBuilder().setDateFormat(<span class="string">"yyyy-MM-dd'T'HH:mm:ss"</span>).create())</span><br><span class="line">                .multiThreaded(<span class="keyword">true</span>)</span><br><span class="line">                .readTimeout(<span class="number">10000</span>)</span><br><span class="line">                .build());</span><br><span class="line">        JestClient client = factory.getObject();</span><br><span class="line">        <span class="keyword">return</span> client ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ElasticSearchDao.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mdl.monitor.repositorys.elasticsearch;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.gson.JsonObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.searchbox.client.JestResult;</span><br><span class="line"><span class="keyword">import</span> io.searchbox.core.SearchResult.Hit;</span><br><span class="line"><span class="keyword">import</span> io.searchbox.core.SuggestResult;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ES操作 抽象方法 基本包含所有基本操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ElasticSearchDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type ：当前删除document名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JestResult <span class="title">deleteIndex</span><span class="params">(String type)</span> </span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//清除缓存</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JestResult <span class="title">clearCache</span><span class="params">()</span> </span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关闭索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type ：文档表示的对象类别</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JestResult <span class="title">closeIndex</span><span class="params">(String type)</span> </span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//优化索引</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JestResult <span class="title">optimizeIndex</span><span class="params">()</span> </span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//刷新索引</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JestResult <span class="title">flushIndex</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断索引是否存在</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JestResult <span class="title">indicesExists</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查看节点信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JestResult <span class="title">nodesInfo</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查看集群健康信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JestResult <span class="title">health</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//节点状态</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JestResult <span class="title">nodesStats</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新Document</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index ：文档在哪存放</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type ： 文档表示的对象类别</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id ：文档唯一标识</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JestResult <span class="title">updateDocument</span><span class="params">(String script , String index,String type,String id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除Document</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index ：文档在哪存放</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type ： 文档表示的对象类别</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id ：文档唯一标识</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JestResult <span class="title">deleteDocument</span><span class="params">(String index,String type,String id)</span> </span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据条件删除</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> params</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JestResult <span class="title">deleteDocumentByQuery</span><span class="params">(String index, String type, String params)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取Document</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> o ：返回对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index ：文档在哪存放</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type ： 文档表示的对象类别</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id ：文档唯一标识</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">JestResult <span class="title">getDocument</span><span class="params">(T o , String index , String type , String id)</span> </span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Suggestion</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;SuggestResult.Suggestion&gt; suggest() ;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询全部</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index ：文档在哪存放</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; List&lt;Hit&lt;T,Void&gt;&gt; searchAll(String index , T o);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 搜索</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> keyWord ：搜索关键字</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; List&lt;Hit&lt;T,Void&gt;&gt; createSearch(String keyWord , String type , T o , String... fields) ;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//bulkIndex操作</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">bulkIndex</span><span class="params">(String index , String type , T o)</span> </span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> o ：返回对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index ：文档在哪存放</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type ： 文档表示的对象类别</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">JestResult <span class="title">createIndex</span><span class="params">(T o , String index , String type)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 搜索事件流图表数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> param</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JsonObject <span class="title">searchEvent</span><span class="params">(String param)</span></span>; </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ElasticSearchDaoImpl.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mdl.monitor.repositorys.elasticsearch.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.logging.Log;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.logging.LogFactory;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.index.query.QueryBuilders;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.builder.SearchSourceBuilder;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.fetch.subphase.highlight.HighlightBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mdl.monitor.init.InitElasticSearchConfig;</span><br><span class="line"><span class="keyword">import</span> com.mdl.monitor.repositorys.elasticsearch.ElasticSearchDao;</span><br><span class="line"><span class="keyword">import</span> com.google.gson.JsonObject;</span><br><span class="line"><span class="keyword">import</span> com.google.gson.JsonParser;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.searchbox.client.JestResult;</span><br><span class="line"><span class="keyword">import</span> io.searchbox.cluster.Health;</span><br><span class="line"><span class="keyword">import</span> io.searchbox.cluster.NodesInfo;</span><br><span class="line"><span class="keyword">import</span> io.searchbox.cluster.NodesStats;</span><br><span class="line"><span class="keyword">import</span> io.searchbox.core.Bulk;</span><br><span class="line"><span class="keyword">import</span> io.searchbox.core.Delete;</span><br><span class="line"><span class="keyword">import</span> io.searchbox.core.Get;</span><br><span class="line"><span class="keyword">import</span> io.searchbox.core.Index;</span><br><span class="line"><span class="keyword">import</span> io.searchbox.core.Search;</span><br><span class="line"><span class="keyword">import</span> io.searchbox.core.SearchResult;</span><br><span class="line"><span class="keyword">import</span> io.searchbox.core.SearchResult.Hit;</span><br><span class="line"><span class="keyword">import</span> io.searchbox.core.Suggest;</span><br><span class="line"><span class="keyword">import</span> io.searchbox.core.SuggestResult;</span><br><span class="line"><span class="keyword">import</span> io.searchbox.core.SuggestResult.Suggestion;</span><br><span class="line"><span class="keyword">import</span> io.searchbox.core.Update;</span><br><span class="line"><span class="keyword">import</span> io.searchbox.indices.ClearCache;</span><br><span class="line"><span class="keyword">import</span> io.searchbox.indices.CloseIndex;</span><br><span class="line"><span class="keyword">import</span> io.searchbox.indices.DeleteIndex;</span><br><span class="line"><span class="keyword">import</span> io.searchbox.indices.Flush;</span><br><span class="line"><span class="keyword">import</span> io.searchbox.indices.IndicesExists;</span><br><span class="line"><span class="keyword">import</span> io.searchbox.indices.Optimize;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * es操作实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ElasticSearchDaoImpl</span> <span class="keyword">implements</span> <span class="title">ElasticSearchDao</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">protected</span> <span class="keyword">final</span> Log log = LogFactory.getLog(ElasticSearchDaoImpl<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>())</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> InitElasticSearchConfig esConfig ;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JestResult <span class="title">deleteIndex</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">        DeleteIndex deleteIndex = <span class="keyword">new</span> DeleteIndex.Builder(type).build();</span><br><span class="line">        JestResult result = <span class="keyword">null</span> ;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result = esConfig.getClient().execute(deleteIndex);</span><br><span class="line">            log.info(<span class="string">"deleteIndex == "</span> + result.getJsonString());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JestResult <span class="title">clearCache</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ClearCache closeIndex = <span class="keyword">new</span> ClearCache.Builder().build();</span><br><span class="line">        JestResult result = <span class="keyword">null</span> ;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result = esConfig.getClient().execute(closeIndex);</span><br><span class="line">            log.info(<span class="string">"clearCache == "</span> + result.getJsonString());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JestResult <span class="title">closeIndex</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">        CloseIndex closeIndex = <span class="keyword">new</span> CloseIndex.Builder(type).build(); </span><br><span class="line">        JestResult result = <span class="keyword">null</span> ;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result = esConfig.getClient().execute(closeIndex);</span><br><span class="line">            log.info(<span class="string">"closeIndex == "</span> + result.getJsonString());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JestResult <span class="title">optimizeIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Optimize optimize = <span class="keyword">new</span> Optimize.Builder().build(); </span><br><span class="line">        JestResult result = <span class="keyword">null</span> ;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result = esConfig.getClient().execute(optimize);</span><br><span class="line">            log.info(<span class="string">"optimizeIndex == "</span> + result.getJsonString());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JestResult <span class="title">flushIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Flush flush = <span class="keyword">new</span> Flush.Builder().build(); </span><br><span class="line">        JestResult result = <span class="keyword">null</span> ;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result = esConfig.getClient().execute(flush);</span><br><span class="line">            log.info(<span class="string">"flushIndex == "</span> + result.getJsonString());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JestResult <span class="title">indicesExists</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        IndicesExists indicesExists = <span class="keyword">new</span> IndicesExists.Builder(<span class="string">"article"</span>).build();</span><br><span class="line">        JestResult result = <span class="keyword">null</span> ;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result = esConfig.getClient().execute(indicesExists);</span><br><span class="line">            log.info(<span class="string">"indicesExists == "</span> + result.getJsonString());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JestResult <span class="title">nodesInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        NodesInfo nodesInfo = <span class="keyword">new</span> NodesInfo.Builder().build();</span><br><span class="line">        JestResult result = <span class="keyword">null</span> ;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result = esConfig.getClient().execute(nodesInfo);</span><br><span class="line">            log.info(<span class="string">"nodesInfo == "</span> + result.getJsonString());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JestResult <span class="title">health</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Health health = <span class="keyword">new</span> Health.Builder().build();</span><br><span class="line">        JestResult result = <span class="keyword">null</span> ;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result = esConfig.getClient().execute(health);</span><br><span class="line">            log.info(<span class="string">"health == "</span> + result.getJsonString());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JestResult <span class="title">nodesStats</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        NodesStats nodesStats = <span class="keyword">new</span> NodesStats.Builder().build();</span><br><span class="line">        JestResult result = <span class="keyword">null</span> ;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result = esConfig.getClient().execute(nodesStats);</span><br><span class="line">            log.info(<span class="string">"nodesStats == "</span> + result.getJsonString());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JestResult <span class="title">updateDocument</span><span class="params">(String script , String index, String type, String id)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*String script = "&#123;" +</span></span><br><span class="line"><span class="comment">                "    \"doc\" : &#123;" +</span></span><br><span class="line"><span class="comment">                "        \"title\" : \""+article.getTitle()+"\"," +</span></span><br><span class="line"><span class="comment">                "        \"content\" : \""+article.getContent()+"\"," +</span></span><br><span class="line"><span class="comment">                "        \"author\" : \""+article.getAuthor()+"\"," +</span></span><br><span class="line"><span class="comment">                "        \"source\" : \""+article.getSource()+"\"," +</span></span><br><span class="line"><span class="comment">                "        \"url\" : \""+article.getUrl()+"\"," +</span></span><br><span class="line"><span class="comment">                "        \"pubdate\" : \""+new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(article.getPubdate())+"\"" +</span></span><br><span class="line"><span class="comment">                "    &#125;" +</span></span><br><span class="line"><span class="comment">                "&#125;";*/</span></span><br><span class="line">        Update update = <span class="keyword">new</span> Update.Builder(script).index(index).type(type).id(id).build();</span><br><span class="line">        JestResult result = <span class="keyword">null</span> ;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result = esConfig.getClient().execute(update);</span><br><span class="line">            log.info(<span class="string">"updateDocument == "</span> + result.getJsonString());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JestResult <span class="title">deleteDocument</span><span class="params">(String index, String type, String id)</span> </span>&#123;</span><br><span class="line">        Delete delete = <span class="keyword">new</span> Delete.Builder(id).index(index).type(type).build();</span><br><span class="line">        JestResult result = <span class="keyword">null</span> ;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result = esConfig.getClient().execute(delete);</span><br><span class="line">            log.info(<span class="string">"deleteDocument == "</span> + result.getJsonString());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JestResult <span class="title">deleteDocumentByQuery</span><span class="params">(String index, String type, String params)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        DeleteByQuery db = <span class="keyword">new</span> DeleteByQuery.Builder(params)</span><br><span class="line">                .addIndex(index)</span><br><span class="line">                .addType(type)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        JestResult result = <span class="keyword">null</span> ;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result = esConfig.getClient().execute(db);</span><br><span class="line">            log.info(<span class="string">"deleteDocument == "</span> + result.getJsonString());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">JestResult <span class="title">getDocument</span><span class="params">(T object , String index, String type, String id)</span> </span>&#123;</span><br><span class="line">        Get get = <span class="keyword">new</span> Get.Builder(index, id).type(type).build();</span><br><span class="line">        JestResult result = <span class="keyword">null</span> ;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result = esConfig.getClient().execute(get);     </span><br><span class="line">            T o = (T) result.getSourceAsObject(object.getClass());</span><br><span class="line">            <span class="keyword">for</span> (Method method : o.getClass().getMethods()) &#123;</span><br><span class="line">                log.info(<span class="string">"getDocument == "</span> + method.getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Suggestion&gt; <span class="title">suggest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String suggestionName = <span class="string">"my-suggestion"</span>;</span><br><span class="line">        Suggest suggest = <span class="keyword">new</span> Suggest.Builder(<span class="string">"&#123;"</span> +</span><br><span class="line">                <span class="string">"  \""</span> + suggestionName + <span class="string">"\" : &#123;"</span> +</span><br><span class="line">                <span class="string">"    \"text\" : \"the amsterdma meetpu\","</span> +</span><br><span class="line">                <span class="string">"    \"term\" : &#123;"</span> +</span><br><span class="line">                <span class="string">"      \"field\" : \"body\""</span> +</span><br><span class="line">                <span class="string">"    &#125;"</span> +</span><br><span class="line">                <span class="string">"  &#125;"</span> +</span><br><span class="line">                <span class="string">"&#125;"</span>).build();</span><br><span class="line">        SuggestResult suggestResult = <span class="keyword">null</span> ;</span><br><span class="line">        List&lt;SuggestResult.Suggestion&gt; suggestionList = <span class="keyword">null</span> ;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            suggestResult = esConfig.getClient().execute(suggest);</span><br><span class="line">            log.info(<span class="string">"suggestResult.isSucceeded() == "</span> + suggestResult.isSucceeded());</span><br><span class="line">            suggestionList = suggestResult.getSuggestions(suggestionName);</span><br><span class="line">            log.info(<span class="string">"suggestionList.size() == "</span> + suggestionList.size());</span><br><span class="line">            <span class="keyword">for</span>(SuggestResult.Suggestion suggestion:suggestionList)&#123;</span><br><span class="line">                System.out.println(suggestion.text);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> suggestionList ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; List&lt;Hit&lt;T, Void&gt;&gt; searchAll(String index , T o) &#123;</span><br><span class="line">        SearchSourceBuilder searchSourceBuilder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">        searchSourceBuilder.query(QueryBuilders.matchAllQuery());</span><br><span class="line">        Search search = <span class="keyword">new</span> Search.Builder(searchSourceBuilder.toString())</span><br><span class="line">                .addIndex(index)</span><br><span class="line">                .build();</span><br><span class="line">        SearchResult result = <span class="keyword">null</span> ;</span><br><span class="line">        List&lt;?&gt; hits = <span class="keyword">null</span> ;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result = esConfig.getClient().execute(search);</span><br><span class="line">            System.out.println(<span class="string">"本次查询共查到："</span>+result.getTotal()+<span class="string">"个关键字！"</span>);</span><br><span class="line">            log.info(<span class="string">"本次查询共查到："</span>+result.getTotal()+<span class="string">"个关键字！"</span>);</span><br><span class="line">            hits = result.getHits(o.getClass());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (List&lt;Hit&lt;T, Void&gt;&gt;) hits ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; List&lt;Hit&lt;T, Void&gt;&gt; createSearch(String keyWord , String type , T o , String... fields) &#123;</span><br><span class="line">        SearchSourceBuilder searchSourceBuilder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">        searchSourceBuilder.query(QueryBuilders.queryStringQuery(keyWord));</span><br><span class="line">        HighlightBuilder highlightBuilder = <span class="keyword">new</span> HighlightBuilder();</span><br><span class="line">        <span class="keyword">for</span>(String field : fields)&#123;</span><br><span class="line">            highlightBuilder.field(field);<span class="comment">//高亮field</span></span><br><span class="line">        &#125;</span><br><span class="line">        highlightBuilder.preTags(<span class="string">"&lt;em&gt;"</span>).postTags(<span class="string">"&lt;/em&gt;"</span>);<span class="comment">//高亮标签</span></span><br><span class="line">        highlightBuilder.fragmentSize(<span class="number">200</span>);<span class="comment">//高亮内容长度</span></span><br><span class="line">        searchSourceBuilder.highlighter(highlightBuilder);</span><br><span class="line">        Search search = <span class="keyword">new</span> Search.Builder(searchSourceBuilder.toString()).addIndex(type).build();</span><br><span class="line">        SearchResult result = <span class="keyword">null</span> ;</span><br><span class="line">        List&lt;?&gt; hits = <span class="keyword">null</span> ;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result = esConfig.getClient().execute(search);</span><br><span class="line">            System.out.println(<span class="string">"本次查询共查到："</span>+result.getTotal()+<span class="string">"个结果！"</span>);</span><br><span class="line"></span><br><span class="line">            hits = result.getHits(o.getClass());</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (List&lt;Hit&lt;T, Void&gt;&gt;) hits ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">bulkIndex</span><span class="params">(String index, String type , T o)</span> </span>&#123;</span><br><span class="line">        Bulk bulk = <span class="keyword">new</span> Bulk.Builder()</span><br><span class="line">                .defaultIndex(index)</span><br><span class="line">                .defaultType(type)</span><br><span class="line">                .addAction(Arrays.asList(</span><br><span class="line">                        <span class="keyword">new</span> Index.Builder(o).build()</span><br><span class="line">                )).build(); </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            esConfig.getClient().execute(bulk);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">JestResult <span class="title">createIndex</span><span class="params">(T o, String index, String type)</span> </span>&#123;</span><br><span class="line">        Index index1 = <span class="keyword">new</span> Index.Builder(o).index(index).type(type).build();</span><br><span class="line">        JestResult jestResult = <span class="keyword">null</span> ;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            jestResult = esConfig.getClient().execute(index1);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> jestResult;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JsonObject <span class="title">searchEvent</span><span class="params">(String param)</span> </span>&#123;</span><br><span class="line">        JsonObject returnData = <span class="keyword">new</span> JsonParser().parse(param).getAsJsonObject();</span><br><span class="line">        Search search = <span class="keyword">new</span> Search.Builder(returnData.toString()).addType(<span class="string">"event"</span>).addIndex(<span class="string">"pi"</span>).build();</span><br><span class="line"></span><br><span class="line"><span class="comment">//      Gson gs = new Gson();</span></span><br><span class="line"><span class="comment">//      System.out.println("输入参数为：" + "\n" + gs.toJson(search));</span></span><br><span class="line"></span><br><span class="line">        SearchResult result = <span class="keyword">null</span> ;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result = esConfig.getClient().execute(search);</span><br><span class="line"><span class="comment">//          System.out.println("\n" + gs.toJson(result.getJsonObject()) + "\n" );</span></span><br><span class="line"><span class="comment">//          System.out.println("本次查询共查到：" + "\n" +result.getTotal()+"个结果！");</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result.getJsonObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>project_servlet.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- es连接配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"esConfig"</span> <span class="attr">class</span>=<span class="string">"com.mdl.monitor.init.InitElasticSearchConfig"</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span>  <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">value</span>=<span class="string">"$&#123;elasticUrl&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>scroll分页</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JsonObject <span class="title">searchEventHistogramByScroll</span><span class="params">(String scrollId)</span> </span>&#123;</span><br><span class="line">        SearchScroll scroll = <span class="keyword">new</span> SearchScroll.Builder(scrollId, <span class="string">"1m"</span>).build();</span><br><span class="line">        JestResult result = <span class="keyword">null</span> ;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result = esConfig.getClient().execute(scroll);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result.getJsonObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JsonObject <span class="title">searchInitEventHistogram</span><span class="params">(String param)</span> </span>&#123;</span><br><span class="line">        JsonObject returnData = <span class="keyword">new</span> JsonParser().parse(param).getAsJsonObject();</span><br><span class="line">        Search search = <span class="keyword">new</span> Search.Builder(returnData.toString())</span><br><span class="line">                    .addIndex(<span class="string">"pi"</span>)</span><br><span class="line">                    .addType(<span class="string">"event"</span>)</span><br><span class="line">                    .setParameter(Parameters.SCROLL, <span class="string">"1m"</span>)</span><br><span class="line">                    .build();</span><br><span class="line"></span><br><span class="line">        JestResult result = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result = esConfig.getClient().execute(search);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result.getJsonObject();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用JestClient操作ElasticSearch，具体代码如下&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://linbei.top/categories/Java/"/>
    
    
      <category term="Java" scheme="https://linbei.top/tags/Java/"/>
    
      <category term="ElasticSearch" scheme="https://linbei.top/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>Hexo添加公式</title>
    <link href="https://linbei.top/Hexoyilia%E4%B8%BB%E9%A2%98%E4%B8%8B%E6%B7%BB%E5%8A%A0%E5%85%AC%E5%BC%8F/"/>
    <id>https://linbei.top/Hexoyilia%E4%B8%BB%E9%A2%98%E4%B8%8B%E6%B7%BB%E5%8A%A0%E5%85%AC%E5%BC%8F/</id>
    <published>2020-05-29T13:51:57.000Z</published>
    <updated>2020-05-29T12:44:25.376Z</updated>
    
    <content type="html"><![CDATA[<p>使用LaTex添加公式到Hexo博客里</p><a id="more"></a><h2 id="安装Kramed"><a href="#安装Kramed" class="headerlink" title="安装Kramed"></a>安装Kramed</h2><p>hexo 默认的渲染引擎是 marked，但是 marked 不支持 mathjax。，所以需要更换Hexo的markdown渲染引擎为hexo-renderer-kramed引擎，后者支持mathjax公式输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall hexo-renderer-marked --save</span><br><span class="line">npm install hexo-renderer-kramed --save</span><br></pre></td></tr></table></figure><img src="/Hexoyilia%E4%B8%BB%E9%A2%98%E4%B8%8B%E6%B7%BB%E5%8A%A0%E5%85%AC%E5%BC%8F/2020-05-29-20-23-55.png" class><h2 id="第二步：更改文件配置"><a href="#第二步：更改文件配置" class="headerlink" title="第二步：更改文件配置"></a>第二步：更改文件配置</h2><p>打开/node_modules/hexo-renderer-kramed/lib/renderer.js，更改：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Change inline math rule</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">formatText</span>(<span class="params">text</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Fit kramed's rule: $$ + \1 + $$</span></span><br><span class="line">    <span class="keyword">return</span> text.replace(<span class="regexp">/`\$(.*?)\$`/g</span>, <span class="string">'$$$$$1$$$$'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">为，直接返回text</span><br><span class="line"></span><br><span class="line"><span class="comment">// Change inline math rule</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">formatText</span>(<span class="params">text</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> text;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/Hexoyilia%E4%B8%BB%E9%A2%98%E4%B8%8B%E6%B7%BB%E5%8A%A0%E5%85%AC%E5%BC%8F/2020-05-29-20-26-59.png" class><h2 id="第三步-停止使用-hexo-math，并安装mathjax包"><a href="#第三步-停止使用-hexo-math，并安装mathjax包" class="headerlink" title="第三步: 停止使用 hexo-math，并安装mathjax包"></a>第三步: 停止使用 hexo-math，并安装mathjax包</h2><p>卸载hexo-math</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall hexo-math --save</span><br></pre></td></tr></table></figure><p>安装 hexo-renderer-mathjax 包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-mathjax --save</span><br></pre></td></tr></table></figure><img src="/Hexoyilia%E4%B8%BB%E9%A2%98%E4%B8%8B%E6%B7%BB%E5%8A%A0%E5%85%AC%E5%BC%8F/2020-05-29-20-27-57.png" class><img src="/Hexoyilia%E4%B8%BB%E9%A2%98%E4%B8%8B%E6%B7%BB%E5%8A%A0%E5%85%AC%E5%BC%8F/2020-05-29-20-28-03.png" class><h2 id="第四步-更新-Mathjax-的-配置文件"><a href="#第四步-更新-Mathjax-的-配置文件" class="headerlink" title="第四步: 更新 Mathjax 的 配置文件"></a>第四步: 更新 Mathjax 的 配置文件</h2><p>打开/node_modules/hexo-renderer-mathjax/mathjax.html<br>注释掉script代码，并把以下代码复制到对应位置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-MML-AM_CHTML"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><img src="/Hexoyilia%E4%B8%BB%E9%A2%98%E4%B8%8B%E6%B7%BB%E5%8A%A0%E5%85%AC%E5%BC%8F/2020-05-29-20-31-08.png" class><h2 id="第五步-更改默认转义规则"><a href="#第五步-更改默认转义规则" class="headerlink" title="第五步: 更改默认转义规则"></a>第五步: 更改默认转义规则</h2><p>因为LaTeX与markdown语法有语义冲突，所以 hexo 默认的转义规则会将一些字符进行转义，所以我们需要对默认的规则进行修改.<br>打开/node_modules\kramed\lib\rules\inline.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">escape</span>: <span class="regexp">/^\\([\\`*&#123;&#125;\[\]()#$+\-.!_&gt;])/</span>,</span><br></pre></td></tr></table></figure><p>更改为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">escape</span>: <span class="regexp">/^\\([`*\[\]()# +\-.!_&gt;])/</span>,</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">em: <span class="regexp">/^\b_((?:__|[\s\S])+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/</span>,</span><br></pre></td></tr></table></figure><p>更改为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">em: <span class="regexp">/^\*((?:\*\*|[\s\S])+?)\*(?!\*)/</span>,</span><br></pre></td></tr></table></figure><img src="/Hexoyilia%E4%B8%BB%E9%A2%98%E4%B8%8B%E6%B7%BB%E5%8A%A0%E5%85%AC%E5%BC%8F/2020-05-29-20-32-27.png" class><h2 id="第六步-开启mathjax"><a href="#第六步-开启mathjax" class="headerlink" title="第六步: 开启mathjax"></a>第六步: 开启mathjax</h2><p>打开/themes/yilia主题目录下的config.yml文件<br>因为我用的yilia主题，所以路径是/themes/yilia</p><p>我们需要在config.yml文件 中开启 Mathjax， 找到 mathjax 字段添加如下代码：(不同的主题配置方法略微有区别)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mathjax: true</span><br></pre></td></tr></table></figure><img src="/Hexoyilia%E4%B8%BB%E9%A2%98%E4%B8%8B%E6%B7%BB%E5%8A%A0%E5%85%AC%E5%BC%8F/2020-05-29-20-33-09.png" class><p>需要注意的是：，无论是配置文件还是博客文件，配置项跟配置参数均有有一个空格，否则会配置失败</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mathjax: true（mathjax:空格true）</span><br><span class="line">而不是</span><br><span class="line">mathjax:true（mathjax:true）</span><br></pre></td></tr></table></figure><p>写博客文件时，要开启 Mathjax选项，， 添加以下内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mathjax: true</span><br></pre></td></tr></table></figure><p>例如</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">title: Cplex求解器</span><br><span class="line">categories:</span><br><span class="line">  - 算法</span><br><span class="line">tags:</span><br><span class="line">  - Matlab</span><br><span class="line">  - 算法</span><br><span class="line">date: 2020-05-28 21:51:57</span><br><span class="line">mathjax: true</span><br></pre></td></tr></table></figure><p>如下图所示</p><img src="/Hexoyilia%E4%B8%BB%E9%A2%98%E4%B8%8B%E6%B7%BB%E5%8A%A0%E5%85%AC%E5%BC%8F/2020-05-29-20-35-37.png" class><p>通过以上步骤，我们就可以在 hexo 中使用 Mathjax 来书写数学公式</p><p>效果展示：<br><img src="/Hexoyilia%E4%B8%BB%E9%A2%98%E4%B8%8B%E6%B7%BB%E5%8A%A0%E5%85%AC%E5%BC%8F/2020-05-29-20-36-30.png" class></p><img src="/Hexoyilia%E4%B8%BB%E9%A2%98%E4%B8%8B%E6%B7%BB%E5%8A%A0%E5%85%AC%E5%BC%8F/2020-05-29-20-37-00.png" class>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用LaTex添加公式到Hexo博客里&lt;/p&gt;
    
    </summary>
    
    
      <category term="环境搭建" scheme="https://linbei.top/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="Hexo" scheme="https://linbei.top/tags/Hexo/"/>
    
      <category term="公式" scheme="https://linbei.top/tags/%E5%85%AC%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Cplex求解器</title>
    <link href="https://linbei.top/Cplex%E6%B1%82%E8%A7%A3%E5%99%A8/"/>
    <id>https://linbei.top/Cplex%E6%B1%82%E8%A7%A3%E5%99%A8/</id>
    <published>2020-05-28T13:51:57.000Z</published>
    <updated>2020-05-29T12:44:46.702Z</updated>
    
    <content type="html"><![CDATA[<p>在求解整数线性规划问题是，Matlab下yalmip+cplex的组合会让如虎添翼。本人是在研究早晚班排班过程中才发现的这一工具。其能够求解各种整数规划模型。在matlab中使用cplex求解时，还可以使用yalmip工具进行建模，比直接使用cplex建模方便很多。<br><a id="more"></a><br>在正式开始使用前需要先安装好环境。第一步是下载相关的工具包。<a href="https://pan.baidu.com/s/1L8Px1repdeWbs_Sx-WhXMw" target="_blank" rel="noopener">百度网盘链接</a> 提取码：garx<br><img src="/Cplex%E6%B1%82%E8%A7%A3%E5%99%A8/2020-05-28-22-01-12.png" class></p><h2 id="yalmip安装"><a href="#yalmip安装" class="headerlink" title="yalmip安装"></a>yalmip安装</h2><p>yalmip工具箱的安装比较简单，从链接下载后，将YALMIP-master文件夹拷贝到matlab&gt;toolbox,如下图<br><img src="/Cplex%E6%B1%82%E8%A7%A3%E5%99%A8/2020-05-28-22-02-06.png" class><br>是放在matlab安装目录的\toolbox文件夹下。</p><p>然后打开matlab，点击设置路径<br><img src="/Cplex%E6%B1%82%E8%A7%A3%E5%99%A8/2020-05-28-22-03-18.png" class><br>点击添加并包含子文件夹，添加之后点击保存、关闭<br><img src="/Cplex%E6%B1%82%E8%A7%A3%E5%99%A8/2020-05-28-22-05-15.png" class><br>这样下来，路径就设置好了，yalmip作为工具箱已经被添加到matlab中去了，接下来在命令行窗口输入中检查一下，输出yalmiptest,然后回车！你会发现你的yalmip已经可以作为matlab的工具箱而使用了，但是cplex没有被yalmip识别到，如下图所示，所以需要求解器cplex的安装<br><img src="/Cplex%E6%B1%82%E8%A7%A3%E5%99%A8/2020-05-28-22-05-35.png" class></p><h2 id="Cplex安装"><a href="#Cplex安装" class="headerlink" title="Cplex安装"></a>Cplex安装</h2><p>Cplex的安装较yalmip复杂一些，不过复杂之处主要在版本对不对，能不能正常安装，是不是能够和yalmip匹配的上，以及最后求解的时候受不受到变量、约束个数的限制。</p><p>Cplex官网可以申请试用版，如果是在校学生或者老师，可以使用学校的教育邮箱去申请，理论上应该可以申请到。博主使用学校邮箱账号申请，奈何学校邮箱的问题迟迟收不到验证邮件消息，到第二天才收到了消息，所以并没有采用此种方法。而实直接在网上找了一个下载。原本想直接用一个简化版的Cplex的文件，但是添加到matlab路径后发现运行代码时找不到，照着网上的一些文章说是版本的问题，yalmip没有把对应的cplex版本包含进来，但是我查看了一下其实yalmip已经包含了很多版本的cplex。无奈之下我只好去下载CplexStudio.<br>按照博主链接，便可以下载到12.8版本的Cplex，解压后运行，一直点击下一步，改变安装路径和生成文件的路径，期间需要安装VS studio的环境，由于电脑早已有VS环境，可以忽略一些内容安装，总之，一般情况下，点击安装程序，一路点击下一步即可安装成功！<br><img src="/Cplex%E6%B1%82%E8%A7%A3%E5%99%A8/2020-05-28-22-11-47.png" class></p><p>安装成功后，需要再次打开matlab，继续设置添加路径，这里需要注意的是，你需要将cpclex文件下matlab的文件夹添加进去。<br>接着进行测试，在命令行窗口输入yalmiptest，检查Cplex的安装情况，你会发现，yalmip检测到了求解器Cplex<br><img src="/Cplex%E6%B1%82%E8%A7%A3%E5%99%A8/2020-05-28-22-12-34.png" class><br><img src="/Cplex%E6%B1%82%E8%A7%A3%E5%99%A8/2020-05-28-22-12-50.png" class></p><p>到这里安装部分就都成功了，可以开始漫长的科研道路了。</p><h2 id="一些示例"><a href="#一些示例" class="headerlink" title="一些示例"></a>一些示例</h2><h3 id="yalmip基本格式"><a href="#yalmip基本格式" class="headerlink" title="yalmip基本格式"></a>yalmip基本格式</h3><p>1.创建决策变量<br>2.目标函数Z<br>3.约束条件设置C<br>4.参数设置</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ops = sdpsetting(<span class="string">'solver'</span>,<span class="string">'Cplex'</span>,<span class="string">'verbose'</span>,<span class="number">0</span>); verbose:显示冗余度 <span class="number">0</span>为只显示结果</span><br></pre></td></tr></table></figure><p>5.求解</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result = solvesdp(C,z,ops)</span><br></pre></td></tr></table></figure><h3 id="示例一"><a href="#示例一" class="headerlink" title="示例一"></a>示例一</h3><p>一个可视化公式编辑器的神器，它可以让我们<a href="http://www.wiris.com/editor/demo/en/developers#mathml-latex" target="_blank" rel="noopener">可视化地编辑公式</a>，然后自动得到它的LaTeX文本：</p><script type="math/tex; mode=display">min\;Z=12x_1+5x_2+8x_3\\s.t.\left\{\begin{array}{l}2x_1+3x_2+x_3\geq30\\4x_1+x_2+x_3\geq15\\x_1,x_2,x_3\geq0\end{array}\right.</script><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">clear;clc;close all;</span><br><span class="line"></span><br><span class="line">c = [<span class="number">12</span> <span class="number">5</span> <span class="number">8</span>];</span><br><span class="line">A = [<span class="number">2</span> <span class="number">3</span> <span class="number">1</span>; <span class="number">4</span> <span class="number">1</span> <span class="number">5</span>];</span><br><span class="line">b = [<span class="number">30</span>; <span class="number">15</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">%决策变量</span></span><br><span class="line">x = sdpvar(<span class="number">3</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">%目标函数</span></span><br><span class="line">z = c*x;</span><br><span class="line"></span><br><span class="line"><span class="comment">%添加约束</span></span><br><span class="line"><span class="comment">%C = [];</span></span><br><span class="line"><span class="comment">%C = [C; A*x &gt;= b];</span></span><br><span class="line"><span class="comment">%C = [C;x&gt;=0];</span></span><br><span class="line">C=[A*x &gt;= b,x&gt;=<span class="number">0</span>];</span><br><span class="line">ops=sdpsettings(<span class="string">'verbose'</span>,<span class="number">0</span>);</span><br><span class="line"><span class="comment">%求解</span></span><br><span class="line">result = optimize(C,z,ops);</span><br><span class="line"><span class="keyword">if</span> result.problem == <span class="number">0</span>    <span class="comment">%求解成功</span></span><br><span class="line">    x_star=double(x)</span><br><span class="line">    z_star=double(z)</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">disp</span>(<span class="string">'求解过程中出错'</span>);</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">警告: 文件: C:\Program Files\IBM\ILOG\CPLEX_Studio_Community128\cplex\matlab\x64_win64\@Cplex\Cplex.p 行: <span class="number">965</span> 列: <span class="number">0</span></span><br><span class="line">在嵌套函数中定义 <span class="string">"changedParam"</span> 会将其与父函数共享。在以后的版本中，要在父函数和嵌套函数之间共享 <span class="string">"changedParam"</span>，请在父函数中显式定义它。</span><br><span class="line">&gt; In cplexoptimset</span><br><span class="line">  In sdpsettings&gt;setup_cplex_options (line <span class="number">617</span>)</span><br><span class="line">  In sdpsettings (line <span class="number">145</span>)</span><br><span class="line"></span><br><span class="line">x_star =</span><br><span class="line"></span><br><span class="line">         <span class="number">0</span></span><br><span class="line">    <span class="number">9.6429</span></span><br><span class="line">    <span class="number">1.0714</span></span><br><span class="line"></span><br><span class="line">z_star =</span><br><span class="line"></span><br><span class="line">   <span class="number">56.7857</span></span><br></pre></td></tr></table></figure><h3 id="示例二-运输问题"><a href="#示例二-运输问题" class="headerlink" title="示例二 运输问题"></a>示例二 运输问题</h3><script type="math/tex; mode=display">min\;Z=\sum_{i=1}^m\sum_{j=1}^nc_{ij}x_{ij}\\s.t.\left\{\begin{array}{l}\sum_{j=1}^nx_{ij}\leq a_i\;\;\;\;i=1,2,\cdots,m\\\sum_{i=1}^mx_{ij}\geq b_j\;\;\;j=1,2,\cdots,n\\x_{ij}\geq0\;\;\;\;\;\;\;\;\;\;i=1,2,\cdots,m;\;j=1,2,\cdots,n\end{array}\right.</script><img src="/Cplex%E6%B1%82%E8%A7%A3%E5%99%A8/2020-05-29-17-15-04.png" class><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">clear;clc;close all;</span><br><span class="line"></span><br><span class="line">c = [<span class="number">1</span> <span class="number">3</span> <span class="number">5</span> <span class="number">7</span> <span class="number">13</span>; <span class="number">6</span> <span class="number">4</span> <span class="number">3</span> <span class="number">14</span> <span class="number">8</span>; <span class="number">13</span> <span class="number">3</span> <span class="number">1</span> <span class="number">7</span> <span class="number">4</span>;</span><br><span class="line">    <span class="number">1</span> <span class="number">10</span> <span class="number">12</span> <span class="number">7</span> <span class="number">11</span>];</span><br><span class="line">a = [<span class="number">40</span> <span class="number">50</span> <span class="number">30</span> <span class="number">80</span>];</span><br><span class="line">b = [<span class="number">10</span> <span class="number">20</span> <span class="number">15</span> <span class="number">18</span> <span class="number">25</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">%决策变量</span></span><br><span class="line">x = intvar(<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">%目标函数</span></span><br><span class="line">z = sum(sum(c.*x));</span><br><span class="line"></span><br><span class="line"><span class="comment">%添加约束</span></span><br><span class="line">C = [];</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:<span class="number">4</span></span><br><span class="line">    C = [C; sum(x(<span class="built_in">i</span>,:))&lt;=a(<span class="built_in">i</span>)];</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">j</span>=<span class="number">1</span>:<span class="number">5</span></span><br><span class="line">    C = [C;sum(x(:,<span class="built_in">j</span>))&gt;=b(<span class="built_in">j</span>)];</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">C = [C;x&gt;=<span class="number">0</span>];</span><br><span class="line">ops=sdpsettings(<span class="string">'verbose'</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">result = optimize(C,z,ops);</span><br><span class="line"><span class="keyword">if</span> result.problem == <span class="number">0</span>    <span class="comment">%求解成功</span></span><br><span class="line">    x_star = double(x)</span><br><span class="line">    z_star = double(z)</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">disp</span>(<span class="string">'求解过程中出错'</span>);</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">x_star =</span><br><span class="line"></span><br><span class="line">     <span class="number">2</span>    <span class="number">20</span>     <span class="number">0</span>    <span class="number">18</span>     <span class="number">0</span></span><br><span class="line">     <span class="number">0</span>     <span class="number">0</span>    <span class="number">10</span>     <span class="number">0</span>     <span class="number">0</span></span><br><span class="line">     <span class="number">0</span>     <span class="number">0</span>     <span class="number">5</span>     <span class="number">0</span>    <span class="number">25</span></span><br><span class="line">     <span class="number">8</span>     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span></span><br><span class="line"></span><br><span class="line">z_star =</span><br><span class="line"></span><br><span class="line">   <span class="number">331</span></span><br></pre></td></tr></table></figure><h3 id="示例三-背包问题"><a href="#示例三-背包问题" class="headerlink" title="示例三 背包问题"></a>示例三 背包问题</h3><script type="math/tex; mode=display">min\;Z=\sum_{i=1}^nc_ix_i\\s.t.\left\{\begin{array}{l}{\textstyle\sum_{i=1}^n}x_iw_i\leq W\\\textstyle\sum_{i=1}^nx_iv_i\leq V\\0\leq x_i\leq n_i\;\;\;\;\;\;\;\;\mathrm{且为整数}\end{array}\right.</script><img src="/Cplex%E6%B1%82%E8%A7%A3%E5%99%A8/2020-05-29-17-19-30.png" class><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">clear;clc;close all;</span><br><span class="line"></span><br><span class="line">c = [<span class="number">8</span> <span class="number">1</span> <span class="number">11</span> <span class="number">12</span> <span class="number">9</span> <span class="number">10</span> <span class="number">9</span> <span class="number">5</span> <span class="number">8</span> <span class="number">3</span>]; <span class="comment">%效用</span></span><br><span class="line">w = [<span class="number">17</span> <span class="number">19</span> <span class="number">3</span> <span class="number">19</span> <span class="number">13</span> <span class="number">2</span> <span class="number">6</span> <span class="number">11</span> <span class="number">20</span> <span class="number">20</span>]; <span class="comment">%重量</span></span><br><span class="line">v = [<span class="number">2</span> <span class="number">10</span> <span class="number">10</span> <span class="number">5</span> <span class="number">9</span> <span class="number">2</span> <span class="number">5</span> <span class="number">10</span> <span class="number">8</span> <span class="number">10</span>];  <span class="comment">%体积</span></span><br><span class="line">n = [<span class="number">5</span> <span class="number">2</span> <span class="number">4</span> <span class="number">3</span> <span class="number">5</span> <span class="number">4</span> <span class="number">3</span> <span class="number">1</span> <span class="number">5</span> <span class="number">3</span>];   <span class="comment">%数量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%决策变量</span></span><br><span class="line">x = intvar(<span class="number">10</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">%目标函数</span></span><br><span class="line">z = -(c*x);</span><br><span class="line"></span><br><span class="line"><span class="comment">%添加约束</span></span><br><span class="line">C = [];</span><br><span class="line">C = [C,w*x&lt;=<span class="number">80</span>];</span><br><span class="line">C = [C,v*x&lt;=<span class="number">60</span>];</span><br><span class="line">C = [C,<span class="number">0</span>&lt;=x&lt;=n];</span><br><span class="line"></span><br><span class="line">ops=sdpsettings(<span class="string">'verbose'</span>,<span class="number">0</span>);</span><br><span class="line"><span class="comment">%求解</span></span><br><span class="line">result = optimize(C,z,ops);</span><br><span class="line"><span class="keyword">if</span> result.problem == <span class="number">0</span>    <span class="comment">%求解成功</span></span><br><span class="line">    x_star = double(x)</span><br><span class="line">    z_star = double(-z)</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">disp</span>(<span class="string">'求解过程中出错'</span>);</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">x_star =</span><br><span class="line"></span><br><span class="line">     <span class="number">1</span></span><br><span class="line">     <span class="number">0</span></span><br><span class="line">     <span class="number">3</span></span><br><span class="line">     <span class="number">1</span></span><br><span class="line">     <span class="number">0</span></span><br><span class="line">     <span class="number">4</span></span><br><span class="line">     <span class="number">3</span></span><br><span class="line">     <span class="number">0</span></span><br><span class="line">     <span class="number">0</span></span><br><span class="line">     <span class="number">0</span></span><br><span class="line"></span><br><span class="line">z_star =</span><br><span class="line"></span><br><span class="line">   <span class="number">120</span></span><br></pre></td></tr></table></figure><h3 id="示例四-最短路径问题"><a href="#示例四-最短路径问题" class="headerlink" title="示例四 最短路径问题"></a>示例四 最短路径问题</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">% 利用yamlip求解最短路问题</span></span><br><span class="line">clear;clc;close all;</span><br><span class="line">D = load(<span class="string">'1.txt'</span>);</span><br><span class="line">n = <span class="built_in">size</span>(D,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">% 决策变量</span></span><br><span class="line">x = binvar(n,n,<span class="string">'full'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">% 目标</span></span><br><span class="line">z=sum(sum(D.*x));</span><br><span class="line"><span class="comment">% 约束添加</span></span><br><span class="line">C=[];</span><br><span class="line">C = [C,(sum(x(<span class="number">1</span>,:))-sum(x(:,<span class="number">1</span>))==<span class="number">1</span>)];</span><br><span class="line">C = [C,(sum(x(n,:))-sum(x(:,n))==<span class="number">-1</span>)];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">2</span>:(n<span class="number">-1</span>)</span><br><span class="line">    C = [C,(sum(x(<span class="built_in">i</span>,:))-sum(x(:,<span class="built_in">i</span>))==<span class="number">0</span>)];</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">ops=sdpsettings(<span class="string">'verbose'</span>,<span class="number">0</span>);</span><br><span class="line"><span class="comment">% 求解</span></span><br><span class="line">result=solvesdp(C,z,ops);</span><br><span class="line"><span class="keyword">if</span> result.problem == <span class="number">0</span></span><br><span class="line">    x_star = value(x)</span><br><span class="line">    z_star = value(z)</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">disp</span>(<span class="string">'求解过程中出错'</span>);</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">x_star =</span><br><span class="line"></span><br><span class="line">   NaN     <span class="number">1</span>     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span></span><br><span class="line">     <span class="number">0</span>   NaN     <span class="number">0</span>     <span class="number">0</span>     <span class="number">1</span>     <span class="number">0</span>     <span class="number">0</span></span><br><span class="line">     <span class="number">0</span>     <span class="number">0</span>   NaN     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span></span><br><span class="line">     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span>   NaN     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span></span><br><span class="line">     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span>   NaN     <span class="number">0</span>     <span class="number">1</span></span><br><span class="line">     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span>   NaN     <span class="number">0</span></span><br><span class="line">     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span>   NaN</span><br><span class="line"></span><br><span class="line">z_star =</span><br><span class="line"></span><br><span class="line">     <span class="number">5</span></span><br></pre></td></tr></table></figure><h3 id="示例五-指派问题"><a href="#示例五-指派问题" class="headerlink" title="示例五 指派问题"></a>示例五 指派问题</h3><script type="math/tex; mode=display">min\;Z=\sum_{i=1}^m\sum_{j=1}^nc_{ij}x_{ij}\\s.t.\left\{\begin{array}{l}{\textstyle\sum_{i=1}^n}x_{ij}=1\;\;\;i=1,2,\cdots,n\\\textstyle\sum_{j=1}^nx_{ij}=1\;\;\;i=1,2,\cdots,n\\x_{ij}\left\{0,1\right\}\;\;\;\;\;\;\;\;\;\;i=1,2,\cdots,n\end{array}\right.</script><img src="/Cplex%E6%B1%82%E8%A7%A3%E5%99%A8/2020-05-29-19-28-02.png" class><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">clear;clc;close all;</span><br><span class="line">c =load(<span class="string">'zhipai.txt'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">%决策变量</span></span><br><span class="line">x = binvar(<span class="number">5</span>,<span class="number">5</span>,<span class="string">'full'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">%目标函数</span></span><br><span class="line">z = sum(sum(c.*x));</span><br><span class="line"></span><br><span class="line"><span class="comment">%添加约束</span></span><br><span class="line">C = [];</span><br><span class="line"></span><br><span class="line">C = [C;sum(x,<span class="number">1</span>)==<span class="number">1</span>];   <span class="comment">%  1 横向相加</span></span><br><span class="line">C = [C;sum(x,<span class="number">2</span>)==<span class="number">1</span>];   <span class="comment">%  2 纵向相加</span></span><br><span class="line"></span><br><span class="line">ops=sdpsettings(<span class="string">'verbose'</span>,<span class="number">0</span>);</span><br><span class="line"><span class="comment">%求解</span></span><br><span class="line">result = optimize(C,z,ops);</span><br><span class="line"><span class="keyword">if</span> result.problem == <span class="number">0</span>    <span class="comment">%求解成功</span></span><br><span class="line">    x_star = double(x)</span><br><span class="line">    z_star = double(z)</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">disp</span>(<span class="string">'求解过程中出错'</span>);</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">c =</span><br><span class="line"></span><br><span class="line">    <span class="number">12</span>     <span class="number">7</span>     <span class="number">9</span>     <span class="number">7</span>     <span class="number">9</span></span><br><span class="line">     <span class="number">8</span>     <span class="number">9</span>     <span class="number">6</span>     <span class="number">6</span>     <span class="number">6</span></span><br><span class="line">     <span class="number">7</span>    <span class="number">17</span>    <span class="number">12</span>    <span class="number">14</span>     <span class="number">9</span></span><br><span class="line">    <span class="number">15</span>    <span class="number">14</span>     <span class="number">6</span>     <span class="number">6</span>    <span class="number">10</span></span><br><span class="line">     <span class="number">4</span>    <span class="number">10</span>     <span class="number">7</span>    <span class="number">10</span>     <span class="number">9</span></span><br><span class="line">x_star =</span><br><span class="line">  </span><br><span class="line">     <span class="number">0</span>     <span class="number">1</span>     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span></span><br><span class="line">     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span>     <span class="number">1</span>     <span class="number">0</span></span><br><span class="line">     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span>     <span class="number">1</span></span><br><span class="line">     <span class="number">0</span>     <span class="number">0</span>     <span class="number">1</span>     <span class="number">0</span>     <span class="number">0</span></span><br><span class="line">     <span class="number">1</span>     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    z_star =</span><br><span class="line"></span><br><span class="line">    <span class="number">32</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在求解整数线性规划问题是，Matlab下yalmip+cplex的组合会让如虎添翼。本人是在研究早晚班排班过程中才发现的这一工具。其能够求解各种整数规划模型。在matlab中使用cplex求解时，还可以使用yalmip工具进行建模，比直接使用cplex建模方便很多。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://linbei.top/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="Matlab" scheme="https://linbei.top/tags/Matlab/"/>
    
      <category term="算法" scheme="https://linbei.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>80端口解决方法</title>
    <link href="https://linbei.top/%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>https://linbei.top/%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</id>
    <published>2020-05-20T04:12:57.000Z</published>
    <updated>2020-05-23T01:20:25.689Z</updated>
    
    <content type="html"><![CDATA[<p>遇到端口被占用问题是有一次服务器重启了，然后nginx没有设为开机自动启动，导致有些在线程序崩掉后才发现的。当尝试再次启动nginx时，发现nginx死活启动不起来。所以就怀疑是有其他进程占用了80端口。所以带着问题尝试去解决。本次实验是在win系统下进行的。<br>首先使用netstat -ano 命令查看是哪个进程正在占用80端口<br><a id="more"></a><br><img src="/%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/2020-05-20-20-45-01.png" class><br>PID为4的进程正在占用80端口。尝试用taskkill指令杀死此进程，确发现此为system进程，无法直接结束进程。<br>使用netsh命令查看http端口使用状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsh http show servicetstate</span><br></pre></td></tr></table></figure><img src="/%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/2020-05-20-20-47-30.png" class><img src="/%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/2020-05-20-20-48-48.png" class><p>然后在任务管理器中查找该线程id,并将其关闭</p><p>然后就可以重新启动nginx了 启动命令为</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx start</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;遇到端口被占用问题是有一次服务器重启了，然后nginx没有设为开机自动启动，导致有些在线程序崩掉后才发现的。当尝试再次启动nginx时，发现nginx死活启动不起来。所以就怀疑是有其他进程占用了80端口。所以带着问题尝试去解决。本次实验是在win系统下进行的。&lt;br&gt;首先使用netstat -ano 命令查看是哪个进程正在占用80端口&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="运维" scheme="https://linbei.top/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="部署" scheme="https://linbei.top/tags/%E9%83%A8%E7%BD%B2/"/>
    
      <category term="win" scheme="https://linbei.top/tags/win/"/>
    
  </entry>
  
  <entry>
    <title>Redis一主二从三哨兵</title>
    <link href="https://linbei.top/Redis%E4%B8%80%E4%B8%BB%E4%BA%8C%E4%BB%8E%E4%B8%89%E5%93%A8%E5%85%B5/"/>
    <id>https://linbei.top/Redis%E4%B8%80%E4%B8%BB%E4%BA%8C%E4%BB%8E%E4%B8%89%E5%93%A8%E5%85%B5/</id>
    <published>2020-05-16T10:12:57.000Z</published>
    <updated>2020-05-23T01:20:25.595Z</updated>
    
    <content type="html"><![CDATA[<p>本文简单讲述主从建立和哨兵的配置。本机测试redis为Redis-x64-3.2.100<a href="https://github.com/MicrosoftArchive/redis/releases" target="_blank" rel="noopener">Windows下载地址</a>，使用二台服务器作为测试。</p><a id="more"></a><h2 id="下载解压"><a href="#下载解压" class="headerlink" title="下载解压"></a>下载解压</h2><p>下载完成后进行解压，然后复制两份作为从成员，构成一主二从。在主服务器上使用一份，从服务器上使用二份。<br><img src="/Redis%E4%B8%80%E4%B8%BB%E4%BA%8C%E4%BB%8E%E4%B8%89%E5%93%A8%E5%85%B5/2020-05-16-16-21-15.png" class><br><img src="/Redis%E4%B8%80%E4%B8%BB%E4%BA%8C%E4%BB%8E%E4%B8%89%E5%93%A8%E5%85%B5/2020-05-16-15-44-27.png" class></p><h2 id="主从配置"><a href="#主从配置" class="headerlink" title="主从配置"></a>主从配置</h2><h3 id="主redis配置"><a href="#主redis配置" class="headerlink" title="主redis配置"></a>主redis配置</h3><p>编辑文件夹下redis.windows.conf文件，设置bind和port，因为要用到远程连接，所以绑定的ip 127.0.0.1要注释掉，否则远程是无法访问的。端口就使用默认的6379，注意要把阿里云后台的端口限制防火墙打开。<br><img src="/Redis%E4%B8%80%E4%B8%BB%E4%BA%8C%E4%BB%8E%E4%B8%89%E5%93%A8%E5%85%B5/2020-05-16-15-48-27.png" class></p><h3 id="从redis配置"><a href="#从redis配置" class="headerlink" title="从redis配置"></a>从redis配置</h3><p>从redis配置：同样编辑文件夹下redis.windows.conf文件，设置bind和port。bind127.0.0.1同样注释掉，port分别是6380和6381。做完以上操作，如何标志这两redis是从关系呢？所以，还需要在配置文件中加上一行配置。注意：两个从redis都是相同的配置语句，因为都从属于同一个主redis。<br><img src="/Redis%E4%B8%80%E4%B8%BB%E4%BA%8C%E4%BB%8E%E4%B8%89%E5%93%A8%E5%85%B5/2020-05-16-15-51-05.png" class><br>由于我开启了密码登录验证，所以masterauth要添加上。</p><h2 id="主从启动"><a href="#主从启动" class="headerlink" title="主从启动"></a>主从启动</h2><p>在文件加中使用cmd进入命令窗口，输入redis-server redis.windows.conf即可启动（redis-server.exe和redis.windows.conf文件在相同文件夹下），依次启动主和从redis。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-server redis.windows.conf</span><br></pre></td></tr></table></figure><img src="/Redis%E4%B8%80%E4%B8%BB%E4%BA%8C%E4%BB%8E%E4%B8%89%E5%93%A8%E5%85%B5/2020-05-16-15-53-11.png" class><img src="/Redis%E4%B8%80%E4%B8%BB%E4%BA%8C%E4%BB%8E%E4%B8%89%E5%93%A8%E5%85%B5/2020-05-16-15-56-08.png" class><p>通过命令查看各个redis的状态<br><img src="/Redis%E4%B8%80%E4%B8%BB%E4%BA%8C%E4%BB%8E%E4%B8%89%E5%93%A8%E5%85%B5/2020-05-16-16-00-18.png" class><br>slave 6380<br><img src="/Redis%E4%B8%80%E4%B8%BB%E4%BA%8C%E4%BB%8E%E4%B8%89%E5%93%A8%E5%85%B5/2020-05-16-16-01-09.png" class><br>slave 6381<br><img src="/Redis%E4%B8%80%E4%B8%BB%E4%BA%8C%E4%BB%8E%E4%B8%89%E5%93%A8%E5%85%B5/2020-05-16-16-01-39.png" class><br>当搭建好后主服务器是可读可写的，而从服务器是只读的。当主服务器宕机后，整个系统就瘫痪了，不能往从服务器写入数据，不能自动的把从服务器上升为主服务器。此时可通过哨兵模式来实现当主服务器宕机后，从服务器自动上升为主服务器。</p><h2 id="哨兵模式配置"><a href="#哨兵模式配置" class="headerlink" title="哨兵模式配置"></a>哨兵模式配置</h2><p>新建哨兵配置文件，分别命名为</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sentinel.conf</span><br><span class="line">sentinel2.conf</span><br><span class="line">sentinel3.conf</span><br></pre></td></tr></table></figure><p>哨兵配置文件内容<br>sentinel.conf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">port 27000</span><br><span class="line"><span class="meta">#</span><span class="bash">master</span></span><br><span class="line">sentinel monitor master 39.100.107.169 6379 1</span><br><span class="line">sentinel down-after-milliseconds master 5000</span><br><span class="line">sentinel auth-pass master 123</span><br><span class="line">sentinel config-epoch master 1</span><br><span class="line">sentinel leader-epoch master 1</span><br></pre></td></tr></table></figure><p>sentinel2.conf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">port 27002</span><br><span class="line"><span class="meta">#</span><span class="bash">slave 1</span></span><br><span class="line">sentinel monitor master 39.100.107.169 6379 1</span><br><span class="line">sentinel down-after-milliseconds master 5000</span><br><span class="line">sentinel auth-pass master 123</span><br><span class="line">sentinel config-epoch master 1</span><br><span class="line">sentinel leader-epoch master 1</span><br></pre></td></tr></table></figure><p>sentinel3.conf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">port 27001</span><br><span class="line"><span class="meta">#</span><span class="bash">slave 2</span></span><br><span class="line">sentinel monitor master 39.100.107.169 6379 1</span><br><span class="line">sentinel down-after-milliseconds master 5000</span><br><span class="line">sentinel auth-pass master 123</span><br><span class="line">sentinel config-epoch master 1</span><br><span class="line">sentinel leader-epoch master 1</span><br></pre></td></tr></table></figure><p>这里需要注意的是如果redis配置种添加了密码验证，一定要在sentinel文件里添加auth-pass这个参数，不然在从机上升为主机后，其他服务器连接不了。</p><p>哨兵配置文件说明</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. port :当前Sentinel服务运行的端口  </span><br><span class="line">2.sentinel monitor mymaster 39.100.107.169 6379 1:Sentinel去监视一个名为mymaster的主redis实例，这个主实例的IP地址为本机地址39.100.107.169，端口号为6379，而将这个主实例判断为失效至少需要1个 Sentinel进程的同意，只要同意Sentinel的数量不达标，自动failover就不会执行  </span><br><span class="line">3.sentinel down-after-milliseconds mymaster 5000:指定了Sentinel认为Redis实例已经失效所需的毫秒数。当 实例超过该时间没有返回PING，或者直接返回错误，那么Sentinel将这个实例标记为主观下线。只有一个 Sentinel进程将实例标记为主观下线并不一定会引起实例的自动故障迁移：只有在足够数量的Sentinel都将一个实例标记为主观下线之后，实例才会被标记为客观下线，这时自动故障迁移才会执行  </span><br><span class="line">4.sentinel parallel-syncs mymaster 1：指定了在执行故障转移时，最多可以有多少个从Redis实例在同步新的主实例，在从Redis实例较多的情况下这个数字越小，同步的时间越长，完成故障转移所需的时间就越长  </span><br><span class="line">5.sentinel failover-timeout mymaster 15000：如果在该时间（ms）内未能完成failover操作，则认为该failover失败</span><br></pre></td></tr></table></figure><h3 id="哨兵测试"><a href="#哨兵测试" class="headerlink" title="哨兵测试"></a>哨兵测试</h3><p>启动3个哨兵</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">redis-server.exe sentinel.conf --sentinel</span><br><span class="line">redis-server.exe sentinel2.conf --sentinel</span><br><span class="line">redis-server.exe sentinel3.conf --sentinel</span><br></pre></td></tr></table></figure><img src="/Redis%E4%B8%80%E4%B8%BB%E4%BA%8C%E4%BB%8E%E4%B8%89%E5%93%A8%E5%85%B5/2020-05-16-16-25-19.png" class><h3 id="测试主从切换"><a href="#测试主从切换" class="headerlink" title="测试主从切换"></a>测试主从切换</h3><p>主机挂了后，从机是否能成功上位变为主机</p><p>先看下当前的redis状态</p><p>分别在客户端输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">info replication</span><br></pre></td></tr></table></figure><img src="/Redis%E4%B8%80%E4%B8%BB%E4%BA%8C%E4%BB%8E%E4%B8%89%E5%93%A8%E5%85%B5/2020-05-16-16-14-53.png" class><p>当主机挂掉后，6381这个端口成了主机，这是通过哨兵的一个投票选择选出一个从机上升为主机。如果主机下次重新连接进来，那么它也不会立即成为主机，而是变为了从机。</p><h2 id="NET-Core中使用Redis集群"><a href="#NET-Core中使用Redis集群" class="headerlink" title=".NET Core中使用Redis集群"></a>.NET Core中使用Redis集群</h2><p>我们使用CSRedisCore来访问Redis，CSRedisCore是国内大牛开发的一个.net core redis 组件，源码可读性很强非常干净，几乎无任何依赖。性能相比ServiceStack.Redis和StackExchange.Redis会快10%左右，支持Redis的高级特性：订阅/发布，Pipeline，MGet/MSet，集群，分区。<br>创建一个.net core 控制台程序，然后添加nuget包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nuget Install-Package CSRedisCore</span><br></pre></td></tr></table></figure><p>Program.cs代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Threading;</span><br><span class="line"></span><br><span class="line">namespace ConsoleApp1</span><br><span class="line">&#123;</span><br><span class="line">    class Program</span><br><span class="line">    &#123;</span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            &#x2F;&#x2F;连接哨兵</span><br><span class="line">            var csredis &#x3D; new CSRedis.CSRedisClient(&quot;redis-master&quot;, new[] &#123;&quot;127.0.0.1:27000&quot; &#125;);</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F;初始化 RedisHelper</span><br><span class="line">            RedisHelper.Initialization(csredis);</span><br><span class="line"></span><br><span class="line">            while (true)</span><br><span class="line">            &#123;</span><br><span class="line">                try</span><br><span class="line">                &#123;</span><br><span class="line">                    Test();</span><br><span class="line">                &#125;</span><br><span class="line">                catch(Exception ex)</span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(ex.ToString());</span><br><span class="line">                &#125;</span><br><span class="line">                Console.ReadLine();</span><br><span class="line">            &#125;</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        static void Test()</span><br><span class="line">        &#123;</span><br><span class="line">            RedisHelper.Set(&quot;name&quot;, &quot;祝雷&quot;);&#x2F;&#x2F;设置值。默认永不过期</span><br><span class="line">            Console.WriteLine(RedisHelper.Get&lt;String&gt;(&quot;name&quot;));</span><br><span class="line"></span><br><span class="line">            RedisHelper.Set(&quot;time&quot;, DateTime.Now, 1);</span><br><span class="line">            Console.WriteLine(RedisHelper.Get&lt;DateTime&gt;(&quot;time&quot;));</span><br><span class="line">            Console.WriteLine(RedisHelper.Get&lt;DateTime&gt;(&quot;time&quot;));</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 列表</span><br><span class="line">            RedisHelper.RPush(&quot;list&quot;, &quot;第一个元素&quot;);</span><br><span class="line">            RedisHelper.RPush(&quot;list&quot;, &quot;第二个元素&quot;);</span><br><span class="line">            RedisHelper.LInsertBefore(&quot;list&quot;, &quot;第二个元素&quot;, &quot;我是新插入的第二个元素！&quot;);</span><br><span class="line">            Console.WriteLine($&quot;list的长度为&#123;RedisHelper.LLen(&quot;list&quot;)&#125;&quot;);</span><br><span class="line">            Console.WriteLine($&quot;list的第二个元素为&#123;RedisHelper.LIndex(&quot;list&quot;, 1)&#125;&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>模拟故障进行测试，启动程序后，杀死主Redis进程，.net core程序再次访问Redis会出现一次异常检查，然后能正常切换到新的master上。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文简单讲述主从建立和哨兵的配置。本机测试redis为Redis-x64-3.2.100&lt;a href=&quot;https://github.com/MicrosoftArchive/redis/releases&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Windows下载地址&lt;/a&gt;，使用二台服务器作为测试。&lt;/p&gt;
    
    </summary>
    
    
      <category term="环境搭建" scheme="https://linbei.top/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="阿里云" scheme="https://linbei.top/tags/%E9%98%BF%E9%87%8C%E4%BA%91/"/>
    
      <category term="缓存" scheme="https://linbei.top/tags/%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>Mobirise搭建网页</title>
    <link href="https://linbei.top/Mobirise%E6%90%AD%E5%BB%BA%E7%BD%91%E9%A1%B5/"/>
    <id>https://linbei.top/Mobirise%E6%90%AD%E5%BB%BA%E7%BD%91%E9%A1%B5/</id>
    <published>2020-05-12T10:12:57.000Z</published>
    <updated>2020-05-23T01:20:25.517Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http:linbei.top">本人用Mobirise制作的网站请点击这里查看</a><br><a id="more"></a><br><img src="/Mobirise%E6%90%AD%E5%BB%BA%E7%BD%91%E9%A1%B5/2020-05-12-19-22-57.png" class></p><h2 id="Mobirise"><a href="#Mobirise" class="headerlink" title="Mobirise"></a>Mobirise</h2><p>哪里有手机网站建设软件？Mobirise是一个用户界面非常友好的程序，使您可以构建桌面和移动网站，准备在Javas cript中。可以在视觉上进行创建网站的过程中，通过拖放内容块中的工作区。此外，你可以将结果轻松地部署到桌面，将其上传到FTP位置或谷歌驱动器。<br><img src="/Mobirise%E6%90%AD%E5%BB%BA%E7%BD%91%E9%A1%B5/2020-05-12-18-58-17.png" class></p><p>Mobirise软件介绍</p><p>Mobirise是一个简单易用的免费网站构建器 - 只需将网站元素拖放到您的页面，添加内容并将其样式设置为您喜欢的样式，操作简单！Mobirise还为用户提供了大量1500多个网站块，模板和主题，包含数千个灵活选项。结合不同主题的积木，创造出独特的混合，帮助你迅速进入网站建设环境！<br>Mobirise不是一个基于Web的系统，它需要<a href="https://mobirise.ws/" target="_blank" rel="noopener">下载</a>软件并通过安装来使用。</p><h2 id="Mobirise软件特色"><a href="#Mobirise软件特色" class="headerlink" title="Mobirise软件特色"></a>Mobirise软件特色</h2><h3 id="不必编码"><a href="#不必编码" class="headerlink" title="不必编码"></a>不必编码</h3><p>Mobirise是一个简单易用的免费网站构建器 - 只需将网站元素拖放到您的页面，添加内容并将其样式设置为您喜欢的样式<br><img src="/Mobirise%E6%90%AD%E5%BB%BA%E7%BD%91%E9%A1%B5/2020-05-12-19-11-21.png" class></p><h3 id="与众不同"><a href="#与众不同" class="headerlink" title="与众不同"></a>与众不同</h3><p>Mobirise Website Builder提供了大量1500多个网站块，模板和主题，包含数千个灵活选项。结合不同主题的积木，创造出独特的混合，<br><img src="/Mobirise%E6%90%AD%E5%BB%BA%E7%BD%91%E9%A1%B5/2020-05-12-19-11-54.png" class></p><h3 id="自动移动"><a href="#自动移动" class="headerlink" title="自动移动"></a>自动移动</h3><p>移动网络流量在2016年超过桌面流量，并且只会在2019年增长，这就是为什么创建在所有设备上看起来都很好的网站的重要性。无需特殊操作，您使用Mobirise制作的所有网站都适合移动设备。您不必创建网站的特殊移动版本，它将自动适应。<br><img src="/Mobirise%E6%90%AD%E5%BB%BA%E7%BD%91%E9%A1%B5/2020-05-12-19-12-21.png" class></p><h3 id="简单易用"><a href="#简单易用" class="headerlink" title="简单易用"></a>简单易用</h3><p>使用拖放式网站构建器缩短开发时间。将块放入页面，内联编辑内容并发布 - 无需技术技能。观看下面的视频，了解Mobirise的实际应用。</p><h3 id="超过1500个惊人的块"><a href="#超过1500个惊人的块" class="headerlink" title="超过1500个惊人的块"></a>超过1500个惊人的块</h3><p>Mobirise Mac提供50多个主题和150多个演示页面，包括滑块， 带灯箱的图库， 文章， 计数器， 倒计时， 全屏介绍， 图像和视频， 功能， 数据表和定价表， 进度条和周期， 时间表， 选项卡和手风琴， 号召性用语， 表格， 谷歌地图， 社交块， 推荐， 页脚等。块的设计考虑了最新的网页设计趋势，它们非常灵活，并且充满了自定义选项。</p><h2 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h2><h3 id="图像-内容滑块"><a href="#图像-内容滑块" class="headerlink" title="图像/内容滑块"></a>图像/内容滑块</h3><p>使用Mobirise 引导滑块创建响应式触摸滑动幻灯片。将图像，文本，按钮添加到幻灯片，设置自动播放，全屏，全宽或盒装布局。<br><img src="/Mobirise%E6%90%AD%E5%BB%BA%E7%BD%91%E9%A1%B5/2020-05-12-19-13-54.png" class></p><h3 id="、联系表格"><a href="#、联系表格" class="headerlink" title="、联系表格"></a>、联系表格</h3><p>无需任何服务器端集成即可轻松添加订阅和联系表单。只需将您的电子邮件链接到表单并立即获取提交。<br><img src="/Mobirise%E6%90%AD%E5%BB%BA%E7%BD%91%E9%A1%B5/2020-05-12-19-14-17.png" class></p><h3 id="图像画廊"><a href="#图像画廊" class="headerlink" title="图像画廊"></a>图像画廊</h3><p>使用移动优化的响应网格在砌体图库中展示您的图片。集成灯箱可将缩略图扩展为完整浏览器图像滑块。<br><img src="/Mobirise%E6%90%AD%E5%BB%BA%E7%BD%91%E9%A1%B5/2020-05-12-19-14-46.png" class></p><h3 id="手机菜单"><a href="#手机菜单" class="headerlink" title="手机菜单"></a>手机菜单</h3><p>Mobirise水平导航菜单在设备上折叠为单个图标移动菜单，也称为“ 汉堡菜单 ”，为所有访客提供完美的移动体验。<br><img src="/Mobirise%E6%90%AD%E5%BB%BA%E7%BD%91%E9%A1%B5/2020-05-12-19-15-11.png" class></p><h3 id="谷歌地图"><a href="#谷歌地图" class="headerlink" title="谷歌地图"></a>谷歌地图</h3><p>帮助客户找到通往公司所在地的路径 - 只需删除Google地图块并输入您的地址即可。<br><img src="/Mobirise%E6%90%AD%E5%BB%BA%E7%BD%91%E9%A1%B5/2020-05-12-19-15-38.png" class></p><h3 id="社交按钮"><a href="#社交按钮" class="headerlink" title="社交按钮"></a>社交按钮</h3><p>通过“分享此页面”和“关注我们”块来扩大您的受众群体并改善社交媒体参与度。社交分享计数器自动显示，无需任何调整。<br><img src="/Mobirise%E6%90%AD%E5%BB%BA%E7%BD%91%E9%A1%B5/2020-05-12-19-15-59.png" class></p><h3 id="字母和图标"><a href="#字母和图标" class="headerlink" title="字母和图标"></a>字母和图标</h3><p>从800多个Google字体和视网膜即用免费图标列表中进行选择，以设计独特的外观和感觉，并具有一些排版风格。<br><img src="/Mobirise%E6%90%AD%E5%BB%BA%E7%BD%91%E9%A1%B5/2020-05-12-19-16-22.png" class></p><h3 id="视频背景"><a href="#视频背景" class="headerlink" title="视频背景"></a>视频背景</h3><p>视频可以是网站的一个很好的补充。使您的网站栩栩如生，并与环境背景视频建立即时连接。<br><img src="/Mobirise%E6%90%AD%E5%BB%BA%E7%BD%91%E9%A1%B5/2020-05-12-19-16-46.png" class></p><h2 id="Mobirise-主要特点"><a href="#Mobirise-主要特点" class="headerlink" title="Mobirise 主要特点"></a>Mobirise 主要特点</h2><h3 id="只需几分钟就可以拖放块并构建网站"><a href="#只需几分钟就可以拖放块并构建网站" class="headerlink" title="只需几分钟就可以拖放块并构建网站"></a>只需几分钟就可以拖放块并构建网站</h3><p>Mobirise被设计为尽可能简单和无畏的事实，一旦您第一次启动应用程序，您将受到顶级工具栏和网站构建器面板的简约界面的欢迎，这一事实变得明显。使用Mobirise比看起来更简单，因为您只需单击右下角的大加号按钮并将块拖放到页面中。您将获得一系列有趣的块，例如jumbotrons，视频背景，汉堡菜单，粘贴标题，视差滚动和英雄图像。</p><h3 id="轻松创建响应式和移动优化的网站"><a href="#轻松创建响应式和移动优化的网站" class="headerlink" title="轻松创建响应式和移动优化的网站"></a>轻松创建响应式和移动优化的网站</h3><p>选择任何块后，其右上方会出现一个小菜单。借助这个小菜单，您可以以非常自然和直观的方式轻松地排列，移动，编辑或删除元素。因为如今，移动电话是我们生活中很重要的部分，网站必须具有适应性强且响应能力强的接口。考虑到这一点，Mobirise使您能够预览您的网站，并了解它们在智能手机，横向智能手机，桌子和计算机上的外观。</p><h3 id="不是最强大的网站建设软件解决方案，但绝对是最简单的"><a href="#不是最强大的网站建设软件解决方案，但绝对是最简单的" class="headerlink" title="不是最强大的网站建设软件解决方案，但绝对是最简单的"></a>不是最强大的网站建设软件解决方案，但绝对是最简单的</h3><p>更重要的是，Mobirise使您可以将您的网站发布到本地驱动器或在GitHub，Amazon S3和Google Drive上托管它。总而言之，Mobirise是一款高效的小型macOS应用程序，旨在尽可能简单和用户友好，这对于几乎没有网站建设经验的用户来说非常理想。</p><h2 id="Mobirise-使用方法"><a href="#Mobirise-使用方法" class="headerlink" title="Mobirise 使用方法"></a>Mobirise 使用方法</h2><h3 id="将块拖到页面"><a href="#将块拖到页面" class="headerlink" title="将块拖到页面"></a>将块拖到页面</h3><p>首先创建一个新网站并获取主题。然后使用右下角的大红色“加号”按钮展开块面板，然后开始拖动您喜欢的块。<br><img src="/Mobirise%E6%90%AD%E5%BB%BA%E7%BD%91%E9%A1%B5/2020-05-12-19-18-33.png" class></p><h3 id="编辑和样式内联"><a href="#编辑和样式内联" class="headerlink" title="编辑和样式内联"></a>编辑和样式内联</h3><p>像在常规文本编辑器中一样编辑每个块的内容，单击媒体元素以插入您自己的图像，视频或图标。<br><img src="/Mobirise%E6%90%AD%E5%BB%BA%E7%BD%91%E9%A1%B5/2020-05-12-19-18-50.png" class></p><h3 id="设置块参数"><a href="#设置块参数" class="headerlink" title="设置块参数"></a>设置块参数</h3><p>通过蓝色“齿轮”按钮引出的参数面板设置适当的选项。<br><img src="/Mobirise%E6%90%AD%E5%BB%BA%E7%BD%91%E9%A1%B5/2020-05-12-19-19-14.png" class></p><h3 id="预览和发布"><a href="#预览和发布" class="headerlink" title="预览和发布"></a>预览和发布</h3><p>单击网站构建器中的“移动视图”以检查您的网站在不同设备上的显示方式，并发布到本地驱动器，FTP或免费的Github页面。<br><img src="/Mobirise%E6%90%AD%E5%BB%BA%E7%BD%91%E9%A1%B5/2020-05-12-19-19-41.png" class></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http:linbei.top&quot;&gt;本人用Mobirise制作的网站请点击这里查看&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="环境搭建" scheme="https://linbei.top/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="随笔" scheme="https://linbei.top/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="Hexo" scheme="https://linbei.top/tags/Hexo/"/>
    
      <category term="前端" scheme="https://linbei.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
</feed>
